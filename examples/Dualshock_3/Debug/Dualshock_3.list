
Dualshock_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800c58c  0800c58c  0001c58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c790  0800c790  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c790  0800c790  0001c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c798  0800c798  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c798  0800c798  0001c798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c79c  0800c79c  0001c79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800c7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d2c  200000c0  0800c85c  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005dec  0800c85c  00025dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf16  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055ea  00000000  00000000  0004d002  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a88  00000000  00000000  000525f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001850  00000000  00000000  00054078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028e7a  00000000  00000000  000558c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a8b2  00000000  00000000  0007e742  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0dde  00000000  00000000  00098ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179dd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000712c  00000000  00000000  00179e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c574 	.word	0x0800c574

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800c574 	.word	0x0800c574

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Dualshock3Init>:
 * @brief  	Dualshock 3 init: this function sets features in the device to start the HID reporting
 * @param  	phost: pointer the the usbh handler
 * @retval	usbh status
 */
static USBH_StatusTypeDef Dualshock3Init(USBH_HandleTypeDef *phost)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 80005c8:	2301      	movs	r3, #1
 80005ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	int i = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 80005d2:	e01e      	b.n	8000612 <Dualshock3Init+0x52>
	{
		if(i>=5)
 80005d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	dd01      	ble.n	80005de <Dualshock3Init+0x1e>
		{
			return USBH_BUSY;
 80005da:	2301      	movs	r3, #1
 80005dc:	e0c3      	b.n	8000766 <Dualshock3Init+0x1a6>
		}
		uint8_t magic[] = {0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0xA0, 0x00,
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f00b fbbf 	bl	800bd6a <memset>
 80005ec:	2303      	movs	r3, #3
 80005ee:	743b      	strb	r3, [r7, #16]
 80005f0:	2301      	movs	r3, #1
 80005f2:	747b      	strb	r3, [r7, #17]
 80005f4:	23a0      	movs	r3, #160	; 0xa0
 80005f6:	74bb      	strb	r3, [r7, #18]
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
		status = USBH_HID_SetReport(phost, 0x03, 0xEF, magic, 48);
 80005f8:	f107 020c 	add.w	r2, r7, #12
 80005fc:	2330      	movs	r3, #48	; 0x30
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4613      	mov	r3, r2
 8000602:	22ef      	movs	r2, #239	; 0xef
 8000604:	2103      	movs	r1, #3
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 ffb0 	bl	800156c <USBH_HID_SetReport>
 800060c:	4603      	mov	r3, r0
 800060e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 8000612:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1dc      	bne.n	80005d4 <Dualshock3Init+0x14>
 800061a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800061c:	2b04      	cmp	r3, #4
 800061e:	dcd9      	bgt.n	80005d4 <Dualshock3Init+0x14>
	}

	status = USBH_BUSY;
 8000620:	2301      	movs	r3, #1
 8000622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	i = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 800062a:	e01e      	b.n	800066a <Dualshock3Init+0xaa>
	{
		if(i>=5)
 800062c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800062e:	2b04      	cmp	r3, #4
 8000630:	dd01      	ble.n	8000636 <Dualshock3Init+0x76>
		{
			return USBH_BUSY;
 8000632:	2301      	movs	r3, #1
 8000634:	e097      	b.n	8000766 <Dualshock3Init+0x1a6>
		}
		uint8_t magic[] = {0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0xB0, 0x00,
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00b fb93 	bl	800bd6a <memset>
 8000644:	2303      	movs	r3, #3
 8000646:	743b      	strb	r3, [r7, #16]
 8000648:	2301      	movs	r3, #1
 800064a:	747b      	strb	r3, [r7, #17]
 800064c:	23b0      	movs	r3, #176	; 0xb0
 800064e:	74bb      	strb	r3, [r7, #18]
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
		status = USBH_HID_SetReport(phost, 0x03, 0xEF, magic, 48);
 8000650:	f107 020c 	add.w	r2, r7, #12
 8000654:	2330      	movs	r3, #48	; 0x30
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4613      	mov	r3, r2
 800065a:	22ef      	movs	r2, #239	; 0xef
 800065c:	2103      	movs	r1, #3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 ff84 	bl	800156c <USBH_HID_SetReport>
 8000664:	4603      	mov	r3, r0
 8000666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 800066a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1dc      	bne.n	800062c <Dualshock3Init+0x6c>
 8000672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000674:	2b04      	cmp	r3, #4
 8000676:	dcd9      	bgt.n	800062c <Dualshock3Init+0x6c>
	}
	status = USBH_BUSY;
 8000678:	2301      	movs	r3, #1
 800067a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	i = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 8000682:	e018      	b.n	80006b6 <Dualshock3Init+0xf6>
	{
		if(i>=5)
 8000684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000686:	2b04      	cmp	r3, #4
 8000688:	dd01      	ble.n	800068e <Dualshock3Init+0xce>
		{
			return USBH_BUSY;
 800068a:	2301      	movs	r3, #1
 800068c:	e06b      	b.n	8000766 <Dualshock3Init+0x1a6>
		}
		uint8_t magic[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00b fb67 	bl	800bd6a <memset>
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
		status = USBH_HID_SetReport(phost, 0x02, 0x01, magic, 48);
 800069c:	f107 020c 	add.w	r2, r7, #12
 80006a0:	2330      	movs	r3, #48	; 0x30
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	2201      	movs	r2, #1
 80006a8:	2102      	movs	r1, #2
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 ff5e 	bl	800156c <USBH_HID_SetReport>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 80006b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1e2      	bne.n	8000684 <Dualshock3Init+0xc4>
 80006be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	dcdf      	bgt.n	8000684 <Dualshock3Init+0xc4>
	}

	status = USBH_BUSY;
 80006c4:	2301      	movs	r3, #1
 80006c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	i = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 80006ce:	e014      	b.n	80006fa <Dualshock3Init+0x13a>
	{
		if(i>=5)
 80006d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	dd01      	ble.n	80006da <Dualshock3Init+0x11a>
		{
			return USBH_BUSY;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e045      	b.n	8000766 <Dualshock3Init+0x1a6>
		}
		uint8_t magic[] = {0x42, 0x0c, 0x00, 0x00};
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <Dualshock3Init+0x1b0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
		status = USBH_HID_SetReport(phost, 0x03, 0xF4, magic, 4);
 80006e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80006e4:	2304      	movs	r3, #4
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	4613      	mov	r3, r2
 80006ea:	22f4      	movs	r2, #244	; 0xf4
 80006ec:	2103      	movs	r1, #3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 ff3c 	bl	800156c <USBH_HID_SetReport>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 80006fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1e6      	bne.n	80006d0 <Dualshock3Init+0x110>
 8000702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000704:	2b04      	cmp	r3, #4
 8000706:	dce3      	bgt.n	80006d0 <Dualshock3Init+0x110>
	}

	status = USBH_BUSY;
 8000708:	2301      	movs	r3, #1
 800070a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	i = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 8000712:	e01d      	b.n	8000750 <Dualshock3Init+0x190>
	{
		if(i>=5)
 8000714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000716:	2b04      	cmp	r3, #4
 8000718:	dd01      	ble.n	800071e <Dualshock3Init+0x15e>
		{
			return USBH_BUSY;
 800071a:	2301      	movs	r3, #1
 800071c:	e023      	b.n	8000766 <Dualshock3Init+0x1a6>
		}
		uint8_t magic[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <Dualshock3Init+0x1b4>)
 8000720:	f107 040c 	add.w	r4, r7, #12
 8000724:	461d      	mov	r5, r3
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				0x27, 0x10, 0x00, 0x32, 0xff, 0x27, 0x10, 0x00,
				0x32, 0xff, 0x27, 0x10, 0x00, 0x32, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		status = USBH_HID_SetReport(phost, 0x02, 0x01, magic, 48);
 8000736:	f107 020c 	add.w	r2, r7, #12
 800073a:	2330      	movs	r3, #48	; 0x30
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	2201      	movs	r2, #1
 8000742:	2102      	movs	r1, #2
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 ff11 	bl	800156c <USBH_HID_SetReport>
 800074a:	4603      	mov	r3, r0
 800074c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 8000750:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1dd      	bne.n	8000714 <Dualshock3Init+0x154>
 8000758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800075a:	2b04      	cmp	r3, #4
 800075c:	dcda      	bgt.n	8000714 <Dualshock3Init+0x154>
	}
	Dualshock3_connected_CB();
 800075e:	f000 f855 	bl	800080c <Dualshock3_connected_CB>
	return status;
 8000762:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000766:	4618      	mov	r0, r3
 8000768:	3748      	adds	r7, #72	; 0x48
 800076a:	46bd      	mov	sp, r7
 800076c:	bdb0      	pop	{r4, r5, r7, pc}
 800076e:	bf00      	nop
 8000770:	0800c58c 	.word	0x0800c58c
 8000774:	0800c590 	.word	0x0800c590

08000778 <decodeRawData>:
 * @param  	raw_HI: 2 highest bits of the value
 * @param  	raw_LO: 8 lowest bits of the value
 * @retval	decoded value int a signed 16 bits integer
 */
int16_t decodeRawData(uint8_t raw_HI, uint8_t raw_LO)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
	return (((uint16_t)raw_HI<<8) | raw_LO) - 512;
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	b21a      	sxth	r2, r3
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	b21b      	sxth	r3, r3
 8000792:	4313      	orrs	r3, r2
 8000794:	b21b      	sxth	r3, r3
 8000796:	b29b      	uxth	r3, r3
 8000798:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800079c:	b29b      	uxth	r3, r3
 800079e:	b21b      	sxth	r3, r3
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <USBH_HID_EventCallback>:

/**
 * Callback from usbh_hid library, called when an HID report is added to the fifo
 */
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	USBH_HID_GetRawReport(phost, (uint8_t*)&ds3report);
 80007b4:	4905      	ldr	r1, [pc, #20]	; (80007cc <USBH_HID_EventCallback+0x20>)
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f001 f906 	bl	80019c8 <USBH_HID_GetRawReport>
	Dualshock3_newReport_CB(&ds3report);
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <USBH_HID_EventCallback+0x20>)
 80007be:	f000 f807 	bl	80007d0 <Dualshock3_newReport_CB>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20005490 	.word	0x20005490

080007d0 <Dualshock3_newReport_CB>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Dualshock3_newReport_CB(DS3_report* report)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(reportQueueHandle) == 0)
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <Dualshock3_newReport_CB+0x38>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fecd 	bl	800857c <osMessageQueueGetSpace>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d104      	bne.n	80007f2 <Dualshock3_newReport_CB+0x22>
	{
		osMessageQueueReset(reportQueueHandle);
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <Dualshock3_newReport_CB+0x38>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f007 ff0d 	bl	800860c <osMessageQueueReset>
	}
	osMessageQueuePut(reportQueueHandle, report, 0, 0);
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <Dualshock3_newReport_CB+0x38>)
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2300      	movs	r3, #0
 80007f8:	2200      	movs	r2, #0
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	f007 fdd8 	bl	80083b0 <osMessageQueuePut>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200054d8 	.word	0x200054d8

0800080c <Dualshock3_connected_CB>:

void Dualshock3_connected_CB()
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	// use semaphore to start report task
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081e:	b087      	sub	sp, #28
 8000820:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000822:	f001 f9c3 	bl	8001bac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000826:	f000 f86d 	bl	8000904 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800082a:	f000 f8ff 	bl	8000a2c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800082e:	f000 f8d3 	bl	80009d8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	MX_USB_HOST_Init();
 8000832:	f00a ff69 	bl	800b708 <MX_USB_HOST_Init>

	// stops the broken auto generated thread for the usbh process
	MX_USB_HOST_SuspendThread();
 8000836:	f00a ff5b 	bl	800b6f0 <MX_USB_HOST_SuspendThread>

	// loads the dualshock 3 driver
	USBH_HID_GenericRegisterDriver(dualshock3_Driver);
 800083a:	4e22      	ldr	r6, [pc, #136]	; (80008c4 <main+0xa8>)
 800083c:	466d      	mov	r5, sp
 800083e:	f106 0410 	add.w	r4, r6, #16
 8000842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800084a:	e885 0003 	stmia.w	r5, {r0, r1}
 800084e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000852:	f000 fffb 	bl	800184c <USBH_HID_GenericRegisterDriver>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000856:	f007 fa6b 	bl	8007d30 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of usbhMutex */
	usbhMutexHandle = osMutexNew(&usbhMutex_attributes);
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <main+0xac>)
 800085c:	f007 fbda 	bl	8008014 <osMutexNew>
 8000860:	4602      	mov	r2, r0
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <main+0xb0>)
 8000864:	601a      	str	r2, [r3, #0]

	/* creation of uart2Mutex */
	uart2MutexHandle = osMutexNew(&uart2Mutex_attributes);
 8000866:	481a      	ldr	r0, [pc, #104]	; (80008d0 <main+0xb4>)
 8000868:	f007 fbd4 	bl	8008014 <osMutexNew>
 800086c:	4602      	mov	r2, r0
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <main+0xb8>)
 8000870:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of reportQueue */
	reportQueueHandle = osMessageQueueNew (2, sizeof(DS3_report), &reportQueue_attributes);
 8000872:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <main+0xbc>)
 8000874:	2138      	movs	r1, #56	; 0x38
 8000876:	2002      	movs	r0, #2
 8000878:	f007 fd14 	bl	80082a4 <osMessageQueueNew>
 800087c:	4602      	mov	r2, r0
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <main+0xc0>)
 8000880:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <main+0xc4>)
 8000884:	2100      	movs	r1, #0
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <main+0xc8>)
 8000888:	f007 fabc 	bl	8007e04 <osThreadNew>
 800088c:	4602      	mov	r2, r0
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <main+0xcc>)
 8000890:	601a      	str	r2, [r3, #0]

	/* creation of usbhTask */
	usbhTaskHandle = osThreadNew(usbhTaskFunction, NULL, &usbhTask_attributes);
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <main+0xd0>)
 8000894:	2100      	movs	r1, #0
 8000896:	4816      	ldr	r0, [pc, #88]	; (80008f0 <main+0xd4>)
 8000898:	f007 fab4 	bl	8007e04 <osThreadNew>
 800089c:	4602      	mov	r2, r0
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <main+0xd8>)
 80008a0:	601a      	str	r2, [r3, #0]

	/* creation of processReport */
	processReportHandle = osThreadNew(processReportFunction, NULL, &processReport_attributes);
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <main+0xdc>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4815      	ldr	r0, [pc, #84]	; (80008fc <main+0xe0>)
 80008a8:	f007 faac 	bl	8007e04 <osThreadNew>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <main+0xe4>)
 80008b0:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	osThreadSuspend(defaultTaskHandle);
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <main+0xcc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f007 fb4a 	bl	8007f50 <osThreadSuspend>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80008bc:	f007 fa6c 	bl	8007d98 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80008c0:	e7fe      	b.n	80008c0 <main+0xa4>
 80008c2:	bf00      	nop
 80008c4:	20000000 	.word	0x20000000
 80008c8:	0800c6fc 	.word	0x0800c6fc
 80008cc:	200054d4 	.word	0x200054d4
 80008d0:	0800c70c 	.word	0x0800c70c
 80008d4:	200054d0 	.word	0x200054d0
 80008d8:	0800c6e4 	.word	0x0800c6e4
 80008dc:	200054d8 	.word	0x200054d8
 80008e0:	0800c678 	.word	0x0800c678
 80008e4:	08000acd 	.word	0x08000acd
 80008e8:	200054c8 	.word	0x200054c8
 80008ec:	0800c69c 	.word	0x0800c69c
 80008f0:	08000ae1 	.word	0x08000ae1
 80008f4:	200054cc 	.word	0x200054cc
 80008f8:	0800c6c0 	.word	0x0800c6c0
 80008fc:	08000b11 	.word	0x08000b11
 8000900:	2000551c 	.word	0x2000551c

08000904 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2234      	movs	r2, #52	; 0x34
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f00b fa29 	bl	800bd6a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <SystemClock_Config+0xcc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a27      	ldr	r2, [pc, #156]	; (80009d0 <SystemClock_Config+0xcc>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <SystemClock_Config+0xcc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <SystemClock_Config+0xd0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <SystemClock_Config+0xd0>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <SystemClock_Config+0xd0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000960:	2301      	movs	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000968:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000972:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000978:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800097c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000982:	2307      	movs	r3, #7
 8000984:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fbdc 	bl	8004148 <HAL_RCC_OscConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000996:	f000 f953 	bl	8000c40 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	230f      	movs	r3, #15
 800099c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099e:	2302      	movs	r3, #2
 80009a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2105      	movs	r1, #5
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 f8d9 	bl	8003b70 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80009c4:	f000 f93c 	bl	8000c40 <Error_Handler>
	}
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	; 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_USART2_UART_Init+0x50>)
 80009e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f004 f832 	bl	8004a78 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000a1a:	f000 f911 	bl	8000c40 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200054dc 	.word	0x200054dc
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_GPIO_Init+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MX_GPIO_Init+0x9c>)
 8000a9c:	f001 fb5e 	bl	800215c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_GPIO_Init+0x9c>)
 8000ab8:	f001 f9be 	bl	8001e38 <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020800 	.word	0x40020800

08000acc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8000ad4:	f00a fe18 	bl	800b708 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f007 fa6d 	bl	8007fb8 <osDelay>
 8000ade:	e7fb      	b.n	8000ad8 <StartDefaultTask+0xc>

08000ae0 <usbhTaskFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_usbhTaskFunction */
void usbhTaskFunction(void *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN usbhTaskFunction */
	/* Infinite loop */
	for(;;)
	{
		osMutexAcquire(usbhMutexHandle, osWaitForever);
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <usbhTaskFunction+0x2c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	4618      	mov	r0, r3
 8000af2:	f007 fb29 	bl	8008148 <osMutexAcquire>
		MX_USB_HOST_Process();
 8000af6:	f00a fdf1 	bl	800b6dc <MX_USB_HOST_Process>
		osMutexRelease(usbhMutexHandle);
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <usbhTaskFunction+0x2c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f007 fb80 	bl	8008204 <osMutexRelease>

		osDelay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f007 fa57 	bl	8007fb8 <osDelay>
		osMutexAcquire(usbhMutexHandle, osWaitForever);
 8000b0a:	e7ed      	b.n	8000ae8 <usbhTaskFunction+0x8>
 8000b0c:	200054d4 	.word	0x200054d4

08000b10 <processReportFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_processReportFunction */
void processReportFunction(void *argument)
{
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	b0c3      	sub	sp, #268	; 0x10c
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN processReportFunction */
	/* Infinite loop */

	char Uart_Buf[192] = "";
 8000b18:	2300      	movs	r3, #0
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b20:	22bc      	movs	r2, #188	; 0xbc
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00b f920 	bl	800bd6a <memset>

	for(;;)
	{
		DS3_report report;
		osMessageQueueGet(reportQueueHandle, &report, NULL, osWaitForever);
 8000b2a:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <processReportFunction+0xf8>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f107 0108 	add.w	r1, r7, #8
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2200      	movs	r2, #0
 8000b38:	f007 fcae 	bl	8008498 <osMessageQueueGet>

		sprintf(Uart_Buf, "Buttons: %2X %2X %2X\r\n", ((uint8_t*)&report)[2], ((uint8_t*)&report)[3], ((uint8_t*)&report)[4]);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	3302      	adds	r3, #2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	3303      	adds	r3, #3
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	3304      	adds	r3, #4
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	492a      	ldr	r1, [pc, #168]	; (8000c0c <processReportFunction+0xfc>)
 8000b62:	f00b f9c3 	bl	800beec <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, strlen(Uart_Buf), 100);
 8000b66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fb50 	bl	8000210 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b78:	2364      	movs	r3, #100	; 0x64
 8000b7a:	4825      	ldr	r0, [pc, #148]	; (8000c10 <processReportFunction+0x100>)
 8000b7c:	f003 ffc9 	bl	8004b12 <HAL_UART_Transmit>

		sprintf(Uart_Buf, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
				decodeRawData(report.AccX_Raw_HI, report.AccX_Raw_LO),
 8000b80:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000b84:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fdf4 	bl	8000778 <decodeRawData>
 8000b90:	4603      	mov	r3, r0
		sprintf(Uart_Buf, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
 8000b92:	461d      	mov	r5, r3
				decodeRawData(report.AccY_Raw_HI, report.AccY_Raw_LO),
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b98:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fdea 	bl	8000778 <decodeRawData>
 8000ba4:	4603      	mov	r3, r0
		sprintf(Uart_Buf, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
 8000ba6:	461e      	mov	r6, r3
				decodeRawData(report.AccZ_Raw_HI, report.AccZ_Raw_LO),
 8000ba8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000bac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fde0 	bl	8000778 <decodeRawData>
 8000bb8:	4603      	mov	r3, r0
		sprintf(Uart_Buf, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
 8000bba:	461c      	mov	r4, r3
				decodeRawData(report.Gyro_Raw_HI, report.Gyro_Raw_LO));
 8000bbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bc0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fdd6 	bl	8000778 <decodeRawData>
 8000bcc:	4603      	mov	r3, r0
		sprintf(Uart_Buf, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
 8000bce:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	9400      	str	r4, [sp, #0]
 8000bd6:	4633      	mov	r3, r6
 8000bd8:	462a      	mov	r2, r5
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <processReportFunction+0x104>)
 8000bdc:	f00b f986 	bl	800beec <siprintf>


		HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, strlen(Uart_Buf), 100);
 8000be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fb13 	bl	8000210 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <processReportFunction+0x100>)
 8000bf6:	f003 ff8c 	bl	8004b12 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\033[F\033[F", strlen("\033[F\033[F"), 100);
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2206      	movs	r2, #6
 8000bfe:	4906      	ldr	r1, [pc, #24]	; (8000c18 <processReportFunction+0x108>)
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <processReportFunction+0x100>)
 8000c02:	f003 ff86 	bl	8004b12 <HAL_UART_Transmit>
	{
 8000c06:	e790      	b.n	8000b2a <processReportFunction+0x1a>
 8000c08:	200054d8 	.word	0x200054d8
 8000c0c:	0800c60c 	.word	0x0800c60c
 8000c10:	200054dc 	.word	0x200054dc
 8000c14:	0800c624 	.word	0x0800c624
 8000c18:	0800c648 	.word	0x0800c648

08000c1c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c2e:	f000 ffdf 	bl	8001bf0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40001000 	.word	0x40001000

08000c40 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	210f      	movs	r1, #15
 8000c92:	f06f 0001 	mvn.w	r0, #1
 8000c96:	f001 f8a5 	bl	8001de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_UART_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12b      	bne.n	8000d22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0x88>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_UART_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_UART_MspInit+0x88>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_UART_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d02:	230c      	movs	r3, #12
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_UART_MspInit+0x8c>)
 8000d1e:	f001 f88b 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2036      	movs	r0, #54	; 0x36
 8000d4e:	f001 f849 	bl	8001de4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d52:	2036      	movs	r0, #54	; 0x36
 8000d54:	f001 f862 	bl	8001e1c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d74:	f107 0210 	add.w	r2, r7, #16
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 f810 	bl	8003da4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d84:	f002 ffe6 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_InitTick+0xa8>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	0c9b      	lsrs	r3, r3, #18
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_InitTick+0xac>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <HAL_InitTick+0xb0>)
 8000da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_InitTick+0xac>)
 8000da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_InitTick+0xac>)
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_InitTick+0xac>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_InitTick+0xac>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_InitTick+0xac>)
 8000dbe:	f003 fc1d 	bl	80045fc <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d104      	bne.n	8000dd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_InitTick+0xac>)
 8000dca:	f003 fc4c 	bl	8004666 <HAL_TIM_Base_Start_IT>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3730      	adds	r7, #48	; 0x30
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	20005520 	.word	0x20005520
 8000de8:	40001000 	.word	0x40001000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM6_DAC_IRQHandler+0x10>)
 8000e1e:	f003 fc46 	bl	80046ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20005520 	.word	0x20005520

08000e2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <OTG_FS_IRQHandler+0x10>)
 8000e32:	f001 fc3b 	bl	80026ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20005b24 	.word	0x20005b24

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f00a ff3e 	bl	800bcf0 <__errno>
 8000e74:	4602      	mov	r2, r0
 8000e76:	230c      	movs	r3, #12
 8000e78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20020000 	.word	0x20020000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	200000dc 	.word	0x200000dc
 8000ea8:	20005df0 	.word	0x20005df0

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x28>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x28>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x28>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08b      	sub	sp, #44	; 0x2c
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  #ifndef BOOTMODE
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0xFFU, 0xFFU);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8000eea:	7919      	ldrb	r1, [r3, #4]
 8000eec:	23ff      	movs	r3, #255	; 0xff
 8000eee:	22ff      	movs	r2, #255	; 0xff
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f005 faa5 	bl	8006440 <USBH_FindInterface>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75bb      	strb	r3, [r7, #22]
  #else
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
  #endif

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8000efa:	7dbb      	ldrb	r3, [r7, #22]
 8000efc:	2bff      	cmp	r3, #255	; 0xff
 8000efe:	d002      	beq.n	8000f06 <USBH_HID_InterfaceInit+0x2e>
 8000f00:	7dbb      	ldrb	r3, [r7, #22]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d901      	bls.n	8000f0a <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8000f06:	2302      	movs	r3, #2
 8000f08:	e106      	b.n	8001118 <USBH_HID_InterfaceInit+0x240>
  }

  status = USBH_SelectInterface(phost, interface);
 8000f0a:	7dbb      	ldrb	r3, [r7, #22]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f005 fa7a 	bl	8006408 <USBH_SelectInterface>
 8000f14:	4603      	mov	r3, r0
 8000f16:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8000f18:	7d7b      	ldrb	r3, [r7, #21]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e0fa      	b.n	8001118 <USBH_HID_InterfaceInit+0x240>
  }

  phost->pActiveClass->pData = class_pData;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8000f28:	4a7d      	ldr	r2, [pc, #500]	; (8001120 <USBH_HID_InterfaceInit+0x248>)
 8000f2a:	61da      	str	r2, [r3, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <USBH_HID_InterfaceInit+0x68>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e0eb      	b.n	8001118 <USBH_HID_InterfaceInit+0x240>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8000f40:	2234      	movs	r2, #52	; 0x34
 8000f42:	2100      	movs	r1, #0
 8000f44:	6938      	ldr	r0, [r7, #16]
 8000f46:	f00a ff10 	bl	800bd6a <memset>

  HID_Handle->state = HID_ERROR;
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8000f50:	7dbb      	ldrb	r3, [r7, #22]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	211a      	movs	r1, #26
 8000f56:	fb01 f303 	mul.w	r3, r1, r3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d103      	bne.n	8000f6e <USBH_HID_InterfaceInit+0x96>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4a6e      	ldr	r2, [pc, #440]	; (8001124 <USBH_HID_InterfaceInit+0x24c>)
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f6c:	e011      	b.n	8000f92 <USBH_HID_InterfaceInit+0xba>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8000f6e:	7dbb      	ldrb	r3, [r7, #22]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	211a      	movs	r1, #26
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	f203 3349 	addw	r3, r3, #841	; 0x349
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d103      	bne.n	8000f8c <USBH_HID_InterfaceInit+0xb4>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4a68      	ldr	r2, [pc, #416]	; (8001128 <USBH_HID_InterfaceInit+0x250>)
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8a:	e002      	b.n	8000f92 <USBH_HID_InterfaceInit+0xba>
  }
  else
  {
    USBH_UsrLog("Generic HID device found!");
    HID_Handle->Init = USBH_HID_GenericInit;
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4a67      	ldr	r2, [pc, #412]	; (800112c <USBH_HID_InterfaceInit+0x254>)
 8000f90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  HID_Handle->state     = HID_INIT;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2200      	movs	r2, #0
 8000f96:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8000f9e:	7dbb      	ldrb	r3, [r7, #22]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	211a      	movs	r1, #26
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8000fb4:	7dbb      	ldrb	r3, [r7, #22]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	211a      	movs	r1, #26
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8000fca:	7dbb      	ldrb	r3, [r7, #22]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	211a      	movs	r1, #26
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	8b9b      	ldrh	r3, [r3, #28]
 8000fe6:	2b09      	cmp	r3, #9
 8000fe8:	d802      	bhi.n	8000ff0 <USBH_HID_InterfaceInit+0x118>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	220a      	movs	r2, #10
 8000fee:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8000ff0:	7dbb      	ldrb	r3, [r7, #22]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	211a      	movs	r1, #26
 8000ff6:	fb01 f303 	mul.w	r3, r1, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f203 3346 	addw	r3, r3, #838	; 0x346
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b02      	cmp	r3, #2
 8001004:	bf28      	it	cs
 8001006:	2302      	movcs	r3, #2
 8001008:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800100a:	2300      	movs	r3, #0
 800100c:	75fb      	strb	r3, [r7, #23]
 800100e:	e07d      	b.n	800110c <USBH_HID_InterfaceInit+0x234>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8001010:	7dbb      	ldrb	r3, [r7, #22]
 8001012:	7df9      	ldrb	r1, [r7, #23]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	3101      	adds	r1, #1
 8001018:	00c9      	lsls	r1, r1, #3
 800101a:	201a      	movs	r0, #26
 800101c:	fb00 f303 	mul.w	r3, r0, r3
 8001020:	440b      	add	r3, r1
 8001022:	4413      	add	r3, r2
 8001024:	f203 3346 	addw	r3, r3, #838	; 0x346
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b25b      	sxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	da35      	bge.n	800109c <USBH_HID_InterfaceInit+0x1c4>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8001030:	7dbb      	ldrb	r3, [r7, #22]
 8001032:	7df9      	ldrb	r1, [r7, #23]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	3101      	adds	r1, #1
 8001038:	00c9      	lsls	r1, r1, #3
 800103a:	201a      	movs	r0, #26
 800103c:	fb00 f303 	mul.w	r3, r0, r3
 8001040:	440b      	add	r3, r1
 8001042:	4413      	add	r3, r2
 8001044:	f203 3346 	addw	r3, r3, #838	; 0x346
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	4619      	mov	r1, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f006 fe00 	bl	8007c5a <USBH_AllocPipe>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	7859      	ldrb	r1, [r3, #1]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	7918      	ldrb	r0, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	8b12      	ldrh	r2, [r2, #24]
 800107a:	9202      	str	r2, [sp, #8]
 800107c:	2203      	movs	r2, #3
 800107e:	9201      	str	r2, [sp, #4]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4623      	mov	r3, r4
 8001084:	4602      	mov	r2, r0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f006 fdb8 	bl	8007bfc <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f00a fda5 	bl	800bbe4 <USBH_LL_SetToggle>
 800109a:	e034      	b.n	8001106 <USBH_HID_InterfaceInit+0x22e>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800109c:	7dbb      	ldrb	r3, [r7, #22]
 800109e:	7df9      	ldrb	r1, [r7, #23]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	3101      	adds	r1, #1
 80010a4:	00c9      	lsls	r1, r1, #3
 80010a6:	201a      	movs	r0, #26
 80010a8:	fb00 f303 	mul.w	r3, r0, r3
 80010ac:	440b      	add	r3, r1
 80010ae:	4413      	add	r3, r2
 80010b0:	f203 3346 	addw	r3, r3, #838	; 0x346
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	78db      	ldrb	r3, [r3, #3]
 80010be:	4619      	mov	r1, r3
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f006 fdca 	bl	8007c5a <USBH_AllocPipe>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	7819      	ldrb	r1, [r3, #0]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	78d8      	ldrb	r0, [r3, #3]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	8b12      	ldrh	r2, [r2, #24]
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	2203      	movs	r2, #3
 80010ea:	9201      	str	r2, [sp, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	4623      	mov	r3, r4
 80010f0:	4602      	mov	r2, r0
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f006 fd82 	bl	8007bfc <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f00a fd6f 	bl	800bbe4 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	3301      	adds	r3, #1
 800110a:	75fb      	strb	r3, [r7, #23]
 800110c:	7dfa      	ldrb	r2, [r7, #23]
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	429a      	cmp	r2, r3
 8001112:	f4ff af7d 	bcc.w	8001010 <USBH_HID_InterfaceInit+0x138>
    }
  }



  return USBH_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	200000e0 	.word	0x200000e0
 8001124:	08001a15 	.word	0x08001a15
 8001128:	08001ac5 	.word	0x08001ac5
 800112c:	080018b1 	.word	0x080018b1

08001130 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00e      	beq.n	8001168 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	4619      	mov	r1, r3
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f006 fd72 	bl	8007c3a <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	4619      	mov	r1, r3
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f006 fd9d 	bl	8007c9c <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00e      	beq.n	800118e <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f006 fd5f 	bl	8007c3a <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f006 fd8a 	bl	8007c9c <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00a fdce 	bl	800bd44 <free>
    phost->pActiveClass->pData = 0U;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	795b      	ldrb	r3, [r3, #5]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d851      	bhi.n	8001282 <USBH_HID_ClassRequest+0xc6>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <USBH_HID_ClassRequest+0x28>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	080011fd 	.word	0x080011fd
 80011e8:	08001283 	.word	0x08001283
 80011ec:	08001217 	.word	0x08001217
 80011f0:	080011fd 	.word	0x080011fd
 80011f4:	08001241 	.word	0x08001241
 80011f8:	0800126b 	.word	0x0800126b
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	331c      	adds	r3, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f000 fa07 	bl	800161c <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2202      	movs	r2, #2
 8001212:	715a      	strb	r2, [r3, #5]

    break;
 8001214:	e03a      	b.n	800128c <USBH_HID_ClassRequest+0xd0>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f962 	bl	80014e6 <USBH_HID_GetHIDReportDescriptor>
 8001222:	4603      	mov	r3, r0
 8001224:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d103      	bne.n	8001234 <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2204      	movs	r2, #4
 8001230:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 8001232:	e028      	b.n	8001286 <USBH_HID_ClassRequest+0xca>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d125      	bne.n	8001286 <USBH_HID_ClassRequest+0xca>
      status = USBH_FAIL;
 800123a:	2302      	movs	r3, #2
 800123c:	73fb      	strb	r3, [r7, #15]
    break;
 800123e:	e022      	b.n	8001286 <USBH_HID_ClassRequest+0xca>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f967 	bl	8001518 <USBH_HID_SetIdle>
 800124a:	4603      	mov	r3, r0
 800124c:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <USBH_HID_ClassRequest+0xa0>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2205      	movs	r2, #5
 8001258:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 800125a:	e016      	b.n	800128a <USBH_HID_ClassRequest+0xce>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d113      	bne.n	800128a <USBH_HID_ClassRequest+0xce>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2205      	movs	r2, #5
 8001266:	715a      	strb	r2, [r3, #5]
    break;
 8001268:	e00f      	b.n	800128a <USBH_HID_ClassRequest+0xce>

  case HID_REQ_SET_PROTOCOL:
#ifndef BOOTMODE
	  /* bypass the set protocol state */
	  HID_Handle->ctl_state = HID_REQ_IDLE;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2201      	movs	r2, #1
 800126e:	715a      	strb	r2, [r3, #5]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001276:	2102      	movs	r1, #2
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	4798      	blx	r3
      status = USBH_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
    {
      /* .. */
    }

#endif
    break;
 8001280:	e004      	b.n	800128c <USBH_HID_ClassRequest+0xd0>

  case HID_REQ_IDLE:
  default:
    break;
 8001282:	bf00      	nop
 8001284:	e002      	b.n	800128c <USBH_HID_ClassRequest+0xd0>
    break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <USBH_HID_ClassRequest+0xd0>
    break;
 800128a:	bf00      	nop
  }

  return status;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop

08001298 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;
  USBH_URBStateTypeDef urb_state;

  switch (HID_Handle->state)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	789b      	ldrb	r3, [r3, #2]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	f200 80e2 	bhi.w	800147c <USBH_HID_Process+0x1e4>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <USBH_HID_Process+0x28>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012dd 	.word	0x080012dd
 80012c4:	08001309 	.word	0x08001309
 80012c8:	0800147d 	.word	0x0800147d
 80012cc:	0800147d 	.word	0x0800147d
 80012d0:	080013b1 	.word	0x080013b1
 80012d4:	0800137f 	.word	0x0800137f
 80012d8:	080013df 	.word	0x080013df
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2201      	movs	r2, #1
 80012e8:	709a      	strb	r2, [r3, #2]



#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2202      	movs	r2, #2
 80012ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	f007 f855 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 8001306:	e0bc      	b.n	8001482 <USBH_HID_Process+0x1ea>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	8b1b      	ldrh	r3, [r3, #24]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4613      	mov	r3, r2
 8001316:	2200      	movs	r2, #0
 8001318:	2101      	movs	r1, #1
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f952 	bl	80015c4 <USBH_HID_GetReport>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <USBH_HID_Process+0x9a>
      {
        HID_Handle->state = HID_SYNC;
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2205      	movs	r2, #5
 800132e:	709a      	strb	r2, [r3, #2]
 8001330:	e016      	b.n	8001360 <USBH_HID_Process+0xc8>
      }
      else if (status == USBH_BUSY)
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <USBH_HID_Process+0xac>
      {
        HID_Handle->state = HID_IDLE;
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2201      	movs	r2, #1
 800133c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
 8001342:	e00d      	b.n	8001360 <USBH_HID_Process+0xc8>
      }
      else if (status == USBH_NOT_SUPPORTED)
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d105      	bne.n	8001356 <USBH_HID_Process+0xbe>
      {
        HID_Handle->state = HID_SYNC;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2205      	movs	r2, #5
 800134e:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	75fb      	strb	r3, [r7, #23]
 8001354:	e004      	b.n	8001360 <USBH_HID_Process+0xc8>
      }
      else
      {
        HID_Handle->state = HID_ERROR;
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	2207      	movs	r2, #7
 800135a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800135c:	2302      	movs	r3, #2
 800135e:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8001374:	2300      	movs	r3, #0
 8001376:	2200      	movs	r2, #0
 8001378:	f007 f81a 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 800137c:	e081      	b.n	8001482 <USBH_HID_Process+0x1ea>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <USBH_HID_Process+0xfa>
      {
        HID_Handle->state = HID_GET_DATA;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2204      	movs	r2, #4
 8001390:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2202      	movs	r2, #2
 8001396:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80013a6:	2300      	movs	r3, #0
 80013a8:	2200      	movs	r2, #0
 80013aa:	f007 f801 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 80013ae:	e068      	b.n	8001482 <USBH_HID_Process+0x1ea>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f006 fbfd 	bl	8007bbe <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2206      	movs	r2, #6
 80013c8:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 80013dc:	e051      	b.n	8001482 <USBH_HID_Process+0x1ea>

    case HID_POLL:

    	urb_state = USBH_LL_GetURBState(phost, HID_Handle->InPipe);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f00a fbd3 	bl	800bb90 <USBH_LL_GetURBState>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]
      if (urb_state == USBH_URB_DONE || urb_state == USBH_URB_IDLE)
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d002      	beq.n	80013fa <USBH_HID_Process+0x162>
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d12e      	bne.n	8001458 <USBH_HID_Process+0x1c0>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f00a fb33 	bl	800ba6c <USBH_LL_GetLastXferSize>
 8001406:	60b8      	str	r0, [r7, #8]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800140e:	2b00      	cmp	r3, #0
 8001410:	d132      	bne.n	8001478 <USBH_HID_Process+0x1e0>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d02f      	beq.n	8001478 <USBH_HID_Process+0x1e0>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f103 0008 	add.w	r0, r3, #8
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6959      	ldr	r1, [r3, #20]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	8b1b      	ldrh	r3, [r3, #24]
 8001426:	461a      	mov	r2, r3
 8001428:	f000 f9bb 	bl	80017a2 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff f9b9 	bl	80007ac <USBH_HID_EventCallback>

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2202      	movs	r2, #2
 800143e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800144e:	2300      	movs	r3, #0
 8001450:	2200      	movs	r2, #0
 8001452:	f006 ffad 	bl	80083b0 <osMessageQueuePut>
        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8001456:	e00f      	b.n	8001478 <USBH_HID_Process+0x1e0>
        }
      }
      else
      {
        /* IN Endpoint Stalled */
        if (urb_state == USBH_URB_STALL)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b05      	cmp	r3, #5
 800145c:	d110      	bne.n	8001480 <USBH_HID_Process+0x1e8>
        {
          /* Issue Clear Feature on interrupt IN endpoint */
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	7e9b      	ldrb	r3, [r3, #26]
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f005 feca 	bl	80071fe <USBH_ClrFeature>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <USBH_HID_Process+0x1e8>
          {
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2204      	movs	r2, #4
 8001474:	709a      	strb	r2, [r3, #2]
          }
        }
      }
      break;
 8001476:	e003      	b.n	8001480 <USBH_HID_Process+0x1e8>
        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8001478:	bf00      	nop
      break;
 800147a:	e001      	b.n	8001480 <USBH_HID_Process+0x1e8>

    default:
      break;
 800147c:	bf00      	nop
 800147e:	e000      	b.n	8001482 <USBH_HID_Process+0x1ea>
      break;
 8001480:	bf00      	nop
  }

  return status;
 8001482:	7dfb      	ldrb	r3, [r7, #23]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d11a      	bne.n	80014dc <USBH_HID_SOFProcess+0x50>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	8b92      	ldrh	r2, [r2, #28]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d310      	bcc.n	80014dc <USBH_HID_SOFProcess+0x50>
    {
      HID_Handle->state = HID_GET_DATA;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2204      	movs	r2, #4
 80014be:	709a      	strb	r2, [r3, #2]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2202      	movs	r2, #2
 80014c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80014d4:	2300      	movs	r3, #0
 80014d6:	2200      	movs	r2, #0
 80014d8:	f006 ff6a 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
    }
  }
  return USBH_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af02      	add	r7, sp, #8
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                                USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                                USB_DESC_HID_REPORT,
                                phost->device.Data,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8001502:	2101      	movs	r1, #1
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f005 fdda 	bl	80070be <USBH_GetDescriptor>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
 8001524:	4613      	mov	r3, r2
 8001526:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2221      	movs	r2, #33	; 0x21
 800152c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	220a      	movs	r2, #10
 8001532:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	b29b      	uxth	r3, r3
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29a      	uxth	r2, r3
 800153c:	78bb      	ldrb	r3, [r7, #2]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	82da      	strh	r2, [r3, #22]
  USBH_StatusTypeDef status = USBH_CtlReq(phost, 0U, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f006 f830 	bl	80075be <USBH_CtlReq>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]

  return status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <USBH_HID_SetReport>:
USBH_StatusTypeDef USBH_HID_SetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	72fb      	strb	r3, [r7, #11]
 800157a:	4613      	mov	r3, r2
 800157c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2221      	movs	r2, #33	; 0x21
 8001582:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2209      	movs	r2, #9
 8001588:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	b29b      	uxth	r3, r3
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b29a      	uxth	r2, r3
 8001592:	7abb      	ldrb	r3, [r7, #10]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80015a4:	7e3b      	ldrb	r3, [r7, #24]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80015ac:	7e3b      	ldrb	r3, [r7, #24]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f006 f802 	bl	80075be <USBH_CtlReq>
 80015ba:	4603      	mov	r3, r0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	72fb      	strb	r3, [r7, #11]
 80015d2:	4613      	mov	r3, r2
 80015d4:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	22a1      	movs	r2, #161	; 0xa1
 80015da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	7abb      	ldrb	r3, [r7, #10]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80015fc:	7e3b      	ldrb	r3, [r7, #24]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8001604:	7e3b      	ldrb	r3, [r7, #24]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f005 ffd6 	bl	80075be <USBH_CtlReq>
 8001612:	4603      	mov	r3, r0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3302      	adds	r3, #2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b29a      	uxth	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3303      	adds	r3, #3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b29b      	uxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8001642:	897b      	ldrh	r3, [r7, #10]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d943      	bls.n	80016d0 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8001648:	2309      	movs	r3, #9
 800164a:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800164c:	e03c      	b.n	80016c8 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4619      	mov	r1, r3
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f005 ff97 	bl	8007588 <USBH_GetNextDesc>
 800165a:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	2b21      	cmp	r3, #33	; 0x21
 8001662:	d131      	bne.n	80016c8 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	785a      	ldrb	r2, [r3, #1]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3302      	adds	r3, #2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3303      	adds	r3, #3
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b29b      	uxth	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b29a      	uxth	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	791a      	ldrb	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	795a      	ldrb	r2, [r3, #5]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	799a      	ldrb	r2, [r3, #6]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3307      	adds	r3, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3308      	adds	r3, #8
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	811a      	strh	r2, [r3, #8]
        break;
 80016c4:	bf00      	nop
      }
    }
  }
}
 80016c6:	e003      	b.n	80016d0 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 80016c8:	893b      	ldrh	r3, [r7, #8]
 80016ca:	897a      	ldrh	r2, [r7, #10]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8be      	bhi.n	800164e <USBH_HID_ParseHIDDesc+0x32>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4613      	mov	r3, r2
 80016e4:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	7a9b      	ldrb	r3, [r3, #10]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d131      	bne.n	800178e <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2201      	movs	r2, #1
 800172e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	82fb      	strh	r3, [r7, #22]
 8001734:	e027      	b.n	8001786 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	88da      	ldrh	r2, [r3, #6]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	889b      	ldrh	r3, [r3, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	d019      	beq.n	8001776 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	88d2      	ldrh	r2, [r2, #6]
 800174a:	441a      	add	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	6139      	str	r1, [r7, #16]
 8001752:	7812      	ldrb	r2, [r2, #0]
 8001754:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	88db      	ldrh	r3, [r3, #6]
 800175a:	3301      	adds	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	88da      	ldrh	r2, [r3, #6]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	891b      	ldrh	r3, [r3, #8]
 800176a:	429a      	cmp	r2, r3
 800176c:	d108      	bne.n	8001780 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	80da      	strh	r2, [r3, #6]
 8001774:	e004      	b.n	8001780 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	729a      	strb	r2, [r3, #10]
        return i;
 800177c:	8afb      	ldrh	r3, [r7, #22]
 800177e:	e00a      	b.n	8001796 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8001780:	8afb      	ldrh	r3, [r7, #22]
 8001782:	3301      	adds	r3, #1
 8001784:	82fb      	strh	r3, [r7, #22]
 8001786:	8afa      	ldrh	r2, [r7, #22]
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3d3      	bcc.n	8001736 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8001794:	88fb      	ldrh	r3, [r7, #6]
}
 8001796:	4618      	mov	r0, r3
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b087      	sub	sp, #28
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	4613      	mov	r3, r2
 80017ae:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	7a9b      	ldrb	r3, [r3, #10]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d13c      	bne.n	8001836 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	82fb      	strh	r3, [r7, #22]
 80017c6:	e032      	b.n	800182e <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	889b      	ldrh	r3, [r3, #4]
 80017cc:	3301      	adds	r3, #1
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	88d2      	ldrh	r2, [r2, #6]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00a      	beq.n	80017ec <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	3301      	adds	r3, #1
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d108      	bne.n	80017f6 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	88db      	ldrh	r3, [r3, #6]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	729a      	strb	r2, [r3, #10]
        return i;
 80017f2:	8afb      	ldrh	r3, [r7, #22]
 80017f4:	e023      	b.n	800183e <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	613a      	str	r2, [r7, #16]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	8889      	ldrh	r1, [r1, #4]
 8001804:	440a      	add	r2, r1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	7013      	strb	r3, [r2, #0]
        f->head++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	889b      	ldrh	r3, [r3, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	889a      	ldrh	r2, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	891b      	ldrh	r3, [r3, #8]
 800181e:	429a      	cmp	r2, r3
 8001820:	d102      	bne.n	8001828 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8001828:	8afb      	ldrh	r3, [r7, #22]
 800182a:	3301      	adds	r3, #1
 800182c:	82fb      	strh	r3, [r7, #22]
 800182e:	8afa      	ldrh	r2, [r7, #22]
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	429a      	cmp	r2, r3
 8001834:	d3c8      	bcc.n	80017c8 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800183c:	88fb      	ldrh	r3, [r7, #6]
}
 800183e:	4618      	mov	r0, r3
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <USBH_HID_GenericRegisterDriver>:
 *         It is added to an array of drivers available.
 * @param  driver: driver to be loaded
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GenericRegisterDriver(USBH_HID_DriverTypeDef driver)
{
 800184c:	b084      	sub	sp, #16
 800184e:	b4b0      	push	{r4, r5, r7}
 8001850:	af00      	add	r7, sp, #0
 8001852:	f107 040c 	add.w	r4, r7, #12
 8001856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (n_drivers == (MAX_DRIVERS-1))
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <USBH_HID_GenericRegisterDriver+0x5c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b03      	cmp	r3, #3
 8001860:	d101      	bne.n	8001866 <USBH_HID_GenericRegisterDriver+0x1a>
	{
		return USBH_FAIL;
 8001862:	2302      	movs	r3, #2
 8001864:	e01a      	b.n	800189c <USBH_HID_GenericRegisterDriver+0x50>
	}

	drivers[n_drivers] = driver;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <USBH_HID_GenericRegisterDriver+0x5c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <USBH_HID_GenericRegisterDriver+0x60>)
 800186e:	460b      	mov	r3, r1
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	461c      	mov	r4, r3
 800187a:	f107 050c 	add.w	r5, r7, #12
 800187e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001886:	e895 0003 	ldmia.w	r5, {r0, r1}
 800188a:	e884 0003 	stmia.w	r4, {r0, r1}
	n_drivers += 1;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <USBH_HID_GenericRegisterDriver+0x5c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <USBH_HID_GenericRegisterDriver+0x5c>)
 8001898:	701a      	strb	r2, [r3, #0]
	return USBH_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bcb0      	pop	{r4, r5, r7}
 80018a2:	b004      	add	sp, #16
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000b70 	.word	0x20000b70
 80018ac:	20005608 	.word	0x20005608

080018b0 <USBH_HID_GenericInit>:
 *         The function init the HID generic device.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GenericInit(USBH_HandleTypeDef *phost)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	60fb      	str	r3, [r7, #12]

	for (i = 0U; i < (sizeof(rx_report_buf) / sizeof(uint8_t)); i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e007      	b.n	80018d8 <USBH_HID_GenericInit+0x28>
	{
		rx_report_buf[i] = 0U;
 80018c8:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <USBH_HID_GenericInit+0x104>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4413      	add	r3, r2
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	for (i = 0U; i < (sizeof(rx_report_buf) / sizeof(uint8_t)); i++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b7f      	cmp	r3, #127	; 0x7f
 80018dc:	d9f4      	bls.n	80018c8 <USBH_HID_GenericInit+0x18>
	}

	if (HID_Handle->length > sizeof(rx_report_buf))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8b1b      	ldrh	r3, [r3, #24]
 80018e2:	2b80      	cmp	r3, #128	; 0x80
 80018e4:	d902      	bls.n	80018ec <USBH_HID_GenericInit+0x3c>
	{
		HID_Handle->length = sizeof(rx_report_buf);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	831a      	strh	r2, [r3, #24]
	}

	HID_Handle->pData = (uint8_t *)(void *)rx_report_buf;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <USBH_HID_GenericInit+0x104>)
 80018f0:	615a      	str	r2, [r3, #20]

	USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, 2 * sizeof(rx_report_buf));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f103 0008 	add.w	r0, r3, #8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80018fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001902:	4619      	mov	r1, r3
 8001904:	f7ff fee8 	bl	80016d8 <USBH_HID_FifoInit>

	USBH_StatusTypeDef status = USBH_NOT_SUPPORTED;
 8001908:	2303      	movs	r3, #3
 800190a:	74fb      	strb	r3, [r7, #19]
	// loads the null driver
	current_driver = null_Driver;
 800190c:	4a2a      	ldr	r2, [pc, #168]	; (80019b8 <USBH_HID_GenericInit+0x108>)
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <USBH_HID_GenericInit+0x10c>)
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001920:	e884 0003 	stmia.w	r4, {r0, r1}
	// looks for a compatible driver amongst the registered drivers
	for(uint8_t i = 0; i < n_drivers; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	74bb      	strb	r3, [r7, #18]
 8001928:	e039      	b.n	800199e <USBH_HID_GenericInit+0xee>
	{
		if((phost->device.DevDesc.idVendor == drivers[i].vid) && (phost->device.DevDesc.idProduct == drivers[i].pid))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f8b3 132e 	ldrh.w	r1, [r3, #814]	; 0x32e
 8001930:	7cba      	ldrb	r2, [r7, #18]
 8001932:	4823      	ldr	r0, [pc, #140]	; (80019c0 <USBH_HID_GenericInit+0x110>)
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4403      	add	r3, r0
 800193e:	3320      	adds	r3, #32
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	4299      	cmp	r1, r3
 8001944:	d126      	bne.n	8001994 <USBH_HID_GenericInit+0xe4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8b3 1330 	ldrh.w	r1, [r3, #816]	; 0x330
 800194c:	7cba      	ldrb	r2, [r7, #18]
 800194e:	481c      	ldr	r0, [pc, #112]	; (80019c0 <USBH_HID_GenericInit+0x110>)
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4403      	add	r3, r0
 800195a:	3322      	adds	r3, #34	; 0x22
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	4299      	cmp	r1, r3
 8001960:	d118      	bne.n	8001994 <USBH_HID_GenericInit+0xe4>
		{
			current_driver = drivers[i];
 8001962:	7cba      	ldrb	r2, [r7, #18]
 8001964:	4814      	ldr	r0, [pc, #80]	; (80019b8 <USBH_HID_GenericInit+0x108>)
 8001966:	4916      	ldr	r1, [pc, #88]	; (80019c0 <USBH_HID_GenericInit+0x110>)
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	4604      	mov	r4, r0
 8001974:	461d      	mov	r5, r3
 8001976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001982:	e884 0003 	stmia.w	r4, {r0, r1}
			status = current_driver.DeviceSpecificInit(phost);
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <USBH_HID_GenericInit+0x108>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
 800198e:	4603      	mov	r3, r0
 8001990:	74fb      	strb	r3, [r7, #19]
 8001992:	e001      	b.n	8001998 <USBH_HID_GenericInit+0xe8>
		}
		else
		{
			status = USBH_NOT_SUPPORTED;
 8001994:	2303      	movs	r3, #3
 8001996:	74fb      	strb	r3, [r7, #19]
	for(uint8_t i = 0; i < n_drivers; i++)
 8001998:	7cbb      	ldrb	r3, [r7, #18]
 800199a:	3301      	adds	r3, #1
 800199c:	74bb      	strb	r3, [r7, #18]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <USBH_HID_GenericInit+0x114>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	7cba      	ldrb	r2, [r7, #18]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3c0      	bcc.n	800192a <USBH_HID_GenericInit+0x7a>
		}
	}

	return status;
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
	//return USBH_HID_DeviceSpecificInit(phost);
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bdb0      	pop	{r4, r5, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20005560 	.word	0x20005560
 80019b8:	200055e0 	.word	0x200055e0
 80019bc:	0800c734 	.word	0x0800c734
 80019c0:	20005608 	.word	0x20005608
 80019c4:	20000b70 	.word	0x20000b70

080019c8 <USBH_HID_GetRawReport>:
 * @param  report: pointer to the raw report
 *
 * @retval USBH status
 */
USBH_StatusTypeDef USBH_HID_GetRawReport(USBH_HandleTypeDef *phost, uint8_t* report)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->length == 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8b1b      	ldrh	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <USBH_HID_GetRawReport+0x20>
	{
		return USBH_FAIL;
 80019e4:	2302      	movs	r3, #2
 80019e6:	e011      	b.n	8001a0c <USBH_HID_GetRawReport+0x44>
	}
	/*Fill report */
	if(USBH_HID_FifoRead(&HID_Handle->fifo, report, HID_Handle->length) !=  HID_Handle->length)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f103 0008 	add.w	r0, r3, #8
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8b1b      	ldrh	r3, [r3, #24]
 80019f2:	461a      	mov	r2, r3
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	f7ff fe8b 	bl	8001710 <USBH_HID_FifoRead>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8b1b      	ldrh	r3, [r3, #24]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d001      	beq.n	8001a0a <USBH_HID_GetRawReport+0x42>
	{
		return USBH_FAIL;
 8001a06:	2302      	movs	r3, #2
 8001a08:	e000      	b.n	8001a0c <USBH_HID_GetRawReport+0x44>
	}
	return USBH_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	709a      	strb	r2, [r3, #2]
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a2e:	789a      	ldrb	r2, [r3, #2]
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a32:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	711a      	strb	r2, [r3, #4]
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a3c:	791a      	ldrb	r2, [r3, #4]
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a40:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	719a      	strb	r2, [r3, #6]
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a4a:	799a      	ldrb	r2, [r3, #6]
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a4e:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	721a      	strb	r2, [r3, #8]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a58:	7a1a      	ldrb	r2, [r3, #8]
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <USBH_HID_KeybdInit+0xa4>)
 8001a5c:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e00c      	b.n	8001a7e <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <USBH_HID_KeybdInit+0xa8>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <USBH_HID_KeybdInit+0xac>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2100      	movs	r1, #0
 8001a74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d9ef      	bls.n	8001a64 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	8b1b      	ldrh	r3, [r3, #24]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d902      	bls.n	8001a92 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <USBH_HID_KeybdInit+0xac>)
 8001a96:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f103 0008 	add.w	r0, r3, #8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001aa4:	2250      	movs	r2, #80	; 0x50
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff fe16 	bl	80016d8 <USBH_HID_FifoInit>

  return USBH_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200056b8 	.word	0x200056b8
 8001abc:	200056a8 	.word	0x200056a8
 8001ac0:	200056b0 	.word	0x200056b0

08001ac4 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <USBH_HID_MouseInit+0x88>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <USBH_HID_MouseInit+0x88>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <USBH_HID_MouseInit+0x88>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <USBH_HID_MouseInit+0x88>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <USBH_HID_MouseInit+0x88>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e00c      	b.n	8001b14 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <USBH_HID_MouseInit+0x8c>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2100      	movs	r1, #0
 8001b00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rx_report_buf[i] = 0U;
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <USBH_HID_MouseInit+0x90>)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2100      	movs	r1, #0
 8001b0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d9ef      	bls.n	8001afa <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	8b1b      	ldrh	r3, [r3, #24]
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d902      	bls.n	8001b28 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2208      	movs	r2, #8
 8001b26:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)rx_report_buf;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <USBH_HID_MouseInit+0x90>)
 8001b2c:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f103 0008 	add.w	r0, r3, #8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001b3a:	2250      	movs	r2, #80	; 0x50
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff fdcb 	bl	80016d8 <USBH_HID_FifoInit>

  return USBH_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200056c8 	.word	0x200056c8
 8001b50:	200056d0 	.word	0x200056d0
 8001b54:	20005560 	.word	0x20005560

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b5e:	e003      	b.n	8001b68 <LoopCopyDataInit>

08001b60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b66:	3104      	adds	r1, #4

08001b68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b68:	480b      	ldr	r0, [pc, #44]	; (8001b98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b70:	d3f6      	bcc.n	8001b60 <CopyDataInit>
  ldr  r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b74:	e002      	b.n	8001b7c <LoopFillZerobss>

08001b76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b78:	f842 3b04 	str.w	r3, [r2], #4

08001b7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b80:	d3f9      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b82:	f7ff f993 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f00a f8b9 	bl	800bcfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7fe fe47 	bl	800081c <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b94:	0800c7a0 	.word	0x0800c7a0
  ldr  r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b9c:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8001ba0:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8001ba4:	20005dec 	.word	0x20005dec

08001ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f8fa 	bl	8001dce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff f8ac 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff f836 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000050 	.word	0x20000050
 8001c14:	200056d8 	.word	0x200056d8

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200056d8 	.word	0x200056d8

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_Delay+0x40>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c56:	bf00      	nop
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000050 	.word	0x20000050

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ff4c 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df6:	f7ff ff61 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001dfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	6978      	ldr	r0, [r7, #20]
 8001e02:	f7ff ffb1 	bl	8001d68 <NVIC_EncodePriority>
 8001e06:	4602      	mov	r2, r0
 8001e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff80 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e14:	bf00      	nop
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff54 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e165      	b.n	8002120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8154 	bne.w	800211a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d00b      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e86:	2b11      	cmp	r3, #17
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0xfc>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b12      	cmp	r3, #18
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80ae 	beq.w	800211a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HAL_GPIO_Init+0x2fc>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a5b      	ldr	r2, [pc, #364]	; (8002134 <HAL_GPIO_Init+0x2fc>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_GPIO_Init+0x2fc>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_GPIO_Init+0x300>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4e      	ldr	r2, [pc, #312]	; (800213c <HAL_GPIO_Init+0x304>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d025      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4d      	ldr	r2, [pc, #308]	; (8002140 <HAL_GPIO_Init+0x308>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01f      	beq.n	800204e <HAL_GPIO_Init+0x216>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4c      	ldr	r2, [pc, #304]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x212>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4b      	ldr	r2, [pc, #300]	; (8002148 <HAL_GPIO_Init+0x310>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4a      	ldr	r2, [pc, #296]	; (800214c <HAL_GPIO_Init+0x314>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x20a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a49      	ldr	r2, [pc, #292]	; (8002150 <HAL_GPIO_Init+0x318>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x206>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_GPIO_Init+0x31c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x202>
 8002036:	2306      	movs	r3, #6
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800203a:	2307      	movs	r3, #7
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002052:	2300      	movs	r3, #0
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002064:	4934      	ldr	r1, [pc, #208]	; (8002138 <HAL_GPIO_Init+0x300>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_GPIO_Init+0x320>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002096:	4a30      	ldr	r2, [pc, #192]	; (8002158 <HAL_GPIO_Init+0x320>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_GPIO_Init+0x320>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <HAL_GPIO_Init+0x320>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_GPIO_Init+0x320>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_GPIO_Init+0x320>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x320>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_GPIO_Init+0x320>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	f67f ae96 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3724      	adds	r7, #36	; 0x24
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800218e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002190:	b08f      	sub	sp, #60	; 0x3c
 8002192:	af0a      	add	r7, sp, #40	; 0x28
 8002194:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e054      	b.n	800224a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f009 faf8 	bl	800b7b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2203      	movs	r2, #3
 80021c4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 f968 	bl	80054b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	687e      	ldr	r6, [r7, #4]
 80021ec:	466d      	mov	r5, sp
 80021ee:	f106 0410 	add.w	r4, r6, #16
 80021f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002202:	1d33      	adds	r3, r6, #4
 8002204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002206:	6838      	ldr	r0, [r7, #0]
 8002208:	f003 f8e2 	bl	80053d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f95f 	bl	80054d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	687e      	ldr	r6, [r7, #4]
 8002220:	466d      	mov	r5, sp
 8002222:	f106 0410 	add.w	r4, r6, #16
 8002226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002232:	e885 0003 	stmia.w	r5, {r0, r1}
 8002236:	1d33      	adds	r3, r6, #4
 8002238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223a:	6838      	ldr	r0, [r7, #0]
 800223c:	f003 fa72 	bl	8005724 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002252 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002252:	b590      	push	{r4, r7, lr}
 8002254:	b089      	sub	sp, #36	; 0x24
 8002256:	af04      	add	r7, sp, #16
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	4608      	mov	r0, r1
 800225c:	4611      	mov	r1, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4603      	mov	r3, r0
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	460b      	mov	r3, r1
 8002266:	70bb      	strb	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_HCD_HC_Init+0x28>
 8002276:	2302      	movs	r3, #2
 8002278:	e07f      	b.n	800237a <HAL_HCD_HC_Init+0x128>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	333d      	adds	r3, #61	; 0x3d
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3338      	adds	r3, #56	; 0x38
 80022a6:	787a      	ldrb	r2, [r7, #1]
 80022a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	3340      	adds	r3, #64	; 0x40
 80022ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022bc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	3339      	adds	r3, #57	; 0x39
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	333f      	adds	r3, #63	; 0x3f
 80022e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	78bb      	ldrb	r3, [r7, #2]
 80022ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f0:	b2d8      	uxtb	r0, r3
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	333a      	adds	r3, #58	; 0x3a
 8002300:	4602      	mov	r2, r0
 8002302:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002304:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002308:	2b00      	cmp	r3, #0
 800230a:	da0a      	bge.n	8002322 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	333b      	adds	r3, #59	; 0x3b
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	e009      	b.n	8002336 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	333b      	adds	r3, #59	; 0x3b
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	333c      	adds	r3, #60	; 0x3c
 8002346:	f897 2020 	ldrb.w	r2, [r7, #32]
 800234a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	787c      	ldrb	r4, [r7, #1]
 8002352:	78ba      	ldrb	r2, [r7, #2]
 8002354:	78f9      	ldrb	r1, [r7, #3]
 8002356:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4623      	mov	r3, r4
 8002368:	f003 fb52 	bl	8005a10 <USB_HC_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_HCD_HC_Halt+0x1e>
 800239c:	2302      	movs	r3, #2
 800239e:	e00f      	b.n	80023c0 <HAL_HCD_HC_Halt+0x3e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fd8e 	bl	8005ed2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	4608      	mov	r0, r1
 80023d2:	4611      	mov	r1, r2
 80023d4:	461a      	mov	r2, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	70fb      	strb	r3, [r7, #3]
 80023da:	460b      	mov	r3, r1
 80023dc:	70bb      	strb	r3, [r7, #2]
 80023de:	4613      	mov	r3, r2
 80023e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	333b      	adds	r3, #59	; 0x3b
 80023f2:	78ba      	ldrb	r2, [r7, #2]
 80023f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	333f      	adds	r3, #63	; 0x3f
 8002406:	787a      	ldrb	r2, [r7, #1]
 8002408:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800240a:	7c3b      	ldrb	r3, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d114      	bne.n	800243a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3342      	adds	r3, #66	; 0x42
 8002420:	2203      	movs	r2, #3
 8002422:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	333d      	adds	r3, #61	; 0x3d
 8002434:	7f3a      	ldrb	r2, [r7, #28]
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e009      	b.n	800244e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	3342      	adds	r3, #66	; 0x42
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800244e:	787b      	ldrb	r3, [r7, #1]
 8002450:	2b03      	cmp	r3, #3
 8002452:	f200 80d6 	bhi.w	8002602 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800246d 	.word	0x0800246d
 8002460:	080025ed 	.word	0x080025ed
 8002464:	080024d9 	.word	0x080024d9
 8002468:	08002563 	.word	0x08002563
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800246c:	7c3b      	ldrb	r3, [r7, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	f040 80c9 	bne.w	8002606 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002474:	78bb      	ldrb	r3, [r7, #2]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80c5 	bne.w	8002606 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800247c:	8b3b      	ldrh	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	3351      	adds	r3, #81	; 0x51
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	3351      	adds	r3, #81	; 0x51
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	3342      	adds	r3, #66	; 0x42
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024c0:	e0a1      	b.n	8002606 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	3342      	adds	r3, #66	; 0x42
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]
      break;
 80024d6:	e096      	b.n	8002606 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024d8:	78bb      	ldrb	r3, [r7, #2]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d120      	bne.n	8002520 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	440b      	add	r3, r1
 80024ec:	3351      	adds	r3, #81	; 0x51
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	3342      	adds	r3, #66	; 0x42
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002508:	e07e      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	3342      	adds	r3, #66	; 0x42
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]
      break;
 800251e:	e073      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3350      	adds	r3, #80	; 0x50
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	3342      	adds	r3, #66	; 0x42
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
      break;
 800254a:	e05d      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	3342      	adds	r3, #66	; 0x42
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
      break;
 8002560:	e052      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002562:	78bb      	ldrb	r3, [r7, #2]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d120      	bne.n	80025aa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	3351      	adds	r3, #81	; 0x51
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	3342      	adds	r3, #66	; 0x42
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002592:	e039      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	3342      	adds	r3, #66	; 0x42
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
      break;
 80025a8:	e02e      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	3350      	adds	r3, #80	; 0x50
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	3342      	adds	r3, #66	; 0x42
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
      break;
 80025d4:	e018      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	3342      	adds	r3, #66	; 0x42
 80025e6:	2202      	movs	r2, #2
 80025e8:	701a      	strb	r2, [r3, #0]
      break;
 80025ea:	e00d      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	3342      	adds	r3, #66	; 0x42
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
      break;
 8002600:	e002      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002606:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	3344      	adds	r3, #68	; 0x44
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	8b39      	ldrh	r1, [r7, #24]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4403      	add	r3, r0
 800262c:	3348      	adds	r3, #72	; 0x48
 800262e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	334c      	adds	r3, #76	; 0x4c
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	3339      	adds	r3, #57	; 0x39
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	335d      	adds	r3, #93	; 0x5d
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	18d1      	adds	r1, r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	f003 fac2 	bl	8005c24 <USB_HC_StartXfer>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop

080026ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 ffeb 	bl	800569e <USB_GetMode>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	f040 80ef 	bne.w	80028ae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 ffcf 	bl	8005678 <USB_ReadInterrupts>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80e5 	beq.w	80028ac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f002 ffc6 	bl	8005678 <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026f6:	d104      	bne.n	8002702 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002700:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 ffb6 	bl	8005678 <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002716:	d104      	bne.n	8002722 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002720:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f002 ffa6 	bl	8005678 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002736:	d104      	bne.n	8002742 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002740:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f002 ff96 	bl	8005678 <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b02      	cmp	r3, #2
 8002754:	d103      	bne.n	800275e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f002 ff88 	bl	8005678 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800276e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002772:	d115      	bne.n	80027a0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800277c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d108      	bne.n	80027a0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f009 f87e 	bl	800b890 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f003 f872 	bl	8005884 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f002 ff67 	bl	8005678 <USB_ReadInterrupts>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d102      	bne.n	80027bc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f001 f966 	bl	8003a88 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 ff59 	bl	8005678 <USB_ReadInterrupts>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d106      	bne.n	80027de <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f009 f841 	bl	800b858 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2208      	movs	r2, #8
 80027dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 ff48 	bl	8005678 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f2:	d138      	bne.n	8002866 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 fb59 	bl	8005eb0 <USB_HC_ReadInterrupt>
 80027fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e025      	b.n	8002852 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d018      	beq.n	800284c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002830:	d106      	bne.n	8002840 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8cf 	bl	80029dc <HCD_HC_IN_IRQHandler>
 800283e:	e005      	b.n	800284c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fcfd 	bl	8003246 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d3d4      	bcc.n	8002806 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f002 ff04 	bl	8005678 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b10      	cmp	r3, #16
 8002878:	d101      	bne.n	800287e <HAL_HCD_IRQHandler+0x1d2>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_HCD_IRQHandler+0x1d4>
 800287e:	2300      	movs	r3, #0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d014      	beq.n	80028ae <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0210 	bic.w	r2, r2, #16
 8002892:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f001 f84b 	bl	8003930 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0210 	orr.w	r2, r2, #16
 80028a8:	619a      	str	r2, [r3, #24]
 80028aa:	e000      	b.n	80028ae <HAL_HCD_IRQHandler+0x202>
      return;
 80028ac:	bf00      	nop
    }
  }
}
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_HCD_Start+0x16>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e013      	b.n	80028f2 <HAL_HCD_Start+0x3e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fddb 	bl	8005492 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 f832 	bl	800594c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_HCD_Stop+0x16>
 800290c:	2302      	movs	r3, #2
 800290e:	e00d      	b.n	800292c <HAL_HCD_Stop+0x32>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f003 fc13 	bl	8006148 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 ffd9 	bl	80058f8 <USB_ResetPort>
 8002946:	4603      	mov	r3, r0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	335c      	adds	r3, #92	; 0x5c
 800296c:	781b      	ldrb	r3, [r3, #0]
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	440b      	add	r3, r1
 8002994:	334c      	adds	r3, #76	; 0x4c
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 f81b 	bl	80059ec <USB_GetCurrentFrame>
 80029b6:	4603      	mov	r3, r0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fff6 	bl	80059be <USB_GetHostSpeed>
 80029d2:	4603      	mov	r3, r0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d119      	bne.n	8002a40 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	0151      	lsls	r1, r2, #5
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	440a      	add	r2, r1
 8002a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	60d3      	str	r3, [r2, #12]
 8002a3e:	e0ce      	b.n	8002bde <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a56:	d12c      	bne.n	8002ab2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	335d      	adds	r3, #93	; 0x5d
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	0151      	lsls	r1, r2, #5
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	440a      	add	r2, r1
 8002a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fa11 	bl	8005ed2 <USB_HC_Halt>
 8002ab0:	e095      	b.n	8002bde <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d109      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	6093      	str	r3, [r2, #8]
 8002ada:	e080      	b.n	8002bde <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d134      	bne.n	8002b5c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	0151      	lsls	r1, r2, #5
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	440a      	add	r2, r1
 8002b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	335d      	adds	r3, #93	; 0x5d
 8002b22:	2205      	movs	r2, #5
 8002b24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	2310      	movs	r3, #16
 8002b36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	2308      	movs	r3, #8
 8002b48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 f9bc 	bl	8005ed2 <USB_HC_Halt>
 8002b5a:	e040      	b.n	8002bde <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b72:	d134      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	0151      	lsls	r1, r2, #5
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	440a      	add	r2, r1
 8002b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 f997 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2310      	movs	r3, #16
 8002bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	335d      	adds	r3, #93	; 0x5d
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bdc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf4:	d122      	bne.n	8002c3c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	0151      	lsls	r1, r2, #5
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 f956 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	461a      	mov	r2, r3
 8002c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c38:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c3a:	e300      	b.n	800323e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	f040 80fd 	bne.w	8002e4e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	3348      	adds	r3, #72	; 0x48
 8002c6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0159      	lsls	r1, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	440b      	add	r3, r1
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c80:	1ad1      	subs	r1, r2, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4403      	add	r3, r0
 8002c90:	334c      	adds	r3, #76	; 0x4c
 8002c92:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	335d      	adds	r3, #93	; 0x5d
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3358      	adds	r3, #88	; 0x58
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2301      	movs	r3, #1
 8002ccc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	333f      	adds	r3, #63	; 0x3f
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	333f      	adds	r3, #63	; 0x3f
 8002cf4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d121      	bne.n	8002d3e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	0151      	lsls	r1, r2, #5
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	440a      	add	r2, r1
 8002d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 f8d4 	bl	8005ed2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	461a      	mov	r2, r3
 8002d38:	2310      	movs	r3, #16
 8002d3a:	6093      	str	r3, [r2, #8]
 8002d3c:	e070      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	333f      	adds	r3, #63	; 0x3f
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d12a      	bne.n	8002daa <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	0151      	lsls	r1, r2, #5
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	440a      	add	r2, r1
 8002d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d72:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	335c      	adds	r3, #92	; 0x5c
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	b2d8      	uxtb	r0, r3
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4601      	mov	r1, r0
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f008 fd82 	bl	800b8ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002da8:	e03a      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	333f      	adds	r3, #63	; 0x3f
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d12f      	bne.n	8002e20 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3350      	adds	r3, #80	; 0x50
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	f083 0301 	eor.w	r3, r3, #1
 8002dea:	b2d8      	uxtb	r0, r3
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3350      	adds	r3, #80	; 0x50
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	b2d8      	uxtb	r0, r3
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	335c      	adds	r3, #92	; 0x5c
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	4601      	mov	r1, r0
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f008 fd46 	bl	800b8ac <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3350      	adds	r3, #80	; 0x50
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2d8      	uxtb	r0, r3
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	440b      	add	r3, r1
 8002e46:	3350      	adds	r3, #80	; 0x50
 8002e48:	4602      	mov	r2, r0
 8002e4a:	701a      	strb	r2, [r3, #0]
}
 8002e4c:	e1f7      	b.n	800323e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	f040 811a 	bne.w	800309a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	0151      	lsls	r1, r2, #5
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	440a      	add	r2, r1
 8002e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	335d      	adds	r3, #93	; 0x5d
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10a      	bne.n	8002eb2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	335c      	adds	r3, #92	; 0x5c
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e0d9      	b.n	8003066 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	335d      	adds	r3, #93	; 0x5d
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d10a      	bne.n	8002ede <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	335c      	adds	r3, #92	; 0x5c
 8002ed8:	2205      	movs	r2, #5
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e0c3      	b.n	8003066 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	335d      	adds	r3, #93	; 0x5d
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b06      	cmp	r3, #6
 8002ef2:	d00a      	beq.n	8002f0a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	335d      	adds	r3, #93	; 0x5d
 8002f04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d156      	bne.n	8002fb8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	440b      	add	r3, r1
 8002f18:	3358      	adds	r3, #88	; 0x58
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c59      	adds	r1, r3, #1
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4403      	add	r3, r0
 8002f2c:	3358      	adds	r3, #88	; 0x58
 8002f2e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3358      	adds	r3, #88	; 0x58
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d914      	bls.n	8002f70 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	3358      	adds	r3, #88	; 0x58
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	335c      	adds	r3, #92	; 0x5c
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e009      	b.n	8002f84 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	335c      	adds	r3, #92	; 0x5c
 8002f80:	2202      	movs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f9a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fa2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e056      	b.n	8003066 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	335d      	adds	r3, #93	; 0x5d
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d123      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	335c      	adds	r3, #92	; 0x5c
 8002fde:	2202      	movs	r2, #2
 8002fe0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ff8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003000:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e027      	b.n	8003066 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	440b      	add	r3, r1
 8003024:	335d      	adds	r3, #93	; 0x5d
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b07      	cmp	r3, #7
 800302a:	d11c      	bne.n	8003066 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3358      	adds	r3, #88	; 0x58
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	1c59      	adds	r1, r3, #1
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4403      	add	r3, r0
 800304e:	3358      	adds	r3, #88	; 0x58
 8003050:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	440b      	add	r3, r1
 8003060:	335c      	adds	r3, #92	; 0x5c
 8003062:	2204      	movs	r2, #4
 8003064:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	2302      	movs	r3, #2
 8003076:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	b2d8      	uxtb	r0, r3
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	335c      	adds	r3, #92	; 0x5c
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4601      	mov	r1, r0
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f008 fc0a 	bl	800b8ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003098:	e0d1      	b.n	800323e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d13e      	bne.n	800312e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	0151      	lsls	r1, r2, #5
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	440a      	add	r2, r1
 80030c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	3358      	adds	r3, #88	; 0x58
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1c59      	adds	r1, r3, #1
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4403      	add	r3, r0
 80030f2:	3358      	adds	r3, #88	; 0x58
 80030f4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	335d      	adds	r3, #93	; 0x5d
 8003106:	2206      	movs	r2, #6
 8003108:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f002 fedc 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	461a      	mov	r2, r3
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	6093      	str	r3, [r2, #8]
}
 800312c:	e087      	b.n	800323e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b10      	cmp	r3, #16
 8003142:	d17c      	bne.n	800323e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	333f      	adds	r3, #63	; 0x3f
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d122      	bne.n	80031a0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	3358      	adds	r3, #88	; 0x58
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	0151      	lsls	r1, r2, #5
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	440a      	add	r2, r1
 8003184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f002 fe9a 	bl	8005ed2 <USB_HC_Halt>
 800319e:	e045      	b.n	800322c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	333f      	adds	r3, #63	; 0x3f
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	333f      	adds	r3, #63	; 0x3f
 80031c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d12f      	bne.n	800322c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	3358      	adds	r3, #88	; 0x58
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d121      	bne.n	800322c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	335d      	adds	r3, #93	; 0x5d
 80031f8:	2203      	movs	r2, #3
 80031fa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	0151      	lsls	r1, r2, #5
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	440a      	add	r2, r1
 8003212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003216:	f043 0302 	orr.w	r3, r3, #2
 800321a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f002 fe53 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	461a      	mov	r2, r3
 800323a:	2310      	movs	r3, #16
 800323c:	6093      	str	r3, [r2, #8]
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d119      	bne.n	80032aa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	461a      	mov	r2, r3
 8003284:	2304      	movs	r3, #4
 8003286:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	0151      	lsls	r1, r2, #5
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	440a      	add	r2, r1
 800329e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80032a8:	e33e      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d141      	bne.n	8003344 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032cc:	461a      	mov	r2, r3
 80032ce:	2320      	movs	r3, #32
 80032d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	333d      	adds	r3, #61	; 0x3d
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	f040 831f 	bne.w	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	333d      	adds	r3, #61	; 0x3d
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	335c      	adds	r3, #92	; 0x5c
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	0151      	lsls	r1, r2, #5
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	440a      	add	r2, r1
 8003328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f002 fdc8 	bl	8005ed2 <USB_HC_Halt>
}
 8003342:	e2f1      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d13f      	bne.n	80033da <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	335d      	adds	r3, #93	; 0x5d
 800336a:	2204      	movs	r2, #4
 800336c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	333d      	adds	r3, #61	; 0x3d
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	440b      	add	r3, r1
 8003390:	3358      	adds	r3, #88	; 0x58
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	0151      	lsls	r1, r2, #5
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	440a      	add	r2, r1
 80033ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 fd86 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	461a      	mov	r2, r3
 80033d4:	2340      	movs	r3, #64	; 0x40
 80033d6:	6093      	str	r3, [r2, #8]
}
 80033d8:	e2a6      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f0:	d122      	bne.n	8003438 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	0151      	lsls	r1, r2, #5
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	440a      	add	r2, r1
 8003408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f002 fd58 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003434:	6093      	str	r3, [r2, #8]
}
 8003436:	e277      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d135      	bne.n	80034ba <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	3358      	adds	r3, #88	; 0x58
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	440a      	add	r2, r1
 8003478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f002 fd20 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	2301      	movs	r3, #1
 80034a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	335d      	adds	r3, #93	; 0x5d
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
}
 80034b8:	e236      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d12b      	bne.n	8003528 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2308      	movs	r3, #8
 80034e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	0151      	lsls	r1, r2, #5
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	440a      	add	r2, r1
 80034f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f002 fce0 	bl	8005ed2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	335d      	adds	r3, #93	; 0x5d
 8003522:	2205      	movs	r2, #5
 8003524:	701a      	strb	r2, [r3, #0]
}
 8003526:	e1ff      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b10      	cmp	r3, #16
 800353c:	d155      	bne.n	80035ea <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	440b      	add	r3, r1
 800354c:	3358      	adds	r3, #88	; 0x58
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	335d      	adds	r3, #93	; 0x5d
 8003562:	2203      	movs	r2, #3
 8003564:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	440b      	add	r3, r1
 8003574:	333d      	adds	r3, #61	; 0x3d
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d114      	bne.n	80035a6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	440b      	add	r3, r1
 800358a:	333c      	adds	r3, #60	; 0x3c
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	333d      	adds	r3, #61	; 0x3d
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	0151      	lsls	r1, r2, #5
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	440a      	add	r2, r1
 80035bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 fc7e 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	2310      	movs	r3, #16
 80035e6:	6093      	str	r3, [r2, #8]
}
 80035e8:	e19e      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d12b      	bne.n	8003658 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	440a      	add	r2, r1
 8003616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f002 fc51 	bl	8005ed2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	335d      	adds	r3, #93	; 0x5d
 8003640:	2206      	movs	r2, #6
 8003642:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003650:	461a      	mov	r2, r3
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	6093      	str	r3, [r2, #8]
}
 8003656:	e167      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366e:	d135      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	0151      	lsls	r1, r2, #5
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	440a      	add	r2, r1
 8003686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f002 fc19 	bl	8005ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ac:	461a      	mov	r2, r3
 80036ae:	2310      	movs	r3, #16
 80036b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036be:	461a      	mov	r2, r3
 80036c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	335d      	adds	r3, #93	; 0x5d
 80036d6:	2208      	movs	r2, #8
 80036d8:	701a      	strb	r2, [r3, #0]
}
 80036da:	e125      	b.n	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	f040 811a 	bne.w	8003928 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	0151      	lsls	r1, r2, #5
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	440a      	add	r2, r1
 800370a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800370e:	f023 0302 	bic.w	r3, r3, #2
 8003712:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	335d      	adds	r3, #93	; 0x5d
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d137      	bne.n	800379a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	335c      	adds	r3, #92	; 0x5c
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	333f      	adds	r3, #63	; 0x3f
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d00b      	beq.n	800376c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	333f      	adds	r3, #63	; 0x3f
 8003764:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003766:	2b03      	cmp	r3, #3
 8003768:	f040 80c5 	bne.w	80038f6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	3351      	adds	r3, #81	; 0x51
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	f083 0301 	eor.w	r3, r3, #1
 8003782:	b2d8      	uxtb	r0, r3
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	3351      	adds	r3, #81	; 0x51
 8003794:	4602      	mov	r2, r0
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e0ad      	b.n	80038f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	335d      	adds	r3, #93	; 0x5d
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d10a      	bne.n	80037c6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	440b      	add	r3, r1
 80037be:	335c      	adds	r3, #92	; 0x5c
 80037c0:	2202      	movs	r2, #2
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e097      	b.n	80038f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	440b      	add	r3, r1
 80037d4:	335d      	adds	r3, #93	; 0x5d
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d10a      	bne.n	80037f2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	440b      	add	r3, r1
 80037ea:	335c      	adds	r3, #92	; 0x5c
 80037ec:	2202      	movs	r2, #2
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e081      	b.n	80038f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	440b      	add	r3, r1
 8003800:	335d      	adds	r3, #93	; 0x5d
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b05      	cmp	r3, #5
 8003806:	d10a      	bne.n	800381e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	440b      	add	r3, r1
 8003816:	335c      	adds	r3, #92	; 0x5c
 8003818:	2205      	movs	r2, #5
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e06b      	b.n	80038f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	440b      	add	r3, r1
 800382c:	335d      	adds	r3, #93	; 0x5d
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b06      	cmp	r3, #6
 8003832:	d00a      	beq.n	800384a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	440b      	add	r3, r1
 8003842:	335d      	adds	r3, #93	; 0x5d
 8003844:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003846:	2b08      	cmp	r3, #8
 8003848:	d155      	bne.n	80038f6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	440b      	add	r3, r1
 8003858:	3358      	adds	r3, #88	; 0x58
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	1c59      	adds	r1, r3, #1
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4403      	add	r3, r0
 800386c:	3358      	adds	r3, #88	; 0x58
 800386e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	440b      	add	r3, r1
 800387e:	3358      	adds	r3, #88	; 0x58
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d914      	bls.n	80038b0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	3358      	adds	r3, #88	; 0x58
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	335c      	adds	r3, #92	; 0x5c
 80038aa:	2204      	movs	r2, #4
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e009      	b.n	80038c4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	440b      	add	r3, r1
 80038be:	335c      	adds	r3, #92	; 0x5c
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f0:	461a      	mov	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	461a      	mov	r2, r3
 8003904:	2302      	movs	r3, #2
 8003906:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	b2d8      	uxtb	r0, r3
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	335c      	adds	r3, #92	; 0x5c
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	4601      	mov	r1, r0
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f007 ffc2 	bl	800b8ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003928:	bf00      	nop
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	0c5b      	lsrs	r3, r3, #17
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003964:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d003      	beq.n	8003974 <HCD_RXQLVL_IRQHandler+0x44>
 800396c:	2b05      	cmp	r3, #5
 800396e:	f000 8082 	beq.w	8003a76 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003972:	e083      	b.n	8003a7c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d07f      	beq.n	8003a7a <HCD_RXQLVL_IRQHandler+0x14a>
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3344      	adds	r3, #68	; 0x44
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d074      	beq.n	8003a7a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	440b      	add	r3, r1
 80039a2:	3344      	adds	r3, #68	; 0x44
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	b292      	uxth	r2, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	f001 fe3b 	bl	8005626 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	440b      	add	r3, r1
 80039be:	3344      	adds	r3, #68	; 0x44
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	18d1      	adds	r1, r2, r3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4403      	add	r3, r0
 80039d4:	3344      	adds	r3, #68	; 0x44
 80039d6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	334c      	adds	r3, #76	; 0x4c
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	18d1      	adds	r1, r2, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4403      	add	r3, r0
 80039fc:	334c      	adds	r3, #76	; 0x4c
 80039fe:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HCD_RXQLVL_IRQHandler+0x154>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d031      	beq.n	8003a7a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a2c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a34:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	3350      	adds	r3, #80	; 0x50
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	f083 0301 	eor.w	r3, r3, #1
 8003a5e:	b2d8      	uxtb	r0, r3
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3350      	adds	r3, #80	; 0x50
 8003a70:	4602      	mov	r2, r0
 8003a72:	701a      	strb	r2, [r3, #0]
      break;
 8003a74:	e001      	b.n	8003a7a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003a7a:	bf00      	nop
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3728      	adds	r7, #40	; 0x28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	1ff80000 	.word	0x1ff80000

08003a88 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ab4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d10b      	bne.n	8003ad8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d102      	bne.n	8003ad0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f007 fed2 	bl	800b874 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d132      	bne.n	8003b48 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f043 0308 	orr.w	r3, r3, #8
 8003ae8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d126      	bne.n	8003b42 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d113      	bne.n	8003b24 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b06:	d106      	bne.n	8003b16 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 feb8 	bl	8005884 <USB_InitFSLSPClkSel>
 8003b14:	e011      	b.n	8003b3a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 feb1 	bl	8005884 <USB_InitFSLSPClkSel>
 8003b22:	e00a      	b.n	8003b3a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d106      	bne.n	8003b3a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b32:	461a      	mov	r2, r3
 8003b34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b38:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f007 fec8 	bl	800b8d0 <HAL_HCD_PortEnabled_Callback>
 8003b40:	e002      	b.n	8003b48 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f007 fed2 	bl	800b8ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d103      	bne.n	8003b5a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b60:	461a      	mov	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6013      	str	r3, [r2, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0cc      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d90c      	bls.n	8003bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b65      	ldr	r3, [pc, #404]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0b8      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc4:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a52      	ldr	r2, [pc, #328]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be8:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	494d      	ldr	r1, [pc, #308]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d044      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d119      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e07f      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d003      	beq.n	8003c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06f      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e067      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 0203 	bic.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4934      	ldr	r1, [pc, #208]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c60:	f7fd ffda 	bl	8001c18 <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c68:	f7fd ffd6 	bl	8001c18 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e04f      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 020c 	and.w	r2, r3, #12
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1eb      	bne.n	8003c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d20c      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e032      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4916      	ldr	r1, [pc, #88]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	490e      	ldr	r1, [pc, #56]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cf6:	f000 f887 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x1c0>)
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
 8003d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd f80e 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023c00 	.word	0x40023c00
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	0800c71c 	.word	0x0800c71c
 8003d34:	20000028 	.word	0x20000028
 8003d38:	2000004c 	.word	0x2000004c

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000028 	.word	0x20000028

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5c:	4601      	mov	r1, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4a03      	ldr	r2, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	0800c72c 	.word	0x0800c72c

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d80:	f7ff ffdc 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d84:	4601      	mov	r1, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	0800c72c 	.word	0x0800c72c

08003da4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	220f      	movs	r2, #15
 8003db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCC_GetClockConfig+0x5c>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0203 	and.w	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_RCC_GetClockConfig+0x5c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	08db      	lsrs	r3, r3, #3
 8003dde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_RCC_GetClockConfig+0x60>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 020f 	and.w	r2, r3, #15
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40023c00 	.word	0x40023c00

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e22:	4bc6      	ldr	r3, [pc, #792]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	f200 817e 	bhi.w	800412c <HAL_RCC_GetSysClockFreq+0x324>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <HAL_RCC_GetSysClockFreq+0x30>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	0800412d 	.word	0x0800412d
 8003e40:	0800412d 	.word	0x0800412d
 8003e44:	0800412d 	.word	0x0800412d
 8003e48:	08003e73 	.word	0x08003e73
 8003e4c:	0800412d 	.word	0x0800412d
 8003e50:	0800412d 	.word	0x0800412d
 8003e54:	0800412d 	.word	0x0800412d
 8003e58:	08003e79 	.word	0x08003e79
 8003e5c:	0800412d 	.word	0x0800412d
 8003e60:	0800412d 	.word	0x0800412d
 8003e64:	0800412d 	.word	0x0800412d
 8003e68:	08003fd5 	.word	0x08003fd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4bb4      	ldr	r3, [pc, #720]	; (8004140 <HAL_RCC_GetSysClockFreq+0x338>)
 8003e6e:	613b      	str	r3, [r7, #16]
       break;
 8003e70:	e15f      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e72:	4bb4      	ldr	r3, [pc, #720]	; (8004144 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003e74:	613b      	str	r3, [r7, #16]
      break;
 8003e76:	e15c      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e78:	4bb0      	ldr	r3, [pc, #704]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e80:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e82:	4bae      	ldr	r3, [pc, #696]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d04a      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8e:	4bab      	ldr	r3, [pc, #684]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	ea03 0501 	and.w	r5, r3, r1
 8003ea4:	ea04 0602 	and.w	r6, r4, r2
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4632      	mov	r2, r6
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	f04f 0400 	mov.w	r4, #0
 8003eb4:	0154      	lsls	r4, r2, #5
 8003eb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003eba:	014b      	lsls	r3, r1, #5
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	1b49      	subs	r1, r1, r5
 8003ec2:	eb62 0206 	sbc.w	r2, r2, r6
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f04f 0400 	mov.w	r4, #0
 8003ece:	0194      	lsls	r4, r2, #6
 8003ed0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ed4:	018b      	lsls	r3, r1, #6
 8003ed6:	1a5b      	subs	r3, r3, r1
 8003ed8:	eb64 0402 	sbc.w	r4, r4, r2
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	00e2      	lsls	r2, r4, #3
 8003ee6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003eea:	00d9      	lsls	r1, r3, #3
 8003eec:	460b      	mov	r3, r1
 8003eee:	4614      	mov	r4, r2
 8003ef0:	195b      	adds	r3, r3, r5
 8003ef2:	eb44 0406 	adc.w	r4, r4, r6
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	0262      	lsls	r2, r4, #9
 8003f00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f04:	0259      	lsls	r1, r3, #9
 8003f06:	460b      	mov	r3, r1
 8003f08:	4614      	mov	r4, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f04f 0400 	mov.w	r4, #0
 8003f14:	461a      	mov	r2, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	f7fc f9d2 	bl	80002c0 <__aeabi_uldivmod>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e049      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f24:	4b85      	ldr	r3, [pc, #532]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	f04f 0400 	mov.w	r4, #0
 8003f2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	ea03 0501 	and.w	r5, r3, r1
 8003f3a:	ea04 0602 	and.w	r6, r4, r2
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4632      	mov	r2, r6
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	0154      	lsls	r4, r2, #5
 8003f4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f50:	014b      	lsls	r3, r1, #5
 8003f52:	4619      	mov	r1, r3
 8003f54:	4622      	mov	r2, r4
 8003f56:	1b49      	subs	r1, r1, r5
 8003f58:	eb62 0206 	sbc.w	r2, r2, r6
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	f04f 0400 	mov.w	r4, #0
 8003f64:	0194      	lsls	r4, r2, #6
 8003f66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f6a:	018b      	lsls	r3, r1, #6
 8003f6c:	1a5b      	subs	r3, r3, r1
 8003f6e:	eb64 0402 	sbc.w	r4, r4, r2
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	00e2      	lsls	r2, r4, #3
 8003f7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f80:	00d9      	lsls	r1, r3, #3
 8003f82:	460b      	mov	r3, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	195b      	adds	r3, r3, r5
 8003f88:	eb44 0406 	adc.w	r4, r4, r6
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	02a2      	lsls	r2, r4, #10
 8003f96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f9a:	0299      	lsls	r1, r3, #10
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	461a      	mov	r2, r3
 8003fac:	4623      	mov	r3, r4
 8003fae:	f7fc f987 	bl	80002c0 <__aeabi_uldivmod>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb8:	4b60      	ldr	r3, [pc, #384]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	613b      	str	r3, [r7, #16]
      break;
 8003fd2:	e0ae      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fdc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fde:	4b57      	ldr	r3, [pc, #348]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d04a      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fea:	4b54      	ldr	r3, [pc, #336]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	f04f 0400 	mov.w	r4, #0
 8003ff4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	ea03 0501 	and.w	r5, r3, r1
 8004000:	ea04 0602 	and.w	r6, r4, r2
 8004004:	4629      	mov	r1, r5
 8004006:	4632      	mov	r2, r6
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	f04f 0400 	mov.w	r4, #0
 8004010:	0154      	lsls	r4, r2, #5
 8004012:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004016:	014b      	lsls	r3, r1, #5
 8004018:	4619      	mov	r1, r3
 800401a:	4622      	mov	r2, r4
 800401c:	1b49      	subs	r1, r1, r5
 800401e:	eb62 0206 	sbc.w	r2, r2, r6
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	f04f 0400 	mov.w	r4, #0
 800402a:	0194      	lsls	r4, r2, #6
 800402c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004030:	018b      	lsls	r3, r1, #6
 8004032:	1a5b      	subs	r3, r3, r1
 8004034:	eb64 0402 	sbc.w	r4, r4, r2
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	00e2      	lsls	r2, r4, #3
 8004042:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004046:	00d9      	lsls	r1, r3, #3
 8004048:	460b      	mov	r3, r1
 800404a:	4614      	mov	r4, r2
 800404c:	195b      	adds	r3, r3, r5
 800404e:	eb44 0406 	adc.w	r4, r4, r6
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	0262      	lsls	r2, r4, #9
 800405c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004060:	0259      	lsls	r1, r3, #9
 8004062:	460b      	mov	r3, r1
 8004064:	4614      	mov	r4, r2
 8004066:	4618      	mov	r0, r3
 8004068:	4621      	mov	r1, r4
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f04f 0400 	mov.w	r4, #0
 8004070:	461a      	mov	r2, r3
 8004072:	4623      	mov	r3, r4
 8004074:	f7fc f924 	bl	80002c0 <__aeabi_uldivmod>
 8004078:	4603      	mov	r3, r0
 800407a:	460c      	mov	r4, r1
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e049      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	ea03 0501 	and.w	r5, r3, r1
 8004096:	ea04 0602 	and.w	r6, r4, r2
 800409a:	4629      	mov	r1, r5
 800409c:	4632      	mov	r2, r6
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	f04f 0400 	mov.w	r4, #0
 80040a6:	0154      	lsls	r4, r2, #5
 80040a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040ac:	014b      	lsls	r3, r1, #5
 80040ae:	4619      	mov	r1, r3
 80040b0:	4622      	mov	r2, r4
 80040b2:	1b49      	subs	r1, r1, r5
 80040b4:	eb62 0206 	sbc.w	r2, r2, r6
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	f04f 0400 	mov.w	r4, #0
 80040c0:	0194      	lsls	r4, r2, #6
 80040c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040c6:	018b      	lsls	r3, r1, #6
 80040c8:	1a5b      	subs	r3, r3, r1
 80040ca:	eb64 0402 	sbc.w	r4, r4, r2
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	00e2      	lsls	r2, r4, #3
 80040d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040dc:	00d9      	lsls	r1, r3, #3
 80040de:	460b      	mov	r3, r1
 80040e0:	4614      	mov	r4, r2
 80040e2:	195b      	adds	r3, r3, r5
 80040e4:	eb44 0406 	adc.w	r4, r4, r6
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	02a2      	lsls	r2, r4, #10
 80040f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040f6:	0299      	lsls	r1, r3, #10
 80040f8:	460b      	mov	r3, r1
 80040fa:	4614      	mov	r4, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	4621      	mov	r1, r4
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f04f 0400 	mov.w	r4, #0
 8004106:	461a      	mov	r2, r3
 8004108:	4623      	mov	r3, r4
 800410a:	f7fc f8d9 	bl	80002c0 <__aeabi_uldivmod>
 800410e:	4603      	mov	r3, r0
 8004110:	460c      	mov	r4, r1
 8004112:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCC_GetSysClockFreq+0x334>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0f1b      	lsrs	r3, r3, #28
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	613b      	str	r3, [r7, #16]
      break;
 800412a:	e002      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_RCC_GetSysClockFreq+0x338>)
 800412e:	613b      	str	r3, [r7, #16]
      break;
 8004130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004132:	693b      	ldr	r3, [r7, #16]
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	00f42400 	.word	0x00f42400
 8004144:	007a1200 	.word	0x007a1200

08004148 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8083 	beq.w	8004268 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004162:	4b95      	ldr	r3, [pc, #596]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b04      	cmp	r3, #4
 800416c:	d019      	beq.n	80041a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800416e:	4b92      	ldr	r3, [pc, #584]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004176:	2b08      	cmp	r3, #8
 8004178:	d106      	bne.n	8004188 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800417a:	4b8f      	ldr	r3, [pc, #572]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004186:	d00c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004188:	4b8b      	ldr	r3, [pc, #556]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d112      	bne.n	80041ba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004194:	4b88      	ldr	r3, [pc, #544]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a0:	d10b      	bne.n	80041ba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a2:	4b85      	ldr	r3, [pc, #532]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d05b      	beq.n	8004266 <HAL_RCC_OscConfig+0x11e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d157      	bne.n	8004266 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e216      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_OscConfig+0x8a>
 80041c4:	4b7c      	ldr	r3, [pc, #496]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a7b      	ldr	r2, [pc, #492]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e01d      	b.n	800420e <HAL_RCC_OscConfig+0xc6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041da:	d10c      	bne.n	80041f6 <HAL_RCC_OscConfig+0xae>
 80041dc:	4b76      	ldr	r3, [pc, #472]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a75      	ldr	r2, [pc, #468]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b73      	ldr	r3, [pc, #460]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a72      	ldr	r2, [pc, #456]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	e00b      	b.n	800420e <HAL_RCC_OscConfig+0xc6>
 80041f6:	4b70      	ldr	r3, [pc, #448]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6f      	ldr	r2, [pc, #444]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6c      	ldr	r2, [pc, #432]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fd fcff 	bl	8001c18 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421e:	f7fd fcfb 	bl	8001c18 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	; 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1db      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004230:	4b61      	ldr	r3, [pc, #388]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0xd6>
 800423c:	e014      	b.n	8004268 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fceb 	bl	8001c18 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004246:	f7fd fce7 	bl	8001c18 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1c7      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004258:	4b57      	ldr	r3, [pc, #348]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0xfe>
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d06f      	beq.n	8004354 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004274:	4b50      	ldr	r3, [pc, #320]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b00      	cmp	r3, #0
 800427e:	d017      	beq.n	80042b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004280:	4b4d      	ldr	r3, [pc, #308]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004288:	2b08      	cmp	r3, #8
 800428a:	d105      	bne.n	8004298 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800428c:	4b4a      	ldr	r3, [pc, #296]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004298:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d11c      	bne.n	80042de <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a4:	4b44      	ldr	r3, [pc, #272]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d116      	bne.n	80042de <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b0:	4b41      	ldr	r3, [pc, #260]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_OscConfig+0x180>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e18f      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4938      	ldr	r1, [pc, #224]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042dc:	e03a      	b.n	8004354 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d020      	beq.n	8004328 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e6:	4b35      	ldr	r3, [pc, #212]	; (80043bc <HAL_RCC_OscConfig+0x274>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fc94 	bl	8001c18 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f4:	f7fd fc90 	bl	8001c18 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e170      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4925      	ldr	r1, [pc, #148]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
 8004326:	e015      	b.n	8004354 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004328:	4b24      	ldr	r3, [pc, #144]	; (80043bc <HAL_RCC_OscConfig+0x274>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fd fc73 	bl	8001c18 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004336:	f7fd fc6f 	bl	8001c18 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e14f      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d037      	beq.n	80043d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d016      	beq.n	8004396 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <HAL_RCC_OscConfig+0x278>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fd fc53 	bl	8001c18 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004376:	f7fd fc4f 	bl	8001c18 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e12f      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x22e>
 8004394:	e01c      	b.n	80043d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_RCC_OscConfig+0x278>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fd fc3c 	bl	8001c18 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a2:	e00f      	b.n	80043c4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a4:	f7fd fc38 	bl	8001c18 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d908      	bls.n	80043c4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e118      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	42470000 	.word	0x42470000
 80043c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c4:	4b8a      	ldr	r3, [pc, #552]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 80043c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e9      	bne.n	80043a4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8097 	beq.w	800450c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4b83      	ldr	r3, [pc, #524]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b7f      	ldr	r3, [pc, #508]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a7e      	ldr	r2, [pc, #504]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b7c      	ldr	r3, [pc, #496]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800440a:	2301      	movs	r3, #1
 800440c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440e:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <HAL_RCC_OscConfig+0x4ac>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d118      	bne.n	800444c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800441a:	4b76      	ldr	r3, [pc, #472]	; (80045f4 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a75      	ldr	r2, [pc, #468]	; (80045f4 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004426:	f7fd fbf7 	bl	8001c18 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442e:	f7fd fbf3 	bl	8001c18 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0d3      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <HAL_RCC_OscConfig+0x4ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x31a>
 8004454:	4b66      	ldr	r3, [pc, #408]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	4a65      	ldr	r2, [pc, #404]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6713      	str	r3, [r2, #112]	; 0x70
 8004460:	e01c      	b.n	800449c <HAL_RCC_OscConfig+0x354>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b05      	cmp	r3, #5
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0x33c>
 800446a:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a60      	ldr	r2, [pc, #384]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004470:	f043 0304 	orr.w	r3, r3, #4
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
 8004476:	4b5e      	ldr	r3, [pc, #376]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	4a5d      	ldr	r2, [pc, #372]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	6713      	str	r3, [r2, #112]	; 0x70
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0x354>
 8004484:	4b5a      	ldr	r3, [pc, #360]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a59      	ldr	r2, [pc, #356]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
 8004490:	4b57      	ldr	r3, [pc, #348]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	4a56      	ldr	r2, [pc, #344]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004496:	f023 0304 	bic.w	r3, r3, #4
 800449a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d015      	beq.n	80044d0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fd fbb8 	bl	8001c18 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fd fbb4 	bl	8001c18 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e092      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c2:	4b4b      	ldr	r3, [pc, #300]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0ee      	beq.n	80044ac <HAL_RCC_OscConfig+0x364>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fd fba2 	bl	8001c18 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d8:	f7fd fb9e 	bl	8001c18 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e07c      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ee:	4b40      	ldr	r3, [pc, #256]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1ee      	bne.n	80044d8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004500:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	4a3a      	ldr	r2, [pc, #232]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800450a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d068      	beq.n	80045e6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004514:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b08      	cmp	r3, #8
 800451e:	d060      	beq.n	80045e2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d145      	bne.n	80045b4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004528:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <HAL_RCC_OscConfig+0x4b0>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fd fb73 	bl	8001c18 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004536:	f7fd fb6f 	bl	8001c18 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e04f      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004548:	4b29      	ldr	r3, [pc, #164]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	019b      	lsls	r3, r3, #6
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	3b01      	subs	r3, #1
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	061b      	lsls	r3, r3, #24
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	071b      	lsls	r3, r3, #28
 8004580:	491b      	ldr	r1, [pc, #108]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004586:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <HAL_RCC_OscConfig+0x4b0>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd fb44 	bl	8001c18 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004594:	f7fd fb40 	bl	8001c18 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e020      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x44c>
 80045b2:	e018      	b.n	80045e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_RCC_OscConfig+0x4b0>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fd fb2d 	bl	8001c18 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fd fb29 	bl	8001c18 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e009      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_RCC_OscConfig+0x4a8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x47a>
 80045e0:	e001      	b.n	80045e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40007000 	.word	0x40007000
 80045f8:	42470060 	.word	0x42470060

080045fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e01d      	b.n	800464a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f815 	bl	8004652 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 f968 	bl	8004910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b06      	cmp	r3, #6
 800468e:	d007      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d122      	bne.n	800470a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d11b      	bne.n	800470a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0202 	mvn.w	r2, #2
 80046da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8ee 	bl	80048d2 <HAL_TIM_IC_CaptureCallback>
 80046f6:	e005      	b.n	8004704 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8e0 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8f1 	bl	80048e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d122      	bne.n	800475e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b04      	cmp	r3, #4
 8004724:	d11b      	bne.n	800475e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f06f 0204 	mvn.w	r2, #4
 800472e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8c4 	bl	80048d2 <HAL_TIM_IC_CaptureCallback>
 800474a:	e005      	b.n	8004758 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8b6 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8c7 	bl	80048e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d122      	bne.n	80047b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b08      	cmp	r3, #8
 8004778:	d11b      	bne.n	80047b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f06f 0208 	mvn.w	r2, #8
 8004782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2204      	movs	r2, #4
 8004788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f89a 	bl	80048d2 <HAL_TIM_IC_CaptureCallback>
 800479e:	e005      	b.n	80047ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f88c 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f89d 	bl	80048e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d122      	bne.n	8004806 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b10      	cmp	r3, #16
 80047cc:	d11b      	bne.n	8004806 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0210 	mvn.w	r2, #16
 80047d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2208      	movs	r2, #8
 80047dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f870 	bl	80048d2 <HAL_TIM_IC_CaptureCallback>
 80047f2:	e005      	b.n	8004800 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f862 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f873 	bl	80048e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10e      	bne.n	8004832 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d107      	bne.n	8004832 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f06f 0201 	mvn.w	r2, #1
 800482a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fc f9f5 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	d10e      	bne.n	800485e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b80      	cmp	r3, #128	; 0x80
 800484c:	d107      	bne.n	800485e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f903 	bl	8004a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d10e      	bne.n	800488a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d107      	bne.n	800488a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f838 	bl	80048fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b20      	cmp	r3, #32
 8004896:	d10e      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d107      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0220 	mvn.w	r2, #32
 80048ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f8cd 	bl	8004a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a40      	ldr	r2, [pc, #256]	; (8004a24 <TIM_Base_SetConfig+0x114>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492e:	d00f      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a3d      	ldr	r2, [pc, #244]	; (8004a28 <TIM_Base_SetConfig+0x118>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00b      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a3c      	ldr	r2, [pc, #240]	; (8004a2c <TIM_Base_SetConfig+0x11c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d007      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3b      	ldr	r2, [pc, #236]	; (8004a30 <TIM_Base_SetConfig+0x120>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3a      	ldr	r2, [pc, #232]	; (8004a34 <TIM_Base_SetConfig+0x124>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d108      	bne.n	8004962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2f      	ldr	r2, [pc, #188]	; (8004a24 <TIM_Base_SetConfig+0x114>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d02b      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004970:	d027      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2c      	ldr	r2, [pc, #176]	; (8004a28 <TIM_Base_SetConfig+0x118>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d023      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2b      	ldr	r2, [pc, #172]	; (8004a2c <TIM_Base_SetConfig+0x11c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01f      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <TIM_Base_SetConfig+0x120>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01b      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a29      	ldr	r2, [pc, #164]	; (8004a34 <TIM_Base_SetConfig+0x124>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d017      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a28      	ldr	r2, [pc, #160]	; (8004a38 <TIM_Base_SetConfig+0x128>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a27      	ldr	r2, [pc, #156]	; (8004a3c <TIM_Base_SetConfig+0x12c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00f      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <TIM_Base_SetConfig+0x130>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <TIM_Base_SetConfig+0x134>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a24      	ldr	r2, [pc, #144]	; (8004a48 <TIM_Base_SetConfig+0x138>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d003      	beq.n	80049c2 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a23      	ldr	r2, [pc, #140]	; (8004a4c <TIM_Base_SetConfig+0x13c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d108      	bne.n	80049d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <TIM_Base_SetConfig+0x114>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_Base_SetConfig+0xf8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <TIM_Base_SetConfig+0x124>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d103      	bne.n	8004a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	615a      	str	r2, [r3, #20]
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40010400 	.word	0x40010400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800
 8004a44:	40001800 	.word	0x40001800
 8004a48:	40001c00 	.word	0x40001c00
 8004a4c:	40002000 	.word	0x40002000

08004a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e03f      	b.n	8004b0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc f902 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	; 0x24
 8004aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f90b 	bl	8004cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b088      	sub	sp, #32
 8004b16:	af02      	add	r7, sp, #8
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	f040 8083 	bne.w	8004c3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Transmit+0x2e>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e07b      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Transmit+0x40>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e074      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2221      	movs	r2, #33	; 0x21
 8004b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b68:	f7fd f856 	bl	8001c18 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004b82:	e042      	b.n	8004c0a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9a:	d122      	bne.n	8004be2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f84c 	bl	8004c44 <UART_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e042      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	e017      	b.n	8004c0a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	e013      	b.n	8004c0a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	2180      	movs	r1, #128	; 0x80
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f829 	bl	8004c44 <UART_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e01f      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	60ba      	str	r2, [r7, #8]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1b7      	bne.n	8004b84 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f810 	bl	8004c44 <UART_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e006      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c54:	e02c      	b.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d028      	beq.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c64:	f7fc ffd8 	bl	8001c18 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d21d      	bcs.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e00f      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d0c3      	beq.n	8004c56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d1a:	f023 030c 	bic.w	r3, r3, #12
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d46:	f040 818b 	bne.w	8005060 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4ac1      	ldr	r2, [pc, #772]	; (8005054 <UART_SetConfig+0x37c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d005      	beq.n	8004d60 <UART_SetConfig+0x88>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4abf      	ldr	r2, [pc, #764]	; (8005058 <UART_SetConfig+0x380>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f040 80bd 	bne.w	8004eda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d60:	f7ff f80c 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004d64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	461d      	mov	r5, r3
 8004d6a:	f04f 0600 	mov.w	r6, #0
 8004d6e:	46a8      	mov	r8, r5
 8004d70:	46b1      	mov	r9, r6
 8004d72:	eb18 0308 	adds.w	r3, r8, r8
 8004d76:	eb49 0409 	adc.w	r4, r9, r9
 8004d7a:	4698      	mov	r8, r3
 8004d7c:	46a1      	mov	r9, r4
 8004d7e:	eb18 0805 	adds.w	r8, r8, r5
 8004d82:	eb49 0906 	adc.w	r9, r9, r6
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d9a:	4688      	mov	r8, r1
 8004d9c:	4691      	mov	r9, r2
 8004d9e:	eb18 0005 	adds.w	r0, r8, r5
 8004da2:	eb49 0106 	adc.w	r1, r9, r6
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	461d      	mov	r5, r3
 8004dac:	f04f 0600 	mov.w	r6, #0
 8004db0:	196b      	adds	r3, r5, r5
 8004db2:	eb46 0406 	adc.w	r4, r6, r6
 8004db6:	461a      	mov	r2, r3
 8004db8:	4623      	mov	r3, r4
 8004dba:	f7fb fa81 	bl	80002c0 <__aeabi_uldivmod>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4ba5      	ldr	r3, [pc, #660]	; (800505c <UART_SetConfig+0x384>)
 8004dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	461d      	mov	r5, r3
 8004dd4:	f04f 0600 	mov.w	r6, #0
 8004dd8:	46a9      	mov	r9, r5
 8004dda:	46b2      	mov	sl, r6
 8004ddc:	eb19 0309 	adds.w	r3, r9, r9
 8004de0:	eb4a 040a 	adc.w	r4, sl, sl
 8004de4:	4699      	mov	r9, r3
 8004de6:	46a2      	mov	sl, r4
 8004de8:	eb19 0905 	adds.w	r9, r9, r5
 8004dec:	eb4a 0a06 	adc.w	sl, sl, r6
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e04:	4689      	mov	r9, r1
 8004e06:	4692      	mov	sl, r2
 8004e08:	eb19 0005 	adds.w	r0, r9, r5
 8004e0c:	eb4a 0106 	adc.w	r1, sl, r6
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	461d      	mov	r5, r3
 8004e16:	f04f 0600 	mov.w	r6, #0
 8004e1a:	196b      	adds	r3, r5, r5
 8004e1c:	eb46 0406 	adc.w	r4, r6, r6
 8004e20:	461a      	mov	r2, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	f7fb fa4c 	bl	80002c0 <__aeabi_uldivmod>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4b8b      	ldr	r3, [pc, #556]	; (800505c <UART_SetConfig+0x384>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	; 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	3332      	adds	r3, #50	; 0x32
 8004e42:	4a86      	ldr	r2, [pc, #536]	; (800505c <UART_SetConfig+0x384>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e50:	4498      	add	r8, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	461d      	mov	r5, r3
 8004e56:	f04f 0600 	mov.w	r6, #0
 8004e5a:	46a9      	mov	r9, r5
 8004e5c:	46b2      	mov	sl, r6
 8004e5e:	eb19 0309 	adds.w	r3, r9, r9
 8004e62:	eb4a 040a 	adc.w	r4, sl, sl
 8004e66:	4699      	mov	r9, r3
 8004e68:	46a2      	mov	sl, r4
 8004e6a:	eb19 0905 	adds.w	r9, r9, r5
 8004e6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e86:	4689      	mov	r9, r1
 8004e88:	4692      	mov	sl, r2
 8004e8a:	eb19 0005 	adds.w	r0, r9, r5
 8004e8e:	eb4a 0106 	adc.w	r1, sl, r6
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	461d      	mov	r5, r3
 8004e98:	f04f 0600 	mov.w	r6, #0
 8004e9c:	196b      	adds	r3, r5, r5
 8004e9e:	eb46 0406 	adc.w	r4, r6, r6
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	f7fb fa0b 	bl	80002c0 <__aeabi_uldivmod>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	460c      	mov	r4, r1
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4b6a      	ldr	r3, [pc, #424]	; (800505c <UART_SetConfig+0x384>)
 8004eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2164      	movs	r1, #100	; 0x64
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	3332      	adds	r3, #50	; 0x32
 8004ec4:	4a65      	ldr	r2, [pc, #404]	; (800505c <UART_SetConfig+0x384>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	f003 0207 	and.w	r2, r3, #7
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4442      	add	r2, r8
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	e26f      	b.n	80053ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eda:	f7fe ff3b 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004ede:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	461d      	mov	r5, r3
 8004ee4:	f04f 0600 	mov.w	r6, #0
 8004ee8:	46a8      	mov	r8, r5
 8004eea:	46b1      	mov	r9, r6
 8004eec:	eb18 0308 	adds.w	r3, r8, r8
 8004ef0:	eb49 0409 	adc.w	r4, r9, r9
 8004ef4:	4698      	mov	r8, r3
 8004ef6:	46a1      	mov	r9, r4
 8004ef8:	eb18 0805 	adds.w	r8, r8, r5
 8004efc:	eb49 0906 	adc.w	r9, r9, r6
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f14:	4688      	mov	r8, r1
 8004f16:	4691      	mov	r9, r2
 8004f18:	eb18 0005 	adds.w	r0, r8, r5
 8004f1c:	eb49 0106 	adc.w	r1, r9, r6
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	461d      	mov	r5, r3
 8004f26:	f04f 0600 	mov.w	r6, #0
 8004f2a:	196b      	adds	r3, r5, r5
 8004f2c:	eb46 0406 	adc.w	r4, r6, r6
 8004f30:	461a      	mov	r2, r3
 8004f32:	4623      	mov	r3, r4
 8004f34:	f7fb f9c4 	bl	80002c0 <__aeabi_uldivmod>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <UART_SetConfig+0x384>)
 8004f40:	fba3 2302 	umull	r2, r3, r3, r2
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	461d      	mov	r5, r3
 8004f4e:	f04f 0600 	mov.w	r6, #0
 8004f52:	46a9      	mov	r9, r5
 8004f54:	46b2      	mov	sl, r6
 8004f56:	eb19 0309 	adds.w	r3, r9, r9
 8004f5a:	eb4a 040a 	adc.w	r4, sl, sl
 8004f5e:	4699      	mov	r9, r3
 8004f60:	46a2      	mov	sl, r4
 8004f62:	eb19 0905 	adds.w	r9, r9, r5
 8004f66:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f6a:	f04f 0100 	mov.w	r1, #0
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f7e:	4689      	mov	r9, r1
 8004f80:	4692      	mov	sl, r2
 8004f82:	eb19 0005 	adds.w	r0, r9, r5
 8004f86:	eb4a 0106 	adc.w	r1, sl, r6
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	461d      	mov	r5, r3
 8004f90:	f04f 0600 	mov.w	r6, #0
 8004f94:	196b      	adds	r3, r5, r5
 8004f96:	eb46 0406 	adc.w	r4, r6, r6
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4623      	mov	r3, r4
 8004f9e:	f7fb f98f 	bl	80002c0 <__aeabi_uldivmod>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b2c      	ldr	r3, [pc, #176]	; (800505c <UART_SetConfig+0x384>)
 8004faa:	fba3 1302 	umull	r1, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2164      	movs	r1, #100	; 0x64
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	3332      	adds	r3, #50	; 0x32
 8004fbc:	4a27      	ldr	r2, [pc, #156]	; (800505c <UART_SetConfig+0x384>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fca:	4498      	add	r8, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	461d      	mov	r5, r3
 8004fd0:	f04f 0600 	mov.w	r6, #0
 8004fd4:	46a9      	mov	r9, r5
 8004fd6:	46b2      	mov	sl, r6
 8004fd8:	eb19 0309 	adds.w	r3, r9, r9
 8004fdc:	eb4a 040a 	adc.w	r4, sl, sl
 8004fe0:	4699      	mov	r9, r3
 8004fe2:	46a2      	mov	sl, r4
 8004fe4:	eb19 0905 	adds.w	r9, r9, r5
 8004fe8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ff8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ffc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005000:	4689      	mov	r9, r1
 8005002:	4692      	mov	sl, r2
 8005004:	eb19 0005 	adds.w	r0, r9, r5
 8005008:	eb4a 0106 	adc.w	r1, sl, r6
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	461d      	mov	r5, r3
 8005012:	f04f 0600 	mov.w	r6, #0
 8005016:	196b      	adds	r3, r5, r5
 8005018:	eb46 0406 	adc.w	r4, r6, r6
 800501c:	461a      	mov	r2, r3
 800501e:	4623      	mov	r3, r4
 8005020:	f7fb f94e 	bl	80002c0 <__aeabi_uldivmod>
 8005024:	4603      	mov	r3, r0
 8005026:	460c      	mov	r4, r1
 8005028:	461a      	mov	r2, r3
 800502a:	4b0c      	ldr	r3, [pc, #48]	; (800505c <UART_SetConfig+0x384>)
 800502c:	fba3 1302 	umull	r1, r3, r3, r2
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	2164      	movs	r1, #100	; 0x64
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	3332      	adds	r3, #50	; 0x32
 800503e:	4a07      	ldr	r2, [pc, #28]	; (800505c <UART_SetConfig+0x384>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	f003 0207 	and.w	r2, r3, #7
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4442      	add	r2, r8
 8005050:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005052:	e1b2      	b.n	80053ba <UART_SetConfig+0x6e2>
 8005054:	40011000 	.word	0x40011000
 8005058:	40011400 	.word	0x40011400
 800505c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4ad7      	ldr	r2, [pc, #860]	; (80053c4 <UART_SetConfig+0x6ec>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d005      	beq.n	8005076 <UART_SetConfig+0x39e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4ad6      	ldr	r2, [pc, #856]	; (80053c8 <UART_SetConfig+0x6f0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	f040 80d1 	bne.w	8005218 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005076:	f7fe fe81 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 800507a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	469a      	mov	sl, r3
 8005080:	f04f 0b00 	mov.w	fp, #0
 8005084:	46d0      	mov	r8, sl
 8005086:	46d9      	mov	r9, fp
 8005088:	eb18 0308 	adds.w	r3, r8, r8
 800508c:	eb49 0409 	adc.w	r4, r9, r9
 8005090:	4698      	mov	r8, r3
 8005092:	46a1      	mov	r9, r4
 8005094:	eb18 080a 	adds.w	r8, r8, sl
 8005098:	eb49 090b 	adc.w	r9, r9, fp
 800509c:	f04f 0100 	mov.w	r1, #0
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050b0:	4688      	mov	r8, r1
 80050b2:	4691      	mov	r9, r2
 80050b4:	eb1a 0508 	adds.w	r5, sl, r8
 80050b8:	eb4b 0609 	adc.w	r6, fp, r9
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4619      	mov	r1, r3
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	f04f 0400 	mov.w	r4, #0
 80050ce:	0094      	lsls	r4, r2, #2
 80050d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050d4:	008b      	lsls	r3, r1, #2
 80050d6:	461a      	mov	r2, r3
 80050d8:	4623      	mov	r3, r4
 80050da:	4628      	mov	r0, r5
 80050dc:	4631      	mov	r1, r6
 80050de:	f7fb f8ef 	bl	80002c0 <__aeabi_uldivmod>
 80050e2:	4603      	mov	r3, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	461a      	mov	r2, r3
 80050e8:	4bb8      	ldr	r3, [pc, #736]	; (80053cc <UART_SetConfig+0x6f4>)
 80050ea:	fba3 2302 	umull	r2, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	469b      	mov	fp, r3
 80050f8:	f04f 0c00 	mov.w	ip, #0
 80050fc:	46d9      	mov	r9, fp
 80050fe:	46e2      	mov	sl, ip
 8005100:	eb19 0309 	adds.w	r3, r9, r9
 8005104:	eb4a 040a 	adc.w	r4, sl, sl
 8005108:	4699      	mov	r9, r3
 800510a:	46a2      	mov	sl, r4
 800510c:	eb19 090b 	adds.w	r9, r9, fp
 8005110:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005114:	f04f 0100 	mov.w	r1, #0
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005120:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005124:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005128:	4689      	mov	r9, r1
 800512a:	4692      	mov	sl, r2
 800512c:	eb1b 0509 	adds.w	r5, fp, r9
 8005130:	eb4c 060a 	adc.w	r6, ip, sl
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4619      	mov	r1, r3
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	f04f 0400 	mov.w	r4, #0
 8005146:	0094      	lsls	r4, r2, #2
 8005148:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800514c:	008b      	lsls	r3, r1, #2
 800514e:	461a      	mov	r2, r3
 8005150:	4623      	mov	r3, r4
 8005152:	4628      	mov	r0, r5
 8005154:	4631      	mov	r1, r6
 8005156:	f7fb f8b3 	bl	80002c0 <__aeabi_uldivmod>
 800515a:	4603      	mov	r3, r0
 800515c:	460c      	mov	r4, r1
 800515e:	461a      	mov	r2, r3
 8005160:	4b9a      	ldr	r3, [pc, #616]	; (80053cc <UART_SetConfig+0x6f4>)
 8005162:	fba3 1302 	umull	r1, r3, r3, r2
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2164      	movs	r1, #100	; 0x64
 800516a:	fb01 f303 	mul.w	r3, r1, r3
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	3332      	adds	r3, #50	; 0x32
 8005174:	4a95      	ldr	r2, [pc, #596]	; (80053cc <UART_SetConfig+0x6f4>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005180:	4498      	add	r8, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	469b      	mov	fp, r3
 8005186:	f04f 0c00 	mov.w	ip, #0
 800518a:	46d9      	mov	r9, fp
 800518c:	46e2      	mov	sl, ip
 800518e:	eb19 0309 	adds.w	r3, r9, r9
 8005192:	eb4a 040a 	adc.w	r4, sl, sl
 8005196:	4699      	mov	r9, r3
 8005198:	46a2      	mov	sl, r4
 800519a:	eb19 090b 	adds.w	r9, r9, fp
 800519e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051a2:	f04f 0100 	mov.w	r1, #0
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051b6:	4689      	mov	r9, r1
 80051b8:	4692      	mov	sl, r2
 80051ba:	eb1b 0509 	adds.w	r5, fp, r9
 80051be:	eb4c 060a 	adc.w	r6, ip, sl
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4619      	mov	r1, r3
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	0094      	lsls	r4, r2, #2
 80051d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051da:	008b      	lsls	r3, r1, #2
 80051dc:	461a      	mov	r2, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	4628      	mov	r0, r5
 80051e2:	4631      	mov	r1, r6
 80051e4:	f7fb f86c 	bl	80002c0 <__aeabi_uldivmod>
 80051e8:	4603      	mov	r3, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	461a      	mov	r2, r3
 80051ee:	4b77      	ldr	r3, [pc, #476]	; (80053cc <UART_SetConfig+0x6f4>)
 80051f0:	fba3 1302 	umull	r1, r3, r3, r2
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	2164      	movs	r1, #100	; 0x64
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	3332      	adds	r3, #50	; 0x32
 8005202:	4a72      	ldr	r2, [pc, #456]	; (80053cc <UART_SetConfig+0x6f4>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	f003 020f 	and.w	r2, r3, #15
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4442      	add	r2, r8
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	e0d0      	b.n	80053ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fe fd9c 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 800521c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	469a      	mov	sl, r3
 8005222:	f04f 0b00 	mov.w	fp, #0
 8005226:	46d0      	mov	r8, sl
 8005228:	46d9      	mov	r9, fp
 800522a:	eb18 0308 	adds.w	r3, r8, r8
 800522e:	eb49 0409 	adc.w	r4, r9, r9
 8005232:	4698      	mov	r8, r3
 8005234:	46a1      	mov	r9, r4
 8005236:	eb18 080a 	adds.w	r8, r8, sl
 800523a:	eb49 090b 	adc.w	r9, r9, fp
 800523e:	f04f 0100 	mov.w	r1, #0
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800524a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800524e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005252:	4688      	mov	r8, r1
 8005254:	4691      	mov	r9, r2
 8005256:	eb1a 0508 	adds.w	r5, sl, r8
 800525a:	eb4b 0609 	adc.w	r6, fp, r9
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	4619      	mov	r1, r3
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	f04f 0400 	mov.w	r4, #0
 8005270:	0094      	lsls	r4, r2, #2
 8005272:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005276:	008b      	lsls	r3, r1, #2
 8005278:	461a      	mov	r2, r3
 800527a:	4623      	mov	r3, r4
 800527c:	4628      	mov	r0, r5
 800527e:	4631      	mov	r1, r6
 8005280:	f7fb f81e 	bl	80002c0 <__aeabi_uldivmod>
 8005284:	4603      	mov	r3, r0
 8005286:	460c      	mov	r4, r1
 8005288:	461a      	mov	r2, r3
 800528a:	4b50      	ldr	r3, [pc, #320]	; (80053cc <UART_SetConfig+0x6f4>)
 800528c:	fba3 2302 	umull	r2, r3, r3, r2
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	469b      	mov	fp, r3
 800529a:	f04f 0c00 	mov.w	ip, #0
 800529e:	46d9      	mov	r9, fp
 80052a0:	46e2      	mov	sl, ip
 80052a2:	eb19 0309 	adds.w	r3, r9, r9
 80052a6:	eb4a 040a 	adc.w	r4, sl, sl
 80052aa:	4699      	mov	r9, r3
 80052ac:	46a2      	mov	sl, r4
 80052ae:	eb19 090b 	adds.w	r9, r9, fp
 80052b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052b6:	f04f 0100 	mov.w	r1, #0
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052ca:	4689      	mov	r9, r1
 80052cc:	4692      	mov	sl, r2
 80052ce:	eb1b 0509 	adds.w	r5, fp, r9
 80052d2:	eb4c 060a 	adc.w	r6, ip, sl
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4619      	mov	r1, r3
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	0094      	lsls	r4, r2, #2
 80052ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052ee:	008b      	lsls	r3, r1, #2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	4628      	mov	r0, r5
 80052f6:	4631      	mov	r1, r6
 80052f8:	f7fa ffe2 	bl	80002c0 <__aeabi_uldivmod>
 80052fc:	4603      	mov	r3, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	461a      	mov	r2, r3
 8005302:	4b32      	ldr	r3, [pc, #200]	; (80053cc <UART_SetConfig+0x6f4>)
 8005304:	fba3 1302 	umull	r1, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	2164      	movs	r1, #100	; 0x64
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	3332      	adds	r3, #50	; 0x32
 8005316:	4a2d      	ldr	r2, [pc, #180]	; (80053cc <UART_SetConfig+0x6f4>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005322:	4498      	add	r8, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	469b      	mov	fp, r3
 8005328:	f04f 0c00 	mov.w	ip, #0
 800532c:	46d9      	mov	r9, fp
 800532e:	46e2      	mov	sl, ip
 8005330:	eb19 0309 	adds.w	r3, r9, r9
 8005334:	eb4a 040a 	adc.w	r4, sl, sl
 8005338:	4699      	mov	r9, r3
 800533a:	46a2      	mov	sl, r4
 800533c:	eb19 090b 	adds.w	r9, r9, fp
 8005340:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005350:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005354:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005358:	4689      	mov	r9, r1
 800535a:	4692      	mov	sl, r2
 800535c:	eb1b 0509 	adds.w	r5, fp, r9
 8005360:	eb4c 060a 	adc.w	r6, ip, sl
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4619      	mov	r1, r3
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	f04f 0400 	mov.w	r4, #0
 8005376:	0094      	lsls	r4, r2, #2
 8005378:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800537c:	008b      	lsls	r3, r1, #2
 800537e:	461a      	mov	r2, r3
 8005380:	4623      	mov	r3, r4
 8005382:	4628      	mov	r0, r5
 8005384:	4631      	mov	r1, r6
 8005386:	f7fa ff9b 	bl	80002c0 <__aeabi_uldivmod>
 800538a:	4603      	mov	r3, r0
 800538c:	460c      	mov	r4, r1
 800538e:	461a      	mov	r2, r3
 8005390:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <UART_SetConfig+0x6f4>)
 8005392:	fba3 1302 	umull	r1, r3, r3, r2
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2164      	movs	r1, #100	; 0x64
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	3332      	adds	r3, #50	; 0x32
 80053a4:	4a09      	ldr	r2, [pc, #36]	; (80053cc <UART_SetConfig+0x6f4>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4442      	add	r2, r8
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	e7ff      	b.n	80053ba <UART_SetConfig+0x6e2>
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c4:	40011000 	.word	0x40011000
 80053c8:	40011400 	.word	0x40011400
 80053cc:	51eb851f 	.word	0x51eb851f

080053d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d0:	b084      	sub	sp, #16
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	f107 001c 	add.w	r0, r7, #28
 80053de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d122      	bne.n	800542e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d105      	bne.n	8005422 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f94a 	bl	80056bc <USB_CoreReset>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]
 800542c:	e01a      	b.n	8005464 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f93e 	bl	80056bc <USB_CoreReset>
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
 8005456:	e005      	b.n	8005464 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10b      	bne.n	8005482 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f043 0206 	orr.w	r2, r3, #6
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800548e:	b004      	add	sp, #16
 8005490:	4770      	bx	lr

08005492 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f043 0201 	orr.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f023 0201 	bic.w	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
 8005500:	e00b      	b.n	800551a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	e001      	b.n	800551a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e003      	b.n	8005522 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800551a:	2032      	movs	r0, #50	; 0x32
 800551c:	f7fc fb88 	bl	8001c30 <HAL_Delay>

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	019b      	lsls	r3, r3, #6
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3301      	adds	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a09      	ldr	r2, [pc, #36]	; (8005574 <USB_FlushTxFifo+0x48>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d901      	bls.n	8005558 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e006      	b.n	8005566 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b20      	cmp	r3, #32
 8005562:	d0f0      	beq.n	8005546 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	00030d40 	.word	0x00030d40

08005578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2210      	movs	r2, #16
 8005588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <USB_FlushRxFifo+0x40>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d901      	bls.n	800559c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e006      	b.n	80055aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d0f0      	beq.n	800558a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	00030d40 	.word	0x00030d40

080055bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	; 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4611      	mov	r1, r2
 80055c8:	461a      	mov	r2, r3
 80055ca:	460b      	mov	r3, r1
 80055cc:	71fb      	strb	r3, [r7, #7]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80055da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d11a      	bne.n	8005618 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055e2:	88bb      	ldrh	r3, [r7, #4]
 80055e4:	3303      	adds	r3, #3
 80055e6:	089b      	lsrs	r3, r3, #2
 80055e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	e00f      	b.n	8005610 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	031a      	lsls	r2, r3, #12
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fc:	461a      	mov	r2, r3
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	3304      	adds	r3, #4
 8005608:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	3301      	adds	r3, #1
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	429a      	cmp	r2, r3
 8005616:	d3eb      	bcc.n	80055f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3724      	adds	r7, #36	; 0x24
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005626:	b480      	push	{r7}
 8005628:	b089      	sub	sp, #36	; 0x24
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	4613      	mov	r3, r2
 8005632:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	3303      	adds	r3, #3
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	e00b      	b.n	8005662 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	601a      	str	r2, [r3, #0]
    pDest++;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3304      	adds	r3, #4
 800565a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	3301      	adds	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d3ef      	bcc.n	800564a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800566a:	69fb      	ldr	r3, [r7, #28]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3724      	adds	r7, #36	; 0x24
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0301 	and.w	r3, r3, #1
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a13      	ldr	r2, [pc, #76]	; (8005720 <USB_CoreReset+0x64>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e01b      	b.n	8005712 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	daf2      	bge.n	80056c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <USB_CoreReset+0x64>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e006      	b.n	8005712 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d0f0      	beq.n	80056f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	00030d40 	.word	0x00030d40

08005724 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005724:	b084      	sub	sp, #16
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	f107 001c 	add.w	r0, r7, #28
 8005732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005740:	461a      	mov	r2, r3
 8005742:	2300      	movs	r3, #0
 8005744:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10a      	bne.n	800577a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005772:	f043 0304 	orr.w	r3, r3, #4
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	e014      	b.n	80057a4 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005788:	f023 0304 	bic.w	r3, r3, #4
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e009      	b.n	80057a4 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800579e:	f023 0304 	bic.w	r3, r3, #4
 80057a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80057a4:	2110      	movs	r1, #16
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fec0 	bl	800552c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fee3 	bl	8005578 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e015      	b.n	80057e4 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c4:	461a      	mov	r2, r3
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	461a      	mov	r2, r3
 80057da:	2300      	movs	r3, #0
 80057dc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d3e5      	bcc.n	80057b8 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80057ec:	2101      	movs	r1, #1
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8ac 	bl	800594c <USB_DriveVbus>

  HAL_Delay(200U);
 80057f4:	20c8      	movs	r0, #200	; 0xc8
 80057f6:	f7fc fa1b 	bl	8001c30 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f04f 32ff 	mov.w	r2, #4294967295
 8005806:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a14      	ldr	r2, [pc, #80]	; (8005870 <USB_HostInit+0x14c>)
 8005820:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a13      	ldr	r2, [pc, #76]	; (8005874 <USB_HostInit+0x150>)
 8005826:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800582a:	e009      	b.n	8005840 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a10      	ldr	r2, [pc, #64]	; (8005878 <USB_HostInit+0x154>)
 8005836:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a10      	ldr	r2, [pc, #64]	; (800587c <USB_HostInit+0x158>)
 800583c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d105      	bne.n	8005852 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f043 0210 	orr.w	r2, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <USB_HostInit+0x15c>)
 8005858:	4313      	orrs	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800586a:	b004      	add	sp, #16
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	01000200 	.word	0x01000200
 8005874:	00e00300 	.word	0x00e00300
 8005878:	00600080 	.word	0x00600080
 800587c:	004000e0 	.word	0x004000e0
 8005880:	a3200008 	.word	0xa3200008

08005884 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	68f9      	ldr	r1, [r7, #12]
 80058b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058bc:	4313      	orrs	r3, r2
 80058be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d107      	bne.n	80058d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058cc:	461a      	mov	r2, r3
 80058ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058d2:	6053      	str	r3, [r2, #4]
 80058d4:	e009      	b.n	80058ea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d106      	bne.n	80058ea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e2:	461a      	mov	r2, r3
 80058e4:	f241 7370 	movw	r3, #6000	; 0x1770
 80058e8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005918:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005926:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005928:	2064      	movs	r0, #100	; 0x64
 800592a:	f7fc f981 	bl	8001c30 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800593a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800593c:	200a      	movs	r0, #10
 800593e:	f7fc f977 	bl	8001c30 <HAL_Delay>

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005970:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <USB_DriveVbus+0x44>
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d106      	bne.n	8005990 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800598a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800598e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599a:	d109      	bne.n	80059b0 <USB_DriveVbus+0x64>
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	0c5b      	lsrs	r3, r3, #17
 80059dc:	f003 0303 	and.w	r3, r3, #3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	b29b      	uxth	r3, r3
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	70fb      	strb	r3, [r7, #3]
 8005a22:	460b      	mov	r3, r1
 8005a24:	70bb      	strb	r3, [r7, #2]
 8005a26:	4613      	mov	r3, r2
 8005a28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d87e      	bhi.n	8005b4c <USB_HC_Init+0x13c>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <USB_HC_Init+0x44>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005b0f 	.word	0x08005b0f
 8005a5c:	08005a65 	.word	0x08005a65
 8005a60:	08005ad1 	.word	0x08005ad1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	461a      	mov	r2, r3
 8005a72:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da10      	bge.n	8005aa2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005aa0:	e057      	b.n	8005b52 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d051      	beq.n	8005b52 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005acc:	60d3      	str	r3, [r2, #12]
      break;
 8005ace:	e040      	b.n	8005b52 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	461a      	mov	r2, r3
 8005ade:	f240 639d 	movw	r3, #1693	; 0x69d
 8005ae2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ae4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	da34      	bge.n	8005b56 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b0c:	e023      	b.n	8005b56 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f240 2325 	movw	r3, #549	; 0x225
 8005b20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	da17      	bge.n	8005b5a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b44:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b48:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b4a:	e006      	b.n	8005b5a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	e004      	b.n	8005b5c <USB_HC_Init+0x14c>
      break;
 8005b52:	bf00      	nop
 8005b54:	e002      	b.n	8005b5c <USB_HC_Init+0x14c>
      break;
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <USB_HC_Init+0x14c>
      break;
 8005b5a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b62:	699a      	ldr	r2, [r3, #24]
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b76:	4313      	orrs	r3, r2
 8005b78:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da03      	bge.n	8005b96 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	e001      	b.n	8005b9a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d103      	bne.n	8005baa <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e001      	b.n	8005bae <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bae:	787b      	ldrb	r3, [r7, #1]
 8005bb0:	059b      	lsls	r3, r3, #22
 8005bb2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bb6:	78bb      	ldrb	r3, [r7, #2]
 8005bb8:	02db      	lsls	r3, r3, #11
 8005bba:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bbe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bc4:	049b      	lsls	r3, r3, #18
 8005bc6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bd2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	0159      	lsls	r1, r3, #5
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	440b      	add	r3, r1
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bea:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d10f      	bne.n	8005c14 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c12:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop

08005c24 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08c      	sub	sp, #48	; 0x30
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c40:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d028      	beq.n	8005ca0 <USB_HC_StartXfer+0x7c>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	791b      	ldrb	r3, [r3, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d124      	bne.n	8005ca0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <USB_HC_StartXfer+0x50>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	795b      	ldrb	r3, [r3, #5]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d107      	bne.n	8005c74 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fa30 	bl	80060d0 <USB_DoPing>
      return HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e114      	b.n	8005e9e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d112      	bne.n	8005ca0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	6a3a      	ldr	r2, [r7, #32]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c94:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005c98:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d018      	beq.n	8005cda <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	8912      	ldrh	r2, [r2, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	8912      	ldrh	r2, [r2, #8]
 8005cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cbc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005cbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cc0:	8b7b      	ldrh	r3, [r7, #26]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d90b      	bls.n	8005cde <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005cc6:	8b7b      	ldrh	r3, [r7, #26]
 8005cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005cca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	8912      	ldrh	r2, [r2, #8]
 8005cd0:	fb02 f203 	mul.w	r2, r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	611a      	str	r2, [r3, #16]
 8005cd8:	e001      	b.n	8005cde <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	78db      	ldrb	r3, [r3, #3]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d006      	beq.n	8005cf4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005ce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	8912      	ldrh	r2, [r2, #8]
 8005cec:	fb02 f203 	mul.w	r2, r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cfe:	04d9      	lsls	r1, r3, #19
 8005d00:	4b69      	ldr	r3, [pc, #420]	; (8005ea8 <USB_HC_StartXfer+0x284>)
 8005d02:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d04:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	7a9b      	ldrb	r3, [r3, #10]
 8005d0a:	075b      	lsls	r3, r3, #29
 8005d0c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	0148      	lsls	r0, r1, #5
 8005d14:	6a39      	ldr	r1, [r7, #32]
 8005d16:	4401      	add	r1, r0
 8005d18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d1c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d1e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68d9      	ldr	r1, [r3, #12]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	460a      	mov	r2, r1
 8005d38:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d70:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	7e7b      	ldrb	r3, [r7, #25]
 8005d82:	075b      	lsls	r3, r3, #29
 8005d84:	69f9      	ldr	r1, [r7, #28]
 8005d86:	0148      	lsls	r0, r1, #5
 8005d88:	6a39      	ldr	r1, [r7, #32]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a42      	ldr	r2, [pc, #264]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005da4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005da6:	4b41      	ldr	r3, [pc, #260]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dae:	4a3f      	ldr	r2, [pc, #252]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005db0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	78db      	ldrb	r3, [r3, #3]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d006      	beq.n	8005dc8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005dba:	4b3c      	ldr	r3, [pc, #240]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc2:	4a3a      	ldr	r2, [pc, #232]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e005      	b.n	8005dd4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005dc8:	4b38      	ldr	r3, [pc, #224]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dd0:	4a36      	ldr	r2, [pc, #216]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005dd2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dd4:	4b35      	ldr	r3, [pc, #212]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	4a33      	ldr	r2, [pc, #204]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005dde:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dec:	461a      	mov	r2, r3
 8005dee:	4b2f      	ldr	r3, [pc, #188]	; (8005eac <USB_HC_StartXfer+0x288>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e04f      	b.n	8005e9e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	78db      	ldrb	r3, [r3, #3]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d14a      	bne.n	8005e9c <USB_HC_StartXfer+0x278>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d046      	beq.n	8005e9c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	79db      	ldrb	r3, [r3, #7]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d830      	bhi.n	8005e78 <USB_HC_StartXfer+0x254>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <USB_HC_StartXfer+0x1f8>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e2d 	.word	0x08005e2d
 8005e20:	08005e51 	.word	0x08005e51
 8005e24:	08005e2d 	.word	0x08005e2d
 8005e28:	08005e51 	.word	0x08005e51
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	3303      	adds	r3, #3
 8005e32:	089b      	lsrs	r3, r3, #2
 8005e34:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e36:	8afa      	ldrh	r2, [r7, #22]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d91c      	bls.n	8005e7c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e4e:	e015      	b.n	8005e7c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	3303      	adds	r3, #3
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e5a:	8afa      	ldrh	r2, [r7, #22]
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d90a      	bls.n	8005e80 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e76:	e003      	b.n	8005e80 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e78:	bf00      	nop
 8005e7a:	e002      	b.n	8005e82 <USB_HC_StartXfer+0x25e>
        break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <USB_HC_StartXfer+0x25e>
        break;
 8005e80:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68d9      	ldr	r1, [r3, #12]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	785a      	ldrb	r2, [r3, #1]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	b298      	uxth	r0, r3
 8005e90:	2300      	movs	r3, #0
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4603      	mov	r3, r0
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff fb90 	bl	80055bc <USB_WritePacket>
  }

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3728      	adds	r7, #40	; 0x28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	1ff80000 	.word	0x1ff80000
 8005eac:	20000b74 	.word	0x20000b74

08005eb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	b29b      	uxth	r3, r3
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	0c9b      	lsrs	r3, r3, #18
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <USB_HC_Halt+0x3a>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d16c      	bne.n	8005fe6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f2a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d143      	bne.n	8005fc0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f56:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f76:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f96:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa4:	d81d      	bhi.n	8005fe2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fbc:	d0ec      	beq.n	8005f98 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fbe:	e080      	b.n	80060c2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fe0:	e06f      	b.n	80060c2 <USB_HC_Halt+0x1f0>
          break;
 8005fe2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fe4:	e06d      	b.n	80060c2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006004:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d143      	bne.n	800609e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	440a      	add	r2, r1
 800602c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006034:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4413      	add	r3, r2
 800603e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	440a      	add	r2, r1
 800604c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006054:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	440a      	add	r2, r1
 800606c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006070:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006074:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006082:	d81d      	bhi.n	80060c0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800609a:	d0ec      	beq.n	8006076 <USB_HC_Halt+0x1a4>
 800609c:	e011      	b.n	80060c2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e000      	b.n	80060c2 <USB_HC_Halt+0x1f0>
          break;
 80060c0:	bf00      	nop
    }
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060e4:	2301      	movs	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	04da      	lsls	r2, r3, #19
 80060ec:	4b15      	ldr	r3, [pc, #84]	; (8006144 <USB_DoPing+0x74>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006100:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006118:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006120:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	461a      	mov	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	1ff80000 	.word	0x1ff80000

08006148 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff f9ab 	bl	80054b4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800615e:	2110      	movs	r1, #16
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff f9e3 	bl	800552c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fa06 	bl	8005578 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	e01f      	b.n	80061b2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006188:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006190:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006198:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	461a      	mov	r2, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	3301      	adds	r3, #1
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b0f      	cmp	r3, #15
 80061b6:	d9dc      	bls.n	8006172 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	e034      	b.n	8006228 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f2:	461a      	mov	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	3301      	adds	r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006204:	d80c      	bhi.n	8006220 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621c:	d0ec      	beq.n	80061f8 <USB_StopHost+0xb0>
 800621e:	e000      	b.n	8006222 <USB_StopHost+0xda>
        break;
 8006220:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3301      	adds	r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b0f      	cmp	r3, #15
 800622c:	d9c7      	bls.n	80061be <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006234:	461a      	mov	r2, r3
 8006236:	f04f 33ff 	mov.w	r3, #4294967295
 800623a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f04f 32ff 	mov.w	r2, #4294967295
 8006242:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff f924 	bl	8005492 <USB_EnableGlobalInt>

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006268:	2302      	movs	r3, #2
 800626a:	e044      	b.n	80062f6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	79fa      	ldrb	r2, [r7, #7]
 8006270:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f841 	bl	800630c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80062b8:	2200      	movs	r2, #0
 80062ba:	2104      	movs	r1, #4
 80062bc:	2010      	movs	r0, #16
 80062be:	f001 fff1 	bl	80082a4 <osMessageQueueNew>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <USBH_Init+0xac>)
 80062cc:	4a0d      	ldr	r2, [pc, #52]	; (8006304 <USBH_Init+0xb0>)
 80062ce:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <USBH_Init+0xac>)
 80062d2:	2280      	movs	r2, #128	; 0x80
 80062d4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <USBH_Init+0xac>)
 80062d8:	2218      	movs	r2, #24
 80062da:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80062dc:	4a08      	ldr	r2, [pc, #32]	; (8006300 <USBH_Init+0xac>)
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	4809      	ldr	r0, [pc, #36]	; (8006308 <USBH_Init+0xb4>)
 80062e2:	f001 fd8f 	bl	8007e04 <osThreadNew>
 80062e6:	4602      	mov	r2, r0
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f005 fb0a 	bl	800b908 <USBH_LL_Init>

  return USBH_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	200056dc 	.word	0x200056dc
 8006304:	0800c654 	.word	0x0800c654
 8006308:	08006f75 	.word	0x08006f75

0800630c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	e009      	b.n	8006332 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	33e0      	adds	r3, #224	; 0xe0
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	2200      	movs	r2, #0
 800632a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b0e      	cmp	r3, #14
 8006336:	d9f2      	bls.n	800631e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e009      	b.n	8006352 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3301      	adds	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006358:	d3f1      	bcc.n	800633e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2240      	movs	r2, #64	; 0x40
 800637e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d016      	beq.n	80063f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10e      	bne.n	80063f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80063d8:	1c59      	adds	r1, r3, #1
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	33de      	adds	r3, #222	; 0xde
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
 80063ee:	e004      	b.n	80063fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80063f0:	2302      	movs	r3, #2
 80063f2:	73fb      	strb	r3, [r7, #15]
 80063f4:	e001      	b.n	80063fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80063f6:	2302      	movs	r3, #2
 80063f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800641e:	78fa      	ldrb	r2, [r7, #3]
 8006420:	429a      	cmp	r2, r3
 8006422:	d204      	bcs.n	800642e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	78fa      	ldrb	r2, [r7, #3]
 8006428:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800642c:	e001      	b.n	8006432 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800642e:	2302      	movs	r3, #2
 8006430:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	4603      	mov	r3, r0
 8006450:	70fb      	strb	r3, [r7, #3]
 8006452:	460b      	mov	r3, r1
 8006454:	70bb      	strb	r3, [r7, #2]
 8006456:	4613      	mov	r3, r2
 8006458:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006468:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800646a:	e025      	b.n	80064b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	221a      	movs	r2, #26
 8006470:	fb02 f303 	mul.w	r3, r2, r3
 8006474:	3308      	adds	r3, #8
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	3302      	adds	r3, #2
 800647c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	795b      	ldrb	r3, [r3, #5]
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	429a      	cmp	r2, r3
 8006486:	d002      	beq.n	800648e <USBH_FindInterface+0x4e>
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	2bff      	cmp	r3, #255	; 0xff
 800648c:	d111      	bne.n	80064b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006492:	78ba      	ldrb	r2, [r7, #2]
 8006494:	429a      	cmp	r2, r3
 8006496:	d002      	beq.n	800649e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006498:	78bb      	ldrb	r3, [r7, #2]
 800649a:	2bff      	cmp	r3, #255	; 0xff
 800649c:	d109      	bne.n	80064b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064a2:	787a      	ldrb	r2, [r7, #1]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d002      	beq.n	80064ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80064a8:	787b      	ldrb	r3, [r7, #1]
 80064aa:	2bff      	cmp	r3, #255	; 0xff
 80064ac:	d101      	bne.n	80064b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	e006      	b.n	80064c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
 80064b4:	3301      	adds	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d9d6      	bls.n	800646c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80064be:	23ff      	movs	r3, #255	; 0xff
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f005 fa53 	bl	800b980 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80064da:	2101      	movs	r1, #1
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f005 fb6a 	bl	800bbb6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af04      	add	r7, sp, #16
 80064f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80064f4:	2302      	movs	r3, #2
 80064f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d102      	bne.n	800650e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2203      	movs	r2, #3
 800650c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b0b      	cmp	r3, #11
 8006516:	f200 823c 	bhi.w	8006992 <USBH_Process+0x4a6>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <USBH_Process+0x34>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006551 	.word	0x08006551
 8006524:	0800659f 	.word	0x0800659f
 8006528:	08006623 	.word	0x08006623
 800652c:	08006911 	.word	0x08006911
 8006530:	08006993 	.word	0x08006993
 8006534:	080066e3 	.word	0x080066e3
 8006538:	0800689b 	.word	0x0800689b
 800653c:	08006735 	.word	0x08006735
 8006540:	08006771 	.word	0x08006771
 8006544:	080067ab 	.word	0x080067ab
 8006548:	080067f3 	.word	0x080067f3
 800654c:	080068f9 	.word	0x080068f9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 821c 	beq.w	8006996 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006564:	20c8      	movs	r0, #200	; 0xc8
 8006566:	f005 fb70 	bl	800bc4a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f005 fa63 	bl	800ba36 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006594:	2300      	movs	r3, #0
 8006596:	2200      	movs	r2, #0
 8006598:	f001 ff0a 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800659c:	e1fb      	b.n	8006996 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d107      	bne.n	80065b8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	e025      	b.n	8006604 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065c2:	d914      	bls.n	80065ee <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80065ca:	3301      	adds	r3, #1
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d903      	bls.n	80065e6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	220d      	movs	r2, #13
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	e00e      	b.n	8006604 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e00a      	b.n	8006604 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065f4:	f103 020a 	add.w	r2, r3, #10
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80065fe:	200a      	movs	r0, #10
 8006600:	f005 fb23 	bl	800bc4a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006618:	2300      	movs	r3, #0
 800661a:	2200      	movs	r2, #0
 800661c:	f001 fec8 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 8006620:	e1c0      	b.n	80069a4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006632:	2104      	movs	r1, #4
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006638:	2064      	movs	r0, #100	; 0x64
 800663a:	f005 fb06 	bl	800bc4a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f005 f9d4 	bl	800b9ec <USBH_LL_GetSpeed>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2205      	movs	r2, #5
 8006652:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006654:	2100      	movs	r1, #0
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 faff 	bl	8007c5a <USBH_AllocPipe>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006664:	2180      	movs	r1, #128	; 0x80
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 faf7 	bl	8007c5a <USBH_AllocPipe>
 800666c:	4603      	mov	r3, r0
 800666e:	461a      	mov	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7919      	ldrb	r1, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006688:	b292      	uxth	r2, r2
 800668a:	9202      	str	r2, [sp, #8]
 800668c:	2200      	movs	r2, #0
 800668e:	9201      	str	r2, [sp, #4]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	4603      	mov	r3, r0
 8006694:	2280      	movs	r2, #128	; 0x80
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fab0 	bl	8007bfc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	7959      	ldrb	r1, [r3, #5]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066b0:	b292      	uxth	r2, r2
 80066b2:	9202      	str	r2, [sp, #8]
 80066b4:	2200      	movs	r2, #0
 80066b6:	9201      	str	r2, [sp, #4]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	4603      	mov	r3, r0
 80066bc:	2200      	movs	r2, #0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fa9c 	bl	8007bfc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80066d8:	2300      	movs	r3, #0
 80066da:	2200      	movs	r2, #0
 80066dc:	f001 fe68 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 80066e0:	e160      	b.n	80069a4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f964 	bl	80069b0 <USBH_HandleEnum>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f040 8152 	bne.w	800699a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006704:	2b01      	cmp	r3, #1
 8006706:	d103      	bne.n	8006710 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2208      	movs	r2, #8
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	e002      	b.n	8006716 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2207      	movs	r2, #7
 8006714:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2205      	movs	r2, #5
 800671a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800672a:	2300      	movs	r3, #0
 800672c:	2200      	movs	r2, #0
 800672e:	f001 fe3f 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006732:	e132      	b.n	800699a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 812f 	beq.w	800699e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006746:	2101      	movs	r1, #1
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2208      	movs	r2, #8
 8006750:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2205      	movs	r2, #5
 8006756:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006766:	2300      	movs	r3, #0
 8006768:	2200      	movs	r2, #0
 800676a:	f001 fe21 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800676e:	e116      	b.n	800699e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006776:	b29b      	uxth	r3, r3
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fcf8 	bl	8007170 <USBH_SetCfg>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d102      	bne.n	800678c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2209      	movs	r2, #9
 800678a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80067a0:	2300      	movs	r3, #0
 80067a2:	2200      	movs	r2, #0
 80067a4:	f001 fe04 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 80067a8:	e0fc      	b.n	80069a4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80067b8:	2101      	movs	r1, #1
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fcfb 	bl	80071b6 <USBH_SetFeature>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	220a      	movs	r2, #10
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e002      	b.n	80067d4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	220a      	movs	r2, #10
 80067d2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80067e8:	2300      	movs	r3, #0
 80067ea:	2200      	movs	r2, #0
 80067ec:	f001 fde0 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 80067f0:	e0d8      	b.n	80069a4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d03f      	beq.n	800687c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006804:	2300      	movs	r3, #0
 8006806:	73fb      	strb	r3, [r7, #15]
 8006808:	e016      	b.n	8006838 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800680a:	7bfa      	ldrb	r2, [r7, #15]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	32de      	adds	r2, #222	; 0xde
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	791a      	ldrb	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800681c:	429a      	cmp	r2, r3
 800681e:	d108      	bne.n	8006832 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006820:	7bfa      	ldrb	r2, [r7, #15]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	32de      	adds	r2, #222	; 0xde
 8006826:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006830:	e005      	b.n	800683e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	3301      	adds	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0e5      	beq.n	800680a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d016      	beq.n	8006876 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2206      	movs	r2, #6
 800685e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006866:	2103      	movs	r1, #3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
 800686c:	e006      	b.n	800687c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	220d      	movs	r2, #13
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e002      	b.n	800687c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	220d      	movs	r2, #13
 800687a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2205      	movs	r2, #5
 8006880:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006890:	2300      	movs	r3, #0
 8006892:	2200      	movs	r2, #0
 8006894:	f001 fd8c 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 8006898:	e084      	b.n	80069a4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d017      	beq.n	80068d4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
 80068b0:	4603      	mov	r3, r0
 80068b2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	220b      	movs	r2, #11
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e00a      	b.n	80068da <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d106      	bne.n	80068da <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	220d      	movs	r2, #13
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e002      	b.n	80068da <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	220d      	movs	r2, #13
 80068d8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2205      	movs	r2, #5
 80068de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068ee:	2300      	movs	r3, #0
 80068f0:	2200      	movs	r2, #0
 80068f2:	f001 fd5d 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 80068f6:	e055      	b.n	80069a4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d04f      	beq.n	80069a2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
      }
      break;
 800690e:	e048      	b.n	80069a2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff fcf7 	bl	800630c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d009      	beq.n	800693c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800694c:	2105      	movs	r1, #5
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	d107      	bne.n	800696e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff fdb0 	bl	80064cc <USBH_Start>
 800696c:	e002      	b.n	8006974 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f005 f806 	bl	800b980 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006988:	2300      	movs	r3, #0
 800698a:	2200      	movs	r2, #0
 800698c:	f001 fd10 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      break;
 8006990:	e008      	b.n	80069a4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006992:	bf00      	nop
 8006994:	e006      	b.n	80069a4 <USBH_Process+0x4b8>
      break;
 8006996:	bf00      	nop
 8006998:	e004      	b.n	80069a4 <USBH_Process+0x4b8>
      break;
 800699a:	bf00      	nop
 800699c:	e002      	b.n	80069a4 <USBH_Process+0x4b8>
    break;
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <USBH_Process+0x4b8>
      break;
 80069a2:	bf00      	nop
  }
  return USBH_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop

080069b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af04      	add	r7, sp, #16
 80069b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80069b8:	2301      	movs	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80069bc:	2301      	movs	r3, #1
 80069be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2b07      	cmp	r3, #7
 80069c6:	f200 8208 	bhi.w	8006dda <USBH_HandleEnum+0x42a>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <USBH_HandleEnum+0x20>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069f1 	.word	0x080069f1
 80069d4:	08006aaf 	.word	0x08006aaf
 80069d8:	08006b19 	.word	0x08006b19
 80069dc:	08006ba7 	.word	0x08006ba7
 80069e0:	08006c11 	.word	0x08006c11
 80069e4:	08006c81 	.word	0x08006c81
 80069e8:	08006d1d 	.word	0x08006d1d
 80069ec:	08006d9b 	.word	0x08006d9b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80069f0:	2108      	movs	r1, #8
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 faec 	bl	8006fd0 <USBH_Get_DevDesc>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d130      	bne.n	8006a64 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7919      	ldrb	r1, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a26:	b292      	uxth	r2, r2
 8006a28:	9202      	str	r2, [sp, #8]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	9201      	str	r2, [sp, #4]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	4603      	mov	r3, r0
 8006a32:	2280      	movs	r2, #128	; 0x80
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 f8e1 	bl	8007bfc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7959      	ldrb	r1, [r3, #5]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a4e:	b292      	uxth	r2, r2
 8006a50:	9202      	str	r2, [sp, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	9201      	str	r2, [sp, #4]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f8cd 	bl	8007bfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a62:	e1bc      	b.n	8006dde <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	f040 81b9 	bne.w	8006dde <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a72:	3301      	adds	r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d903      	bls.n	8006a8e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	220d      	movs	r2, #13
 8006a8a:	701a      	strb	r2, [r3, #0]
      break;
 8006a8c:	e1a7      	b.n	8006dde <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	795b      	ldrb	r3, [r3, #5]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f901 	bl	8007c9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	791b      	ldrb	r3, [r3, #4]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 f8fb 	bl	8007c9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
      break;
 8006aac:	e197      	b.n	8006dde <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006aae:	2112      	movs	r1, #18
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa8d 	bl	8006fd0 <USBH_Get_DevDesc>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ac6:	e18c      	b.n	8006de2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	f040 8189 	bne.w	8006de2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d903      	bls.n	8006af2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	220d      	movs	r2, #13
 8006aee:	701a      	strb	r2, [r3, #0]
      break;
 8006af0:	e177      	b.n	8006de2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	795b      	ldrb	r3, [r3, #5]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f8cf 	bl	8007c9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	791b      	ldrb	r3, [r3, #4]
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 f8c9 	bl	8007c9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]
      break;
 8006b16:	e164      	b.n	8006de2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006b18:	2101      	movs	r1, #1
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fb04 	bl	8007128 <USBH_SetAddress>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d132      	bne.n	8006b90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006b2a:	2002      	movs	r0, #2
 8006b2c:	f005 f88d 	bl	800bc4a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7919      	ldrb	r1, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b52:	b292      	uxth	r2, r2
 8006b54:	9202      	str	r2, [sp, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	9201      	str	r2, [sp, #4]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2280      	movs	r2, #128	; 0x80
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f84b 	bl	8007bfc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	7959      	ldrb	r1, [r3, #5]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	9202      	str	r2, [sp, #8]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	9201      	str	r2, [sp, #4]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4603      	mov	r3, r0
 8006b86:	2200      	movs	r2, #0
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 f837 	bl	8007bfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b8e:	e12a      	b.n	8006de6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	f040 8127 	bne.w	8006de6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	220d      	movs	r2, #13
 8006b9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	705a      	strb	r2, [r3, #1]
      break;
 8006ba4:	e11f      	b.n	8006de6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006ba6:	2109      	movs	r1, #9
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fa39 	bl	8007020 <USBH_Get_CfgDesc>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d103      	bne.n	8006bc0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006bbe:	e114      	b.n	8006dea <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	f040 8111 	bne.w	8006dea <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d903      	bls.n	8006bea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	220d      	movs	r2, #13
 8006be6:	701a      	strb	r2, [r3, #0]
      break;
 8006be8:	e0ff      	b.n	8006dea <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	795b      	ldrb	r3, [r3, #5]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f853 	bl	8007c9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	791b      	ldrb	r3, [r3, #4]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f84d 	bl	8007c9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
      break;
 8006c0e:	e0ec      	b.n	8006dea <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa01 	bl	8007020 <USBH_Get_CfgDesc>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2205      	movs	r2, #5
 8006c2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c2e:	e0de      	b.n	8006dee <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	f040 80db 	bne.w	8006dee <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c3e:	3301      	adds	r3, #1
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d903      	bls.n	8006c5a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	220d      	movs	r2, #13
 8006c56:	701a      	strb	r2, [r3, #0]
      break;
 8006c58:	e0c9      	b.n	8006dee <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	795b      	ldrb	r3, [r3, #5]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 f81b 	bl	8007c9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	791b      	ldrb	r3, [r3, #4]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 f815 	bl	8007c9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
      break;
 8006c7e:	e0b6      	b.n	8006dee <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d036      	beq.n	8006cf8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c96:	23ff      	movs	r3, #255	; 0xff
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9e5 	bl	8007068 <USBH_Get_StringDesc>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d111      	bne.n	8006ccc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2206      	movs	r2, #6
 8006cac:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f001 fb73 	bl	80083b0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006cca:	e092      	b.n	8006df2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	f040 808f 	bne.w	8006df2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2206      	movs	r2, #6
 8006cd8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2205      	movs	r2, #5
 8006cde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f001 fb5d 	bl	80083b0 <osMessageQueuePut>
      break;
 8006cf6:	e07c      	b.n	8006df2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2206      	movs	r2, #6
 8006cfc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2205      	movs	r2, #5
 8006d02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d12:	2300      	movs	r3, #0
 8006d14:	2200      	movs	r2, #0
 8006d16:	f001 fb4b 	bl	80083b0 <osMessageQueuePut>
      break;
 8006d1a:	e06a      	b.n	8006df2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d027      	beq.n	8006d76 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d32:	23ff      	movs	r3, #255	; 0xff
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f997 	bl	8007068 <USBH_Get_StringDesc>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2207      	movs	r2, #7
 8006d48:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006d4a:	e054      	b.n	8006df6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d151      	bne.n	8006df6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2207      	movs	r2, #7
 8006d56:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2205      	movs	r2, #5
 8006d5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f001 fb1e 	bl	80083b0 <osMessageQueuePut>
      break;
 8006d74:	e03f      	b.n	8006df6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2207      	movs	r2, #7
 8006d7a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2205      	movs	r2, #5
 8006d80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d90:	2300      	movs	r3, #0
 8006d92:	2200      	movs	r2, #0
 8006d94:	f001 fb0c 	bl	80083b0 <osMessageQueuePut>
      break;
 8006d98:	e02d      	b.n	8006df6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d017      	beq.n	8006dd4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006db0:	23ff      	movs	r3, #255	; 0xff
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f958 	bl	8007068 <USBH_Get_StringDesc>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006dc6:	e018      	b.n	8006dfa <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d115      	bne.n	8006dfa <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd2:	e012      	b.n	8006dfa <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd8:	e00f      	b.n	8006dfa <USBH_HandleEnum+0x44a>

    default:
      break;
 8006dda:	bf00      	nop
 8006ddc:	e00e      	b.n	8006dfc <USBH_HandleEnum+0x44c>
      break;
 8006dde:	bf00      	nop
 8006de0:	e00c      	b.n	8006dfc <USBH_HandleEnum+0x44c>
      break;
 8006de2:	bf00      	nop
 8006de4:	e00a      	b.n	8006dfc <USBH_HandleEnum+0x44c>
      break;
 8006de6:	bf00      	nop
 8006de8:	e008      	b.n	8006dfc <USBH_HandleEnum+0x44c>
      break;
 8006dea:	bf00      	nop
 8006dec:	e006      	b.n	8006dfc <USBH_HandleEnum+0x44c>
      break;
 8006dee:	bf00      	nop
 8006df0:	e004      	b.n	8006dfc <USBH_HandleEnum+0x44c>
      break;
 8006df2:	bf00      	nop
 8006df4:	e002      	b.n	8006dfc <USBH_HandleEnum+0x44c>
      break;
 8006df6:	bf00      	nop
 8006df8:	e000      	b.n	8006dfc <USBH_HandleEnum+0x44c>
      break;
 8006dfa:	bf00      	nop
  }
  return Status;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop

08006e08 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f804 	bl	8006e4a <USBH_HandleSof>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b0b      	cmp	r3, #11
 8006e5a:	d10a      	bne.n	8006e72 <USBH_HandleSof+0x28>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
  }
}
 8006e72:	bf00      	nop
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f001 fa85 	bl	80083b0 <osMessageQueuePut>
#endif
#endif

  return;
 8006ea6:	bf00      	nop
}
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006ebe:	bf00      	nop
}
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006efe:	2300      	movs	r3, #0
 8006f00:	2200      	movs	r2, #0
 8006f02:	f001 fa55 	bl	80083b0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f004 fd40 	bl	800b9b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fead 	bl	8007c9c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	795b      	ldrb	r3, [r3, #5]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fea7 	bl	8007c9c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f62:	2300      	movs	r3, #0
 8006f64:	2200      	movs	r2, #0
 8006f66:	f001 fa23 	bl	80083b0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8006f88:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f001 fa83 	bl	8008498 <osMessageQueueGet>
 8006f92:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff faa6 	bl	80064ec <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8006fa0:	e7ec      	b.n	8006f7c <USBH_Process_OS+0x8>

08006fa2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f001 f9f5 	bl	80083b0 <osMessageQueuePut>
#endif

  return USBH_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fee:	2100      	movs	r1, #0
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f864 	bl	80070be <USBH_GetDescriptor>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	b292      	uxth	r2, r2
 8007010:	4619      	mov	r1, r3
 8007012:	f000 f918 	bl	8007246 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af02      	add	r7, sp, #8
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	331c      	adds	r3, #28
 8007030:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007032:	887b      	ldrh	r3, [r7, #2]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f83d 	bl	80070be <USBH_GetDescriptor>
 8007044:	4603      	mov	r3, r0
 8007046:	72fb      	strb	r3, [r7, #11]
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d107      	bne.n	800705e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007054:	887a      	ldrh	r2, [r7, #2]
 8007056:	68f9      	ldr	r1, [r7, #12]
 8007058:	4618      	mov	r0, r3
 800705a:	f000 f964 	bl	8007326 <USBH_ParseCfgDesc>
  }

  return status;
 800705e:	7afb      	ldrb	r3, [r7, #11]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af02      	add	r7, sp, #8
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	461a      	mov	r2, r3
 8007074:	460b      	mov	r3, r1
 8007076:	72fb      	strb	r3, [r7, #11]
 8007078:	4613      	mov	r3, r2
 800707a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	b29b      	uxth	r3, r3
 8007080:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007084:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800708c:	893b      	ldrh	r3, [r7, #8]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	460b      	mov	r3, r1
 8007092:	2100      	movs	r1, #0
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f812 	bl	80070be <USBH_GetDescriptor>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d107      	bne.n	80070b4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070aa:	893a      	ldrh	r2, [r7, #8]
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fa37 	bl	8007522 <USBH_ParseStringDesc>
  }

  return status;
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	72fb      	strb	r3, [r7, #11]
 80070cc:	4613      	mov	r3, r2
 80070ce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	789b      	ldrb	r3, [r3, #2]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d11c      	bne.n	8007112 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2206      	movs	r2, #6
 80070e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	893a      	ldrh	r2, [r7, #8]
 80070ee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80070f0:	893b      	ldrh	r3, [r7, #8]
 80070f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070fa:	d104      	bne.n	8007106 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f240 4209 	movw	r2, #1033	; 0x409
 8007102:	829a      	strh	r2, [r3, #20]
 8007104:	e002      	b.n	800710c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8b3a      	ldrh	r2, [r7, #24]
 8007110:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007112:	8b3b      	ldrh	r3, [r7, #24]
 8007114:	461a      	mov	r2, r3
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 fa50 	bl	80075be <USBH_CtlReq>
 800711e:	4603      	mov	r3, r0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	789b      	ldrb	r3, [r3, #2]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d10f      	bne.n	800715c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2205      	movs	r2, #5
 8007146:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	b29a      	uxth	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800715c:	2200      	movs	r2, #0
 800715e:	2100      	movs	r1, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fa2c 	bl	80075be <USBH_CtlReq>
 8007166:	4603      	mov	r3, r0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	789b      	ldrb	r3, [r3, #2]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10e      	bne.n	80071a2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2209      	movs	r2, #9
 800718e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	887a      	ldrh	r2, [r7, #2]
 8007194:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80071a2:	2200      	movs	r2, #0
 80071a4:	2100      	movs	r1, #0
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa09 	bl	80075be <USBH_CtlReq>
 80071ac:	4603      	mov	r3, r0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	789b      	ldrb	r3, [r3, #2]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d10f      	bne.n	80071ea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2203      	movs	r2, #3
 80071d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80071ea:	2200      	movs	r2, #0
 80071ec:	2100      	movs	r1, #0
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9e5 	bl	80075be <USBH_CtlReq>
 80071f4:	4603      	mov	r3, r0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	789b      	ldrb	r3, [r3, #2]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d10f      	bne.n	8007232 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2202      	movs	r2, #2
 8007216:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	b29a      	uxth	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9c1 	bl	80075be <USBH_CtlReq>
 800723c:	4603      	mov	r3, r0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	4613      	mov	r3, r2
 8007252:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	781a      	ldrb	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	785a      	ldrb	r2, [r3, #1]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	3302      	adds	r3, #2
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b29a      	uxth	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3303      	adds	r3, #3
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	b29b      	uxth	r3, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	791a      	ldrb	r2, [r3, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	795a      	ldrb	r2, [r3, #5]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	799a      	ldrb	r2, [r3, #6]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	79da      	ldrb	r2, [r3, #7]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	2b08      	cmp	r3, #8
 80072a4:	d939      	bls.n	800731a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3308      	adds	r3, #8
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	3309      	adds	r3, #9
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4313      	orrs	r3, r2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	330a      	adds	r3, #10
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	330b      	adds	r3, #11
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	4313      	orrs	r3, r2
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	330c      	adds	r3, #12
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	330d      	adds	r3, #13
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	4313      	orrs	r3, r2
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	7b9a      	ldrb	r2, [r3, #14]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	7bda      	ldrb	r2, [r3, #15]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7c1a      	ldrb	r2, [r3, #16]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	7c5a      	ldrb	r2, [r3, #17]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	745a      	strb	r2, [r3, #17]
  }
}
 800731a:	bf00      	nop
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b08a      	sub	sp, #40	; 0x28
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	4613      	mov	r3, r2
 8007332:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	785a      	ldrb	r2, [r3, #1]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	3302      	adds	r3, #2
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b29a      	uxth	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	3303      	adds	r3, #3
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	b29b      	uxth	r3, r3
 800736c:	4313      	orrs	r3, r2
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	791a      	ldrb	r2, [r3, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	795a      	ldrb	r2, [r3, #5]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	799a      	ldrb	r2, [r3, #6]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	79da      	ldrb	r2, [r3, #7]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	7a1a      	ldrb	r2, [r3, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	2b09      	cmp	r3, #9
 80073a0:	d95f      	bls.n	8007462 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80073a2:	2309      	movs	r3, #9
 80073a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073aa:	e051      	b.n	8007450 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80073ac:	f107 0316 	add.w	r3, r7, #22
 80073b0:	4619      	mov	r1, r3
 80073b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073b4:	f000 f8e8 	bl	8007588 <USBH_GetNextDesc>
 80073b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	785b      	ldrb	r3, [r3, #1]
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d146      	bne.n	8007450 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80073c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073c6:	221a      	movs	r2, #26
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	3308      	adds	r3, #8
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	3302      	adds	r3, #2
 80073d4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80073d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073d8:	69f8      	ldr	r0, [r7, #28]
 80073da:	f000 f846 	bl	800746a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80073e8:	e022      	b.n	8007430 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80073ea:	f107 0316 	add.w	r3, r7, #22
 80073ee:	4619      	mov	r1, r3
 80073f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073f2:	f000 f8c9 	bl	8007588 <USBH_GetNextDesc>
 80073f6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b05      	cmp	r3, #5
 80073fe:	d117      	bne.n	8007430 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007404:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007408:	3201      	adds	r2, #1
 800740a:	00d2      	lsls	r2, r2, #3
 800740c:	211a      	movs	r1, #26
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	4413      	add	r3, r2
 8007414:	3308      	adds	r3, #8
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	3304      	adds	r3, #4
 800741c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800741e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007420:	69b8      	ldr	r0, [r7, #24]
 8007422:	f000 f851 	bl	80074c8 <USBH_ParseEPDesc>
            ep_ix++;
 8007426:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800742a:	3301      	adds	r3, #1
 800742c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	791b      	ldrb	r3, [r3, #4]
 8007434:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007438:	429a      	cmp	r2, r3
 800743a:	d204      	bcs.n	8007446 <USBH_ParseCfgDesc+0x120>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	885a      	ldrh	r2, [r3, #2]
 8007440:	8afb      	ldrh	r3, [r7, #22]
 8007442:	429a      	cmp	r2, r3
 8007444:	d8d1      	bhi.n	80073ea <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800744a:	3301      	adds	r3, #1
 800744c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007454:	2b01      	cmp	r3, #1
 8007456:	d804      	bhi.n	8007462 <USBH_ParseCfgDesc+0x13c>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	885a      	ldrh	r2, [r3, #2]
 800745c:	8afb      	ldrh	r3, [r7, #22]
 800745e:	429a      	cmp	r2, r3
 8007460:	d8a4      	bhi.n	80073ac <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007462:	bf00      	nop
 8007464:	3728      	adds	r7, #40	; 0x28
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781a      	ldrb	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	785a      	ldrb	r2, [r3, #1]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	789a      	ldrb	r2, [r3, #2]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	78da      	ldrb	r2, [r3, #3]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	791a      	ldrb	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	795a      	ldrb	r2, [r3, #5]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	799a      	ldrb	r2, [r3, #6]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	79da      	ldrb	r2, [r3, #7]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	7a1a      	ldrb	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	721a      	strb	r2, [r3, #8]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	785a      	ldrb	r2, [r3, #1]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	789a      	ldrb	r2, [r3, #2]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	78da      	ldrb	r2, [r3, #3]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	3304      	adds	r3, #4
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	3305      	adds	r3, #5
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	b29b      	uxth	r3, r3
 8007506:	4313      	orrs	r3, r2
 8007508:	b29a      	uxth	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	799a      	ldrb	r2, [r3, #6]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	719a      	strb	r2, [r3, #6]
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007522:	b480      	push	{r7}
 8007524:	b087      	sub	sp, #28
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	4613      	mov	r3, r2
 800752e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3301      	adds	r3, #1
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d120      	bne.n	800757c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	1e9a      	subs	r2, r3, #2
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	4293      	cmp	r3, r2
 8007544:	bf28      	it	cs
 8007546:	4613      	movcs	r3, r2
 8007548:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3302      	adds	r3, #2
 800754e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007550:	2300      	movs	r3, #0
 8007552:	82fb      	strh	r3, [r7, #22]
 8007554:	e00b      	b.n	800756e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007556:	8afb      	ldrh	r3, [r7, #22]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	3301      	adds	r3, #1
 8007566:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007568:	8afb      	ldrh	r3, [r7, #22]
 800756a:	3302      	adds	r3, #2
 800756c:	82fb      	strh	r3, [r7, #22]
 800756e:	8afa      	ldrh	r2, [r7, #22]
 8007570:	8abb      	ldrh	r3, [r7, #20]
 8007572:	429a      	cmp	r2, r3
 8007574:	d3ef      	bcc.n	8007556 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
  }
}
 800757c:	bf00      	nop
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	4413      	add	r3, r2
 800759e:	b29a      	uxth	r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075b0:	68fb      	ldr	r3, [r7, #12]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	4613      	mov	r3, r2
 80075ca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	789b      	ldrb	r3, [r3, #2]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d002      	beq.n	80075de <USBH_CtlReq+0x20>
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d01d      	beq.n	8007618 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80075dc:	e043      	b.n	8007666 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	88fa      	ldrh	r2, [r7, #6]
 80075e8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2202      	movs	r2, #2
 80075f4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2203      	movs	r2, #3
 80075fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800760e:	2300      	movs	r3, #0
 8007610:	2200      	movs	r2, #0
 8007612:	f000 fecd 	bl	80083b0 <osMessageQueuePut>
      break;
 8007616:	e026      	b.n	8007666 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f829 	bl	8007670 <USBH_HandleControl>
 800761e:	4603      	mov	r3, r0
 8007620:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <USBH_CtlReq+0x70>
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d106      	bne.n	800763c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	761a      	strb	r2, [r3, #24]
 800763a:	e005      	b.n	8007648 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d102      	bne.n	8007648 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2203      	movs	r2, #3
 800764c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800765c:	2300      	movs	r3, #0
 800765e:	2200      	movs	r2, #0
 8007660:	f000 fea6 	bl	80083b0 <osMessageQueuePut>
      break;
 8007664:	bf00      	nop
  }
  return status;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af02      	add	r7, sp, #8
 8007676:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007678:	2301      	movs	r3, #1
 800767a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800767c:	2300      	movs	r3, #0
 800767e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7e1b      	ldrb	r3, [r3, #24]
 8007684:	3b01      	subs	r3, #1
 8007686:	2b0a      	cmp	r3, #10
 8007688:	f200 822b 	bhi.w	8007ae2 <USBH_HandleControl+0x472>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <USBH_HandleControl+0x24>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076c1 	.word	0x080076c1
 8007698:	080076db 	.word	0x080076db
 800769c:	0800777d 	.word	0x0800777d
 80076a0:	080077a3 	.word	0x080077a3
 80076a4:	0800782f 	.word	0x0800782f
 80076a8:	0800785b 	.word	0x0800785b
 80076ac:	0800791d 	.word	0x0800791d
 80076b0:	0800793f 	.word	0x0800793f
 80076b4:	080079d1 	.word	0x080079d1
 80076b8:	080079f9 	.word	0x080079f9
 80076bc:	08007a8b 	.word	0x08007a8b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f103 0110 	add.w	r1, r3, #16
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	795b      	ldrb	r3, [r3, #5]
 80076ca:	461a      	mov	r2, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fa19 	bl	8007b04 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2202      	movs	r2, #2
 80076d6:	761a      	strb	r2, [r3, #24]
      break;
 80076d8:	e20e      	b.n	8007af8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	795b      	ldrb	r3, [r3, #5]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f004 fa55 	bl	800bb90 <USBH_LL_GetURBState>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d12c      	bne.n	800774a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	7c1b      	ldrb	r3, [r3, #16]
 80076f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8adb      	ldrh	r3, [r3, #22]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007702:	7b7b      	ldrb	r3, [r7, #13]
 8007704:	2b80      	cmp	r3, #128	; 0x80
 8007706:	d103      	bne.n	8007710 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2203      	movs	r2, #3
 800770c:	761a      	strb	r2, [r3, #24]
 800770e:	e00d      	b.n	800772c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2205      	movs	r2, #5
 8007714:	761a      	strb	r2, [r3, #24]
 8007716:	e009      	b.n	800772c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007718:	7b7b      	ldrb	r3, [r7, #13]
 800771a:	2b80      	cmp	r3, #128	; 0x80
 800771c:	d103      	bne.n	8007726 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2209      	movs	r2, #9
 8007722:	761a      	strb	r2, [r3, #24]
 8007724:	e002      	b.n	800772c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2207      	movs	r2, #7
 800772a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2203      	movs	r2, #3
 8007730:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007740:	2300      	movs	r3, #0
 8007742:	2200      	movs	r2, #0
 8007744:	f000 fe34 	bl	80083b0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007748:	e1cd      	b.n	8007ae6 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b04      	cmp	r3, #4
 800774e:	d003      	beq.n	8007758 <USBH_HandleControl+0xe8>
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b02      	cmp	r3, #2
 8007754:	f040 81c7 	bne.w	8007ae6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	220b      	movs	r2, #11
 800775c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2203      	movs	r2, #3
 8007762:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007772:	2300      	movs	r3, #0
 8007774:	2200      	movs	r2, #0
 8007776:	f000 fe1b 	bl	80083b0 <osMessageQueuePut>
      break;
 800777a:	e1b4      	b.n	8007ae6 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007782:	b29a      	uxth	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6899      	ldr	r1, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	899a      	ldrh	r2, [r3, #12]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	791b      	ldrb	r3, [r3, #4]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f9f4 	bl	8007b82 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2204      	movs	r2, #4
 800779e:	761a      	strb	r2, [r3, #24]
      break;
 80077a0:	e1aa      	b.n	8007af8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	791b      	ldrb	r3, [r3, #4]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f004 f9f1 	bl	800bb90 <USBH_LL_GetURBState>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d110      	bne.n	80077da <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2209      	movs	r2, #9
 80077bc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2203      	movs	r2, #3
 80077c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80077d2:	2300      	movs	r3, #0
 80077d4:	2200      	movs	r2, #0
 80077d6:	f000 fdeb 	bl	80083b0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b05      	cmp	r3, #5
 80077de:	d110      	bne.n	8007802 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80077e0:	2303      	movs	r3, #3
 80077e2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2203      	movs	r2, #3
 80077e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80077f8:	2300      	movs	r3, #0
 80077fa:	2200      	movs	r2, #0
 80077fc:	f000 fdd8 	bl	80083b0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007800:	e173      	b.n	8007aea <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b04      	cmp	r3, #4
 8007806:	f040 8170 	bne.w	8007aea <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	220b      	movs	r2, #11
 800780e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2203      	movs	r2, #3
 8007814:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007824:	2300      	movs	r3, #0
 8007826:	2200      	movs	r2, #0
 8007828:	f000 fdc2 	bl	80083b0 <osMessageQueuePut>
      break;
 800782c:	e15d      	b.n	8007aea <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6899      	ldr	r1, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	899a      	ldrh	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	7958      	ldrb	r0, [r3, #5]
 800783a:	2301      	movs	r3, #1
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4603      	mov	r3, r0
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f979 	bl	8007b38 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800784c:	b29a      	uxth	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2206      	movs	r2, #6
 8007856:	761a      	strb	r2, [r3, #24]
      break;
 8007858:	e14e      	b.n	8007af8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	795b      	ldrb	r3, [r3, #5]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f004 f995 	bl	800bb90 <USBH_LL_GetURBState>
 8007866:	4603      	mov	r3, r0
 8007868:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d111      	bne.n	8007894 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2207      	movs	r2, #7
 8007874:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2203      	movs	r2, #3
 800787a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800788a:	2300      	movs	r3, #0
 800788c:	2200      	movs	r2, #0
 800788e:	f000 fd8f 	bl	80083b0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007892:	e12c      	b.n	8007aee <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b05      	cmp	r3, #5
 8007898:	d113      	bne.n	80078c2 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	220c      	movs	r2, #12
 800789e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078a0:	2303      	movs	r3, #3
 80078a2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2203      	movs	r2, #3
 80078a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078b8:	2300      	movs	r3, #0
 80078ba:	2200      	movs	r2, #0
 80078bc:	f000 fd78 	bl	80083b0 <osMessageQueuePut>
      break;
 80078c0:	e115      	b.n	8007aee <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d111      	bne.n	80078ec <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2205      	movs	r2, #5
 80078cc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2203      	movs	r2, #3
 80078d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078e2:	2300      	movs	r3, #0
 80078e4:	2200      	movs	r2, #0
 80078e6:	f000 fd63 	bl	80083b0 <osMessageQueuePut>
      break;
 80078ea:	e100      	b.n	8007aee <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	f040 80fd 	bne.w	8007aee <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	220b      	movs	r2, #11
 80078f8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80078fa:	2302      	movs	r3, #2
 80078fc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2203      	movs	r2, #3
 8007902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007912:	2300      	movs	r3, #0
 8007914:	2200      	movs	r2, #0
 8007916:	f000 fd4b 	bl	80083b0 <osMessageQueuePut>
      break;
 800791a:	e0e8      	b.n	8007aee <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	791b      	ldrb	r3, [r3, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f92c 	bl	8007b82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2208      	movs	r2, #8
 800793a:	761a      	strb	r2, [r3, #24]

      break;
 800793c:	e0dc      	b.n	8007af8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	791b      	ldrb	r3, [r3, #4]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f004 f923 	bl	800bb90 <USBH_LL_GetURBState>
 800794a:	4603      	mov	r3, r0
 800794c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d113      	bne.n	800797c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	220d      	movs	r2, #13
 8007958:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2203      	movs	r2, #3
 8007962:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007972:	2300      	movs	r3, #0
 8007974:	2200      	movs	r2, #0
 8007976:	f000 fd1b 	bl	80083b0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800797a:	e0ba      	b.n	8007af2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d111      	bne.n	80079a6 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	220b      	movs	r2, #11
 8007986:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2203      	movs	r2, #3
 800798c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800799c:	2300      	movs	r3, #0
 800799e:	2200      	movs	r2, #0
 80079a0:	f000 fd06 	bl	80083b0 <osMessageQueuePut>
      break;
 80079a4:	e0a5      	b.n	8007af2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b05      	cmp	r3, #5
 80079aa:	f040 80a2 	bne.w	8007af2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80079ae:	2303      	movs	r3, #3
 80079b0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2203      	movs	r2, #3
 80079b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80079c6:	2300      	movs	r3, #0
 80079c8:	2200      	movs	r2, #0
 80079ca:	f000 fcf1 	bl	80083b0 <osMessageQueuePut>
      break;
 80079ce:	e090      	b.n	8007af2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	795a      	ldrb	r2, [r3, #5]
 80079d4:	2301      	movs	r3, #1
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	4613      	mov	r3, r2
 80079da:	2200      	movs	r2, #0
 80079dc:	2100      	movs	r1, #0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f8aa 	bl	8007b38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	220a      	movs	r2, #10
 80079f4:	761a      	strb	r2, [r3, #24]
      break;
 80079f6:	e07f      	b.n	8007af8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	795b      	ldrb	r3, [r3, #5]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f004 f8c6 	bl	800bb90 <USBH_LL_GetURBState>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d113      	bne.n	8007a36 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	220d      	movs	r2, #13
 8007a16:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f000 fcbe 	bl	80083b0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a34:	e05f      	b.n	8007af6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d111      	bne.n	8007a60 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2209      	movs	r2, #9
 8007a40:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2203      	movs	r2, #3
 8007a46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a56:	2300      	movs	r3, #0
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f000 fca9 	bl	80083b0 <osMessageQueuePut>
      break;
 8007a5e:	e04a      	b.n	8007af6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d147      	bne.n	8007af6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	220b      	movs	r2, #11
 8007a6a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2203      	movs	r2, #3
 8007a70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a80:	2300      	movs	r3, #0
 8007a82:	2200      	movs	r2, #0
 8007a84:	f000 fc94 	bl	80083b0 <osMessageQueuePut>
      break;
 8007a88:	e035      	b.n	8007af6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7e5b      	ldrb	r3, [r3, #25]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	765a      	strb	r2, [r3, #25]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	7e5b      	ldrb	r3, [r3, #25]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d806      	bhi.n	8007aac <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007aaa:	e025      	b.n	8007af8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ab2:	2106      	movs	r1, #6
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	795b      	ldrb	r3, [r3, #5]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f8e9 	bl	8007c9c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	791b      	ldrb	r3, [r3, #4]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f8e3 	bl	8007c9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007adc:	2302      	movs	r3, #2
 8007ade:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae0:	e00a      	b.n	8007af8 <USBH_HandleControl+0x488>

    default:
      break;
 8007ae2:	bf00      	nop
 8007ae4:	e008      	b.n	8007af8 <USBH_HandleControl+0x488>
      break;
 8007ae6:	bf00      	nop
 8007ae8:	e006      	b.n	8007af8 <USBH_HandleControl+0x488>
      break;
 8007aea:	bf00      	nop
 8007aec:	e004      	b.n	8007af8 <USBH_HandleControl+0x488>
      break;
 8007aee:	bf00      	nop
 8007af0:	e002      	b.n	8007af8 <USBH_HandleControl+0x488>
      break;
 8007af2:	bf00      	nop
 8007af4:	e000      	b.n	8007af8 <USBH_HandleControl+0x488>
      break;
 8007af6:	bf00      	nop
  }

  return status;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop

08007b04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af04      	add	r7, sp, #16
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b12:	79f9      	ldrb	r1, [r7, #7]
 8007b14:	2300      	movs	r3, #0
 8007b16:	9303      	str	r3, [sp, #12]
 8007b18:	2308      	movs	r3, #8
 8007b1a:	9302      	str	r3, [sp, #8]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	2300      	movs	r3, #0
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	2300      	movs	r3, #0
 8007b26:	2200      	movs	r2, #0
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f004 f800 	bl	800bb2e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af04      	add	r7, sp, #16
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4611      	mov	r1, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	460b      	mov	r3, r1
 8007b48:	80fb      	strh	r3, [r7, #6]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b5c:	7979      	ldrb	r1, [r7, #5]
 8007b5e:	7e3b      	ldrb	r3, [r7, #24]
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	9302      	str	r3, [sp, #8]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2200      	movs	r2, #0
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f003 ffdb 	bl	800bb2e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b088      	sub	sp, #32
 8007b86:	af04      	add	r7, sp, #16
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	461a      	mov	r2, r3
 8007b90:	460b      	mov	r3, r1
 8007b92:	80fb      	strh	r3, [r7, #6]
 8007b94:	4613      	mov	r3, r2
 8007b96:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b98:	7979      	ldrb	r1, [r7, #5]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9303      	str	r3, [sp, #12]
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	9302      	str	r3, [sp, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	2300      	movs	r3, #0
 8007bac:	2201      	movs	r2, #1
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f003 ffbd 	bl	800bb2e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007bb4:	2300      	movs	r3, #0

}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b088      	sub	sp, #32
 8007bc2:	af04      	add	r7, sp, #16
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	461a      	mov	r2, r3
 8007bcc:	460b      	mov	r3, r1
 8007bce:	71fb      	strb	r3, [r7, #7]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	79b9      	ldrb	r1, [r7, #6]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	9203      	str	r2, [sp, #12]
 8007bde:	9302      	str	r3, [sp, #8]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	2301      	movs	r3, #1
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	2303      	movs	r3, #3
 8007bea:	2201      	movs	r2, #1
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f003 ff9e 	bl	800bb2e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af04      	add	r7, sp, #16
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	4608      	mov	r0, r1
 8007c06:	4611      	mov	r1, r2
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	70fb      	strb	r3, [r7, #3]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70bb      	strb	r3, [r7, #2]
 8007c12:	4613      	mov	r3, r2
 8007c14:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c16:	7878      	ldrb	r0, [r7, #1]
 8007c18:	78ba      	ldrb	r2, [r7, #2]
 8007c1a:	78f9      	ldrb	r1, [r7, #3]
 8007c1c:	8b3b      	ldrh	r3, [r7, #24]
 8007c1e:	9302      	str	r3, [sp, #8]
 8007c20:	7d3b      	ldrb	r3, [r7, #20]
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	7c3b      	ldrb	r3, [r7, #16]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	4603      	mov	r3, r0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f003 ff31 	bl	800ba92 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f003 ff50 	bl	800baf0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f836 	bl	8007cd8 <USBH_GetFreePipe>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c70:	89fb      	ldrh	r3, [r7, #14]
 8007c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00a      	beq.n	8007c90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	89fb      	ldrh	r3, [r7, #14]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	33e0      	adds	r3, #224	; 0xe0
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c90:	89fb      	ldrh	r3, [r7, #14]
 8007c92:	b2db      	uxtb	r3, r3
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	2b0a      	cmp	r3, #10
 8007cac:	d80d      	bhi.n	8007cca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	33e0      	adds	r3, #224	; 0xe0
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	33e0      	adds	r3, #224	; 0xe0
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
 8007ce8:	e00f      	b.n	8007d0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	33e0      	adds	r3, #224	; 0xe0
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	e007      	b.n	8007d14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	3301      	adds	r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b0a      	cmp	r3, #10
 8007d0e:	d9ec      	bls.n	8007cea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007d24:	bf00      	nop
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
	...

08007d30 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d36:	f3ef 8305 	mrs	r3, IPSR
 8007d3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10f      	bne.n	8007d62 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d42:	f3ef 8310 	mrs	r3, PRIMASK
 8007d46:	607b      	str	r3, [r7, #4]
  return(result);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d52:	603b      	str	r3, [r7, #0]
  return(result);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <osKernelInitialize+0x3a>
 8007d5a:	4b0e      	ldr	r3, [pc, #56]	; (8007d94 <osKernelInitialize+0x64>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d103      	bne.n	8007d6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007d62:	f06f 0305 	mvn.w	r3, #5
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e00c      	b.n	8007d84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <osKernelInitialize+0x64>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d105      	bne.n	8007d7e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d72:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <osKernelInitialize+0x64>)
 8007d74:	2201      	movs	r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e002      	b.n	8007d84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d84:	68fb      	ldr	r3, [r7, #12]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000b78 	.word	0x20000b78

08007d98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d9e:	f3ef 8305 	mrs	r3, IPSR
 8007da2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007da4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10f      	bne.n	8007dca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007daa:	f3ef 8310 	mrs	r3, PRIMASK
 8007dae:	607b      	str	r3, [r7, #4]
  return(result);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d105      	bne.n	8007dc2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007db6:	f3ef 8311 	mrs	r3, BASEPRI
 8007dba:	603b      	str	r3, [r7, #0]
  return(result);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <osKernelStart+0x3a>
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <osKernelStart+0x68>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d103      	bne.n	8007dd2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007dca:	f06f 0305 	mvn.w	r3, #5
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	e010      	b.n	8007df4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007dd2:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <osKernelStart+0x68>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d109      	bne.n	8007dee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007dda:	f7ff ffa1 	bl	8007d20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <osKernelStart+0x68>)
 8007de0:	2202      	movs	r2, #2
 8007de2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007de4:	f001 fefc 	bl	8009be0 <vTaskStartScheduler>
      stat = osOK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e002      	b.n	8007df4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295
 8007df2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007df4:	68fb      	ldr	r3, [r7, #12]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000b78 	.word	0x20000b78

08007e04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b090      	sub	sp, #64	; 0x40
 8007e08:	af04      	add	r7, sp, #16
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e14:	f3ef 8305 	mrs	r3, IPSR
 8007e18:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e1a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 808f 	bne.w	8007f40 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e22:	f3ef 8310 	mrs	r3, PRIMASK
 8007e26:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d105      	bne.n	8007e3a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8007e32:	617b      	str	r3, [r7, #20]
  return(result);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <osThreadNew+0x3e>
 8007e3a:	4b44      	ldr	r3, [pc, #272]	; (8007f4c <osThreadNew+0x148>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d07e      	beq.n	8007f40 <osThreadNew+0x13c>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d07b      	beq.n	8007f40 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007e4c:	2318      	movs	r3, #24
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007e54:	f04f 33ff 	mov.w	r3, #4294967295
 8007e58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d045      	beq.n	8007eec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <osThreadNew+0x6a>
        name = attr->name;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d008      	beq.n	8007e94 <osThreadNew+0x90>
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	2b38      	cmp	r3, #56	; 0x38
 8007e86:	d805      	bhi.n	8007e94 <osThreadNew+0x90>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <osThreadNew+0x94>
        return (NULL);
 8007e94:	2300      	movs	r3, #0
 8007e96:	e054      	b.n	8007f42 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	089b      	lsrs	r3, r3, #2
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00e      	beq.n	8007ece <osThreadNew+0xca>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	2b5b      	cmp	r3, #91	; 0x5b
 8007eb6:	d90a      	bls.n	8007ece <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <osThreadNew+0xca>
        mem = 1;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	623b      	str	r3, [r7, #32]
 8007ecc:	e010      	b.n	8007ef0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10c      	bne.n	8007ef0 <osThreadNew+0xec>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d108      	bne.n	8007ef0 <osThreadNew+0xec>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d104      	bne.n	8007ef0 <osThreadNew+0xec>
          mem = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	623b      	str	r3, [r7, #32]
 8007eea:	e001      	b.n	8007ef0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d110      	bne.n	8007f18 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007efe:	9202      	str	r2, [sp, #8]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f001 fc21 	bl	8009754 <xTaskCreateStatic>
 8007f12:	4603      	mov	r3, r0
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	e013      	b.n	8007f40 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d110      	bne.n	8007f40 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	f107 0310 	add.w	r3, r7, #16
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f001 fc69 	bl	8009808 <xTaskCreate>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d001      	beq.n	8007f40 <osThreadNew+0x13c>
          hTask = NULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f40:	693b      	ldr	r3, [r7, #16]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3730      	adds	r7, #48	; 0x30
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000b78 	.word	0x20000b78

08007f50 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f5c:	f3ef 8305 	mrs	r3, IPSR
 8007f60:	617b      	str	r3, [r7, #20]
  return(result);
 8007f62:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10f      	bne.n	8007f88 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f68:	f3ef 8310 	mrs	r3, PRIMASK
 8007f6c:	613b      	str	r3, [r7, #16]
  return(result);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d105      	bne.n	8007f80 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f74:	f3ef 8311 	mrs	r3, BASEPRI
 8007f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <osThreadSuspend+0x40>
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <osThreadSuspend+0x64>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d103      	bne.n	8007f90 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8007f88:	f06f 0305 	mvn.w	r3, #5
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	e00b      	b.n	8007fa8 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d103      	bne.n	8007f9e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8007f96:	f06f 0303 	mvn.w	r3, #3
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	e004      	b.n	8007fa8 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8007fa2:	69b8      	ldr	r0, [r7, #24]
 8007fa4:	f001 fda8 	bl	8009af8 <vTaskSuspend>
  }

  return (stat);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000b78 	.word	0x20000b78

08007fb8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc0:	f3ef 8305 	mrs	r3, IPSR
 8007fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8007fc6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10f      	bne.n	8007fec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d105      	bne.n	8007fe4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8007fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <osDelay+0x3c>
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <osDelay+0x58>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d103      	bne.n	8007ff4 <osDelay+0x3c>
    stat = osErrorISR;
 8007fec:	f06f 0305 	mvn.w	r3, #5
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	e007      	b.n	8008004 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fd46 	bl	8009a90 <vTaskDelay>
    }
  }

  return (stat);
 8008004:	697b      	ldr	r3, [r7, #20]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20000b78 	.word	0x20000b78

08008014 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008014:	b580      	push	{r7, lr}
 8008016:	b08a      	sub	sp, #40	; 0x28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800801c:	2300      	movs	r3, #0
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008020:	f3ef 8305 	mrs	r3, IPSR
 8008024:	613b      	str	r3, [r7, #16]
  return(result);
 8008026:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008028:	2b00      	cmp	r3, #0
 800802a:	f040 8085 	bne.w	8008138 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800802e:	f3ef 8310 	mrs	r3, PRIMASK
 8008032:	60fb      	str	r3, [r7, #12]
  return(result);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800803a:	f3ef 8311 	mrs	r3, BASEPRI
 800803e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <osMutexNew+0x3a>
 8008046:	4b3f      	ldr	r3, [pc, #252]	; (8008144 <osMutexNew+0x130>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d074      	beq.n	8008138 <osMutexNew+0x124>
    if (attr != NULL) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	623b      	str	r3, [r7, #32]
 800805a:	e001      	b.n	8008060 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <osMutexNew+0x5c>
      rmtx = 1U;
 800806a:	2301      	movs	r3, #1
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	e001      	b.n	8008074 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d15c      	bne.n	8008138 <osMutexNew+0x124>
      mem = -1;
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
 8008082:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d015      	beq.n	80080b6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d006      	beq.n	80080a0 <osMutexNew+0x8c>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	2b4f      	cmp	r3, #79	; 0x4f
 8008098:	d902      	bls.n	80080a0 <osMutexNew+0x8c>
          mem = 1;
 800809a:	2301      	movs	r3, #1
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	e00c      	b.n	80080ba <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d108      	bne.n	80080ba <osMutexNew+0xa6>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <osMutexNew+0xa6>
            mem = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	61bb      	str	r3, [r7, #24]
 80080b4:	e001      	b.n	80080ba <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d112      	bne.n	80080e6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	4619      	mov	r1, r3
 80080cc:	2004      	movs	r0, #4
 80080ce:	f000 fd28 	bl	8008b22 <xQueueCreateMutexStatic>
 80080d2:	6278      	str	r0, [r7, #36]	; 0x24
 80080d4:	e016      	b.n	8008104 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	4619      	mov	r1, r3
 80080dc:	2001      	movs	r0, #1
 80080de:	f000 fd20 	bl	8008b22 <xQueueCreateMutexStatic>
 80080e2:	6278      	str	r0, [r7, #36]	; 0x24
 80080e4:	e00e      	b.n	8008104 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80080f2:	2004      	movs	r0, #4
 80080f4:	f000 fcfd 	bl	8008af2 <xQueueCreateMutex>
 80080f8:	6278      	str	r0, [r7, #36]	; 0x24
 80080fa:	e003      	b.n	8008104 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80080fc:	2001      	movs	r0, #1
 80080fe:	f000 fcf8 	bl	8008af2 <xQueueCreateMutex>
 8008102:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <osMutexNew+0x110>
        if (attr != NULL) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <osMutexNew+0x104>
          name = attr->name;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	e001      	b.n	800811c <osMutexNew+0x108>
        } else {
          name = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800811c:	6979      	ldr	r1, [r7, #20]
 800811e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008120:	f001 fabc 	bl	800969c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <osMutexNew+0x124>
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800813a:	4618      	mov	r0, r3
 800813c:	3728      	adds	r7, #40	; 0x28
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000b78 	.word	0x20000b78

08008148 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f023 0301 	bic.w	r3, r3, #1
 8008158:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008162:	2300      	movs	r3, #0
 8008164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008166:	f3ef 8305 	mrs	r3, IPSR
 800816a:	613b      	str	r3, [r7, #16]
  return(result);
 800816c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10f      	bne.n	8008192 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008172:	f3ef 8310 	mrs	r3, PRIMASK
 8008176:	60fb      	str	r3, [r7, #12]
  return(result);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d105      	bne.n	800818a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800817e:	f3ef 8311 	mrs	r3, BASEPRI
 8008182:	60bb      	str	r3, [r7, #8]
  return(result);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <osMutexAcquire+0x52>
 800818a:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <osMutexAcquire+0xb8>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d103      	bne.n	800819a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008192:	f06f 0305 	mvn.w	r3, #5
 8008196:	61fb      	str	r3, [r7, #28]
 8008198:	e02c      	b.n	80081f4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d103      	bne.n	80081a8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80081a0:	f06f 0303 	mvn.w	r3, #3
 80081a4:	61fb      	str	r3, [r7, #28]
 80081a6:	e025      	b.n	80081f4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d011      	beq.n	80081d2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	69b8      	ldr	r0, [r7, #24]
 80081b2:	f000 fd04 	bl	8008bbe <xQueueTakeMutexRecursive>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d01b      	beq.n	80081f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80081c2:	f06f 0301 	mvn.w	r3, #1
 80081c6:	61fb      	str	r3, [r7, #28]
 80081c8:	e014      	b.n	80081f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80081ca:	f06f 0302 	mvn.w	r3, #2
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	e010      	b.n	80081f4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	69b8      	ldr	r0, [r7, #24]
 80081d6:	f000 ff91 	bl	80090fc <xQueueSemaphoreTake>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d009      	beq.n	80081f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80081e6:	f06f 0301 	mvn.w	r3, #1
 80081ea:	61fb      	str	r3, [r7, #28]
 80081ec:	e002      	b.n	80081f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80081ee:	f06f 0302 	mvn.w	r3, #2
 80081f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80081f4:	69fb      	ldr	r3, [r7, #28]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000b78 	.word	0x20000b78

08008204 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f023 0301 	bic.w	r3, r3, #1
 8008212:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008220:	f3ef 8305 	mrs	r3, IPSR
 8008224:	613b      	str	r3, [r7, #16]
  return(result);
 8008226:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10f      	bne.n	800824c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800822c:	f3ef 8310 	mrs	r3, PRIMASK
 8008230:	60fb      	str	r3, [r7, #12]
  return(result);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008238:	f3ef 8311 	mrs	r3, BASEPRI
 800823c:	60bb      	str	r3, [r7, #8]
  return(result);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d007      	beq.n	8008254 <osMutexRelease+0x50>
 8008244:	4b16      	ldr	r3, [pc, #88]	; (80082a0 <osMutexRelease+0x9c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d103      	bne.n	8008254 <osMutexRelease+0x50>
    stat = osErrorISR;
 800824c:	f06f 0305 	mvn.w	r3, #5
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	e01f      	b.n	8008294 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d103      	bne.n	8008262 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800825a:	f06f 0303 	mvn.w	r3, #3
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	e018      	b.n	8008294 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d009      	beq.n	800827c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008268:	69b8      	ldr	r0, [r7, #24]
 800826a:	f000 fc75 	bl	8008b58 <xQueueGiveMutexRecursive>
 800826e:	4603      	mov	r3, r0
 8008270:	2b01      	cmp	r3, #1
 8008272:	d00f      	beq.n	8008294 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008274:	f06f 0302 	mvn.w	r3, #2
 8008278:	61fb      	str	r3, [r7, #28]
 800827a:	e00b      	b.n	8008294 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800827c:	2300      	movs	r3, #0
 800827e:	2200      	movs	r2, #0
 8008280:	2100      	movs	r1, #0
 8008282:	69b8      	ldr	r0, [r7, #24]
 8008284:	f000 fcd0 	bl	8008c28 <xQueueGenericSend>
 8008288:	4603      	mov	r3, r0
 800828a:	2b01      	cmp	r3, #1
 800828c:	d002      	beq.n	8008294 <osMutexRelease+0x90>
        stat = osErrorResource;
 800828e:	f06f 0302 	mvn.w	r3, #2
 8008292:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008294:	69fb      	ldr	r3, [r7, #28]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000b78 	.word	0x20000b78

080082a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08c      	sub	sp, #48	; 0x30
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082b4:	f3ef 8305 	mrs	r3, IPSR
 80082b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80082ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d170      	bne.n	80083a2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c0:	f3ef 8310 	mrs	r3, PRIMASK
 80082c4:	617b      	str	r3, [r7, #20]
  return(result);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d105      	bne.n	80082d8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082cc:	f3ef 8311 	mrs	r3, BASEPRI
 80082d0:	613b      	str	r3, [r7, #16]
  return(result);
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <osMessageQueueNew+0x3c>
 80082d8:	4b34      	ldr	r3, [pc, #208]	; (80083ac <osMessageQueueNew+0x108>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d060      	beq.n	80083a2 <osMessageQueueNew+0xfe>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d05d      	beq.n	80083a2 <osMessageQueueNew+0xfe>
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d05a      	beq.n	80083a2 <osMessageQueueNew+0xfe>
    mem = -1;
 80082ec:	f04f 33ff 	mov.w	r3, #4294967295
 80082f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d029      	beq.n	800834c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d012      	beq.n	8008326 <osMessageQueueNew+0x82>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b4f      	cmp	r3, #79	; 0x4f
 8008306:	d90e      	bls.n	8008326 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	695a      	ldr	r2, [r3, #20]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	fb01 f303 	mul.w	r3, r1, r3
 800831c:	429a      	cmp	r2, r3
 800831e:	d302      	bcc.n	8008326 <osMessageQueueNew+0x82>
        mem = 1;
 8008320:	2301      	movs	r3, #1
 8008322:	623b      	str	r3, [r7, #32]
 8008324:	e014      	b.n	8008350 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d110      	bne.n	8008350 <osMessageQueueNew+0xac>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10c      	bne.n	8008350 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800833a:	2b00      	cmp	r3, #0
 800833c:	d108      	bne.n	8008350 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <osMessageQueueNew+0xac>
          mem = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	623b      	str	r3, [r7, #32]
 800834a:	e001      	b.n	8008350 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d10c      	bne.n	8008370 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6899      	ldr	r1, [r3, #8]
 800835e:	2300      	movs	r3, #0
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	460b      	mov	r3, r1
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fad4 	bl	8008914 <xQueueGenericCreateStatic>
 800836c:	6278      	str	r0, [r7, #36]	; 0x24
 800836e:	e008      	b.n	8008382 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d105      	bne.n	8008382 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008376:	2200      	movs	r2, #0
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 fb3d 	bl	80089fa <xQueueGenericCreate>
 8008380:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00c      	beq.n	80083a2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <osMessageQueueNew+0xf2>
        name = attr->name;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	61fb      	str	r3, [r7, #28]
 8008394:	e001      	b.n	800839a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8008396:	2300      	movs	r3, #0
 8008398:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800839a:	69f9      	ldr	r1, [r7, #28]
 800839c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800839e:	f001 f97d 	bl	800969c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3728      	adds	r7, #40	; 0x28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000b78 	.word	0x20000b78

080083b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c8:	f3ef 8305 	mrs	r3, IPSR
 80083cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80083ce:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10f      	bne.n	80083f4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d4:	f3ef 8310 	mrs	r3, PRIMASK
 80083d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d105      	bne.n	80083ec <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083e0:	f3ef 8311 	mrs	r3, BASEPRI
 80083e4:	617b      	str	r3, [r7, #20]
  return(result);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d02c      	beq.n	8008446 <osMessageQueuePut+0x96>
 80083ec:	4b28      	ldr	r3, [pc, #160]	; (8008490 <osMessageQueuePut+0xe0>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d128      	bne.n	8008446 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <osMessageQueuePut+0x56>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <osMessageQueuePut+0x56>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008406:	f06f 0303 	mvn.w	r3, #3
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800840c:	e039      	b.n	8008482 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800840e:	2300      	movs	r3, #0
 8008410:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008412:	f107 0210 	add.w	r2, r7, #16
 8008416:	2300      	movs	r3, #0
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	6a38      	ldr	r0, [r7, #32]
 800841c:	f000 fcfe 	bl	8008e1c <xQueueGenericSendFromISR>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d003      	beq.n	800842e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008426:	f06f 0302 	mvn.w	r3, #2
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800842c:	e029      	b.n	8008482 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d026      	beq.n	8008482 <osMessageQueuePut+0xd2>
 8008434:	4b17      	ldr	r3, [pc, #92]	; (8008494 <osMessageQueuePut+0xe4>)
 8008436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008444:	e01d      	b.n	8008482 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <osMessageQueuePut+0xa2>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d103      	bne.n	800845a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008452:	f06f 0303 	mvn.w	r3, #3
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
 8008458:	e014      	b.n	8008484 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800845a:	2300      	movs	r3, #0
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	6a38      	ldr	r0, [r7, #32]
 8008462:	f000 fbe1 	bl	8008c28 <xQueueGenericSend>
 8008466:	4603      	mov	r3, r0
 8008468:	2b01      	cmp	r3, #1
 800846a:	d00b      	beq.n	8008484 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008472:	f06f 0301 	mvn.w	r3, #1
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
 8008478:	e004      	b.n	8008484 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800847a:	f06f 0302 	mvn.w	r3, #2
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
 8008480:	e000      	b.n	8008484 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008482:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008486:	4618      	mov	r0, r3
 8008488:	3728      	adds	r7, #40	; 0x28
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000b78 	.word	0x20000b78
 8008494:	e000ed04 	.word	0xe000ed04

08008498 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ae:	f3ef 8305 	mrs	r3, IPSR
 80084b2:	61fb      	str	r3, [r7, #28]
  return(result);
 80084b4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10f      	bne.n	80084da <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ba:	f3ef 8310 	mrs	r3, PRIMASK
 80084be:	61bb      	str	r3, [r7, #24]
  return(result);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d105      	bne.n	80084d2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084c6:	f3ef 8311 	mrs	r3, BASEPRI
 80084ca:	617b      	str	r3, [r7, #20]
  return(result);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d02c      	beq.n	800852c <osMessageQueueGet+0x94>
 80084d2:	4b28      	ldr	r3, [pc, #160]	; (8008574 <osMessageQueueGet+0xdc>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d128      	bne.n	800852c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <osMessageQueueGet+0x54>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <osMessageQueueGet+0x54>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80084ec:	f06f 0303 	mvn.w	r3, #3
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084f2:	e038      	b.n	8008566 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80084f4:	2300      	movs	r3, #0
 80084f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80084f8:	f107 0310 	add.w	r3, r7, #16
 80084fc:	461a      	mov	r2, r3
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	6a38      	ldr	r0, [r7, #32]
 8008502:	f000 ff03 	bl	800930c <xQueueReceiveFromISR>
 8008506:	4603      	mov	r3, r0
 8008508:	2b01      	cmp	r3, #1
 800850a:	d003      	beq.n	8008514 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800850c:	f06f 0302 	mvn.w	r3, #2
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008512:	e028      	b.n	8008566 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d025      	beq.n	8008566 <osMessageQueueGet+0xce>
 800851a:	4b17      	ldr	r3, [pc, #92]	; (8008578 <osMessageQueueGet+0xe0>)
 800851c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800852a:	e01c      	b.n	8008566 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <osMessageQueueGet+0xa0>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d103      	bne.n	8008540 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008538:	f06f 0303 	mvn.w	r3, #3
 800853c:	627b      	str	r3, [r7, #36]	; 0x24
 800853e:	e013      	b.n	8008568 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	6a38      	ldr	r0, [r7, #32]
 8008546:	f000 fcfd 	bl	8008f44 <xQueueReceive>
 800854a:	4603      	mov	r3, r0
 800854c:	2b01      	cmp	r3, #1
 800854e:	d00b      	beq.n	8008568 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008556:	f06f 0301 	mvn.w	r3, #1
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
 800855c:	e004      	b.n	8008568 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800855e:	f06f 0302 	mvn.w	r3, #2
 8008562:	627b      	str	r3, [r7, #36]	; 0x24
 8008564:	e000      	b.n	8008568 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008566:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800856a:	4618      	mov	r0, r3
 800856c:	3728      	adds	r7, #40	; 0x28
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000b78 	.word	0x20000b78
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800857c:	b580      	push	{r7, lr}
 800857e:	b08c      	sub	sp, #48	; 0x30
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008592:	e033      	b.n	80085fc <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008594:	f3ef 8305 	mrs	r3, IPSR
 8008598:	623b      	str	r3, [r7, #32]
  return(result);
 800859a:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10f      	bne.n	80085c0 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a0:	f3ef 8310 	mrs	r3, PRIMASK
 80085a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d105      	bne.n	80085b8 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085ac:	f3ef 8311 	mrs	r3, BASEPRI
 80085b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01d      	beq.n	80085f4 <osMessageQueueGetSpace+0x78>
 80085b8:	4b13      	ldr	r3, [pc, #76]	; (8008608 <osMessageQueueGetSpace+0x8c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d119      	bne.n	80085f4 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085c0:	f3ef 8211 	mrs	r2, BASEPRI
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	613a      	str	r2, [r7, #16]
 80085d6:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085d8:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 80085da:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 80085f2:	e003      	b.n	80085fc <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80085f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f6:	f000 ff06 	bl	8009406 <uxQueueSpacesAvailable>
 80085fa:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3730      	adds	r7, #48	; 0x30
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000b78 	.word	0x20000b78

0800860c <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008618:	f3ef 8305 	mrs	r3, IPSR
 800861c:	617b      	str	r3, [r7, #20]
  return(result);
 800861e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10f      	bne.n	8008644 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008624:	f3ef 8310 	mrs	r3, PRIMASK
 8008628:	613b      	str	r3, [r7, #16]
  return(result);
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d105      	bne.n	800863c <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008630:	f3ef 8311 	mrs	r3, BASEPRI
 8008634:	60fb      	str	r3, [r7, #12]
  return(result);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d007      	beq.n	800864c <osMessageQueueReset+0x40>
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <osMessageQueueReset+0x64>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b02      	cmp	r3, #2
 8008642:	d103      	bne.n	800864c <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8008644:	f06f 0305 	mvn.w	r3, #5
 8008648:	61fb      	str	r3, [r7, #28]
 800864a:	e00c      	b.n	8008666 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8008652:	f06f 0303 	mvn.w	r3, #3
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	e005      	b.n	8008666 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800865a:	2300      	movs	r3, #0
 800865c:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800865e:	2100      	movs	r1, #0
 8008660:	69b8      	ldr	r0, [r7, #24]
 8008662:	f000 f8ef 	bl	8008844 <xQueueGenericReset>
  }

  return (stat);
 8008666:	69fb      	ldr	r3, [r7, #28]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3720      	adds	r7, #32
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000b78 	.word	0x20000b78

08008674 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4a07      	ldr	r2, [pc, #28]	; (80086a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008684:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	4a06      	ldr	r2, [pc, #24]	; (80086a4 <vApplicationGetIdleTaskMemory+0x30>)
 800868a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2280      	movs	r2, #128	; 0x80
 8008690:	601a      	str	r2, [r3, #0]
}
 8008692:	bf00      	nop
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	20000b7c 	.word	0x20000b7c
 80086a4:	20000bd8 	.word	0x20000bd8

080086a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4a07      	ldr	r2, [pc, #28]	; (80086d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80086b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4a06      	ldr	r2, [pc, #24]	; (80086d8 <vApplicationGetTimerTaskMemory+0x30>)
 80086be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086c6:	601a      	str	r2, [r3, #0]
}
 80086c8:	bf00      	nop
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	20000dd8 	.word	0x20000dd8
 80086d8:	20000e34 	.word	0x20000e34

080086dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f103 0208 	add.w	r2, r3, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f04f 32ff 	mov.w	r2, #4294967295
 80086f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f103 0208 	add.w	r2, r3, #8
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f103 0208 	add.w	r2, r3, #8
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008736:	b480      	push	{r7}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	601a      	str	r2, [r3, #0]
}
 8008772:	bf00      	nop
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008794:	d103      	bne.n	800879e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e00c      	b.n	80087b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3308      	adds	r3, #8
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	e002      	b.n	80087ac <vListInsert+0x2e>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d2f6      	bcs.n	80087a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	601a      	str	r2, [r3, #0]
}
 80087e4:	bf00      	nop
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6892      	ldr	r2, [r2, #8]
 8008806:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6852      	ldr	r2, [r2, #4]
 8008810:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d103      	bne.n	8008824 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	1e5a      	subs	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d109      	bne.n	800886c <xQueueGenericReset+0x28>
	__asm volatile
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	e7fe      	b.n	800886a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800886c:	f002 fc46 	bl	800b0fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008878:	68f9      	ldr	r1, [r7, #12]
 800887a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800887c:	fb01 f303 	mul.w	r3, r1, r3
 8008880:	441a      	add	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889c:	3b01      	subs	r3, #1
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088a2:	fb01 f303 	mul.w	r3, r1, r3
 80088a6:	441a      	add	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	22ff      	movs	r2, #255	; 0xff
 80088b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	22ff      	movs	r2, #255	; 0xff
 80088b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d114      	bne.n	80088ec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d01a      	beq.n	8008900 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3310      	adds	r3, #16
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 fc06 	bl	800a0e0 <xTaskRemoveFromEventList>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d012      	beq.n	8008900 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088da:	4b0d      	ldr	r3, [pc, #52]	; (8008910 <xQueueGenericReset+0xcc>)
 80088dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	e009      	b.n	8008900 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3310      	adds	r3, #16
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff fef3 	bl	80086dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3324      	adds	r3, #36	; 0x24
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff feee 	bl	80086dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008900:	f002 fc2a 	bl	800b158 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008904:	2301      	movs	r3, #1
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	e000ed04 	.word	0xe000ed04

08008914 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08e      	sub	sp, #56	; 0x38
 8008918:	af02      	add	r7, sp, #8
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d109      	bne.n	800893c <xQueueGenericCreateStatic+0x28>
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	62bb      	str	r3, [r7, #40]	; 0x28
 800893a:	e7fe      	b.n	800893a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <xQueueGenericCreateStatic+0x42>
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
 8008954:	e7fe      	b.n	8008954 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <xQueueGenericCreateStatic+0x4e>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <xQueueGenericCreateStatic+0x52>
 8008962:	2301      	movs	r3, #1
 8008964:	e000      	b.n	8008968 <xQueueGenericCreateStatic+0x54>
 8008966:	2300      	movs	r3, #0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <xQueueGenericCreateStatic+0x6c>
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	623b      	str	r3, [r7, #32]
 800897e:	e7fe      	b.n	800897e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d102      	bne.n	800898c <xQueueGenericCreateStatic+0x78>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <xQueueGenericCreateStatic+0x7c>
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <xQueueGenericCreateStatic+0x7e>
 8008990:	2300      	movs	r3, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <xQueueGenericCreateStatic+0x96>
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	61fb      	str	r3, [r7, #28]
 80089a8:	e7fe      	b.n	80089a8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089aa:	2350      	movs	r3, #80	; 0x50
 80089ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2b50      	cmp	r3, #80	; 0x50
 80089b2:	d009      	beq.n	80089c8 <xQueueGenericCreateStatic+0xb4>
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	61bb      	str	r3, [r7, #24]
 80089c6:	e7fe      	b.n	80089c6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00d      	beq.n	80089f0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	4613      	mov	r3, r2
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f844 	bl	8008a78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3730      	adds	r7, #48	; 0x30
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b08a      	sub	sp, #40	; 0x28
 80089fe:	af02      	add	r7, sp, #8
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	4613      	mov	r3, r2
 8008a06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d109      	bne.n	8008a22 <xQueueGenericCreate+0x28>
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	e7fe      	b.n	8008a20 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d102      	bne.n	8008a2e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61fb      	str	r3, [r7, #28]
 8008a2c:	e004      	b.n	8008a38 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	fb02 f303 	mul.w	r3, r2, r3
 8008a36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	3350      	adds	r3, #80	; 0x50
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f002 fc77 	bl	800b330 <pvPortMalloc>
 8008a42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d011      	beq.n	8008a6e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	3350      	adds	r3, #80	; 0x50
 8008a52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a5c:	79fa      	ldrb	r2, [r7, #7]
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4613      	mov	r3, r2
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f805 	bl	8008a78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d103      	bne.n	8008a94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	e002      	b.n	8008a9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	69b8      	ldr	r0, [r7, #24]
 8008aaa:	f7ff fecb 	bl	8008844 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	78fa      	ldrb	r2, [r7, #3]
 8008ab2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00e      	beq.n	8008aea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f89f 	bl	8008c28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	4603      	mov	r3, r0
 8008afa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008afc:	2301      	movs	r3, #1
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	2300      	movs	r3, #0
 8008b02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	461a      	mov	r2, r3
 8008b08:	6939      	ldr	r1, [r7, #16]
 8008b0a:	6978      	ldr	r0, [r7, #20]
 8008b0c:	f7ff ff75 	bl	80089fa <xQueueGenericCreate>
 8008b10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f7ff ffd3 	bl	8008abe <prvInitialiseMutex>

		return xNewQueue;
 8008b18:	68fb      	ldr	r3, [r7, #12]
	}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b088      	sub	sp, #32
 8008b26:	af02      	add	r7, sp, #8
 8008b28:	4603      	mov	r3, r0
 8008b2a:	6039      	str	r1, [r7, #0]
 8008b2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	6939      	ldr	r1, [r7, #16]
 8008b40:	6978      	ldr	r0, [r7, #20]
 8008b42:	f7ff fee7 	bl	8008914 <xQueueGenericCreateStatic>
 8008b46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff ffb8 	bl	8008abe <prvInitialiseMutex>

		return xNewQueue;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
	}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <xQueueGiveMutexRecursive+0x26>
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	e7fe      	b.n	8008b7c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	689c      	ldr	r4, [r3, #8]
 8008b82:	f001 fc63 	bl	800a44c <xTaskGetCurrentTaskHandle>
 8008b86:	4603      	mov	r3, r0
 8008b88:	429c      	cmp	r4, r3
 8008b8a:	d111      	bne.n	8008bb0 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	1e5a      	subs	r2, r3, #1
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	6938      	ldr	r0, [r7, #16]
 8008ba6:	f000 f83f 	bl	8008c28 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008baa:	2301      	movs	r3, #1
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	e001      	b.n	8008bb4 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008bb4:	697b      	ldr	r3, [r7, #20]
	}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd90      	pop	{r4, r7, pc}

08008bbe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008bbe:	b590      	push	{r4, r7, lr}
 8008bc0:	b087      	sub	sp, #28
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d109      	bne.n	8008be6 <xQueueTakeMutexRecursive+0x28>
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e7fe      	b.n	8008be4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	689c      	ldr	r4, [r3, #8]
 8008bea:	f001 fc2f 	bl	800a44c <xTaskGetCurrentTaskHandle>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	d107      	bne.n	8008c04 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	e00c      	b.n	8008c1e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6938      	ldr	r0, [r7, #16]
 8008c08:	f000 fa78 	bl	80090fc <xQueueSemaphoreTake>
 8008c0c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008c1e:	697b      	ldr	r3, [r7, #20]
	}
 8008c20:	4618      	mov	r0, r3
 8008c22:	371c      	adds	r7, #28
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd90      	pop	{r4, r7, pc}

08008c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08e      	sub	sp, #56	; 0x38
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c36:	2300      	movs	r3, #0
 8008c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <xQueueGenericSend+0x30>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c56:	e7fe      	b.n	8008c56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <xQueueGenericSend+0x3e>
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <xQueueGenericSend+0x42>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <xQueueGenericSend+0x44>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d109      	bne.n	8008c84 <xQueueGenericSend+0x5c>
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
 8008c82:	e7fe      	b.n	8008c82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d103      	bne.n	8008c92 <xQueueGenericSend+0x6a>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <xQueueGenericSend+0x6e>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <xQueueGenericSend+0x70>
 8008c96:	2300      	movs	r3, #0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d109      	bne.n	8008cb0 <xQueueGenericSend+0x88>
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	623b      	str	r3, [r7, #32]
 8008cae:	e7fe      	b.n	8008cae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cb0:	f001 fbdc 	bl	800a46c <xTaskGetSchedulerState>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <xQueueGenericSend+0x98>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <xQueueGenericSend+0x9c>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <xQueueGenericSend+0x9e>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <xQueueGenericSend+0xb6>
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	e7fe      	b.n	8008cdc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cde:	f002 fa0d 	bl	800b0fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d302      	bcc.n	8008cf4 <xQueueGenericSend+0xcc>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d129      	bne.n	8008d48 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cfa:	f000 fbbe 	bl	800947a <prvCopyDataToQueue>
 8008cfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d010      	beq.n	8008d2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	3324      	adds	r3, #36	; 0x24
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f9e7 	bl	800a0e0 <xTaskRemoveFromEventList>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d013      	beq.n	8008d40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d18:	4b3f      	ldr	r3, [pc, #252]	; (8008e18 <xQueueGenericSend+0x1f0>)
 8008d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	e00a      	b.n	8008d40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d007      	beq.n	8008d40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d30:	4b39      	ldr	r3, [pc, #228]	; (8008e18 <xQueueGenericSend+0x1f0>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d40:	f002 fa0a 	bl	800b158 <vPortExitCritical>
				return pdPASS;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e063      	b.n	8008e10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d103      	bne.n	8008d56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d4e:	f002 fa03 	bl	800b158 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e05c      	b.n	8008e10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d106      	bne.n	8008d6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d5c:	f107 0314 	add.w	r3, r7, #20
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 fa1f 	bl	800a1a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d66:	2301      	movs	r3, #1
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d6a:	f002 f9f5 	bl	800b158 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d6e:	f000 ff9b 	bl	8009ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d72:	f002 f9c3 	bl	800b0fc <vPortEnterCritical>
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d7c:	b25b      	sxtb	r3, r3
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d103      	bne.n	8008d8c <xQueueGenericSend+0x164>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d92:	b25b      	sxtb	r3, r3
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d103      	bne.n	8008da2 <xQueueGenericSend+0x17a>
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008da2:	f002 f9d9 	bl	800b158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008da6:	1d3a      	adds	r2, r7, #4
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fa0e 	bl	800a1d0 <xTaskCheckForTimeOut>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d124      	bne.n	8008e04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dbc:	f000 fc55 	bl	800966a <prvIsQueueFull>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d018      	beq.n	8008df8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	3310      	adds	r3, #16
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 f938 	bl	800a044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dd6:	f000 fbe0 	bl	800959a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dda:	f000 ff73 	bl	8009cc4 <xTaskResumeAll>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f47f af7c 	bne.w	8008cde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008de6:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <xQueueGenericSend+0x1f0>)
 8008de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	e772      	b.n	8008cde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dfa:	f000 fbce 	bl	800959a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dfe:	f000 ff61 	bl	8009cc4 <xTaskResumeAll>
 8008e02:	e76c      	b.n	8008cde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e06:	f000 fbc8 	bl	800959a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e0a:	f000 ff5b 	bl	8009cc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3738      	adds	r7, #56	; 0x38
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08e      	sub	sp, #56	; 0x38
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <xQueueGenericSendFromISR+0x2c>
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
 8008e46:	e7fe      	b.n	8008e46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d103      	bne.n	8008e56 <xQueueGenericSendFromISR+0x3a>
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <xQueueGenericSendFromISR+0x3e>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <xQueueGenericSendFromISR+0x40>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d109      	bne.n	8008e74 <xQueueGenericSendFromISR+0x58>
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	623b      	str	r3, [r7, #32]
 8008e72:	e7fe      	b.n	8008e72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d103      	bne.n	8008e82 <xQueueGenericSendFromISR+0x66>
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <xQueueGenericSendFromISR+0x6a>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <xQueueGenericSendFromISR+0x6c>
 8008e86:	2300      	movs	r3, #0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <xQueueGenericSendFromISR+0x84>
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	61fb      	str	r3, [r7, #28]
 8008e9e:	e7fe      	b.n	8008e9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ea0:	f002 fa08 	bl	800b2b4 <vPortValidateInterruptPriority>
	__asm volatile
 8008ea4:	f3ef 8211 	mrs	r2, BASEPRI
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	61ba      	str	r2, [r7, #24]
 8008eba:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d302      	bcc.n	8008ed2 <xQueueGenericSendFromISR+0xb6>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d12c      	bne.n	8008f2c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ee2:	f000 faca 	bl	800947a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ee6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d112      	bne.n	8008f16 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d016      	beq.n	8008f26 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	3324      	adds	r3, #36	; 0x24
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 f8ef 	bl	800a0e0 <xTaskRemoveFromEventList>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00e      	beq.n	8008f26 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	e007      	b.n	8008f26 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	b25a      	sxtb	r2, r3
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f26:	2301      	movs	r3, #1
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008f2a:	e001      	b.n	8008f30 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3738      	adds	r7, #56	; 0x38
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08c      	sub	sp, #48	; 0x30
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <xQueueReceive+0x2e>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	623b      	str	r3, [r7, #32]
 8008f70:	e7fe      	b.n	8008f70 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d103      	bne.n	8008f80 <xQueueReceive+0x3c>
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <xQueueReceive+0x40>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <xQueueReceive+0x42>
 8008f84:	2300      	movs	r3, #0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <xQueueReceive+0x5a>
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	61fb      	str	r3, [r7, #28]
 8008f9c:	e7fe      	b.n	8008f9c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f9e:	f001 fa65 	bl	800a46c <xTaskGetSchedulerState>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <xQueueReceive+0x6a>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <xQueueReceive+0x6e>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <xQueueReceive+0x70>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d109      	bne.n	8008fcc <xQueueReceive+0x88>
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	e7fe      	b.n	8008fca <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fcc:	f002 f896 	bl	800b0fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01f      	beq.n	800901c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fdc:	68b9      	ldr	r1, [r7, #8]
 8008fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fe0:	f000 fab5 	bl	800954e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	1e5a      	subs	r2, r3, #1
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00f      	beq.n	8009014 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	3310      	adds	r3, #16
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 f871 	bl	800a0e0 <xTaskRemoveFromEventList>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d007      	beq.n	8009014 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009004:	4b3c      	ldr	r3, [pc, #240]	; (80090f8 <xQueueReceive+0x1b4>)
 8009006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009014:	f002 f8a0 	bl	800b158 <vPortExitCritical>
				return pdPASS;
 8009018:	2301      	movs	r3, #1
 800901a:	e069      	b.n	80090f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d103      	bne.n	800902a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009022:	f002 f899 	bl	800b158 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009026:	2300      	movs	r3, #0
 8009028:	e062      	b.n	80090f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902c:	2b00      	cmp	r3, #0
 800902e:	d106      	bne.n	800903e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009030:	f107 0310 	add.w	r3, r7, #16
 8009034:	4618      	mov	r0, r3
 8009036:	f001 f8b5 	bl	800a1a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800903a:	2301      	movs	r3, #1
 800903c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800903e:	f002 f88b 	bl	800b158 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009042:	f000 fe31 	bl	8009ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009046:	f002 f859 	bl	800b0fc <vPortEnterCritical>
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009050:	b25b      	sxtb	r3, r3
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009056:	d103      	bne.n	8009060 <xQueueReceive+0x11c>
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009066:	b25b      	sxtb	r3, r3
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d103      	bne.n	8009076 <xQueueReceive+0x132>
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009076:	f002 f86f 	bl	800b158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800907a:	1d3a      	adds	r2, r7, #4
 800907c:	f107 0310 	add.w	r3, r7, #16
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f001 f8a4 	bl	800a1d0 <xTaskCheckForTimeOut>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d123      	bne.n	80090d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800908e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009090:	f000 fad5 	bl	800963e <prvIsQueueEmpty>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d017      	beq.n	80090ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	3324      	adds	r3, #36	; 0x24
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 ffce 	bl	800a044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090aa:	f000 fa76 	bl	800959a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090ae:	f000 fe09 	bl	8009cc4 <xTaskResumeAll>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d189      	bne.n	8008fcc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80090b8:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <xQueueReceive+0x1b4>)
 80090ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	e780      	b.n	8008fcc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090cc:	f000 fa65 	bl	800959a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090d0:	f000 fdf8 	bl	8009cc4 <xTaskResumeAll>
 80090d4:	e77a      	b.n	8008fcc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d8:	f000 fa5f 	bl	800959a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090dc:	f000 fdf2 	bl	8009cc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090e2:	f000 faac 	bl	800963e <prvIsQueueEmpty>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f43f af6f 	beq.w	8008fcc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3730      	adds	r7, #48	; 0x30
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08e      	sub	sp, #56	; 0x38
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009106:	2300      	movs	r3, #0
 8009108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d109      	bne.n	800912c <xQueueSemaphoreTake+0x30>
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	623b      	str	r3, [r7, #32]
 800912a:	e7fe      	b.n	800912a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d009      	beq.n	8009148 <xQueueSemaphoreTake+0x4c>
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	61fb      	str	r3, [r7, #28]
 8009146:	e7fe      	b.n	8009146 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009148:	f001 f990 	bl	800a46c <xTaskGetSchedulerState>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <xQueueSemaphoreTake+0x5c>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <xQueueSemaphoreTake+0x60>
 8009158:	2301      	movs	r3, #1
 800915a:	e000      	b.n	800915e <xQueueSemaphoreTake+0x62>
 800915c:	2300      	movs	r3, #0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d109      	bne.n	8009176 <xQueueSemaphoreTake+0x7a>
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	61bb      	str	r3, [r7, #24]
 8009174:	e7fe      	b.n	8009174 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009176:	f001 ffc1 	bl	800b0fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	2b00      	cmp	r3, #0
 8009184:	d024      	beq.n	80091d0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	1e5a      	subs	r2, r3, #1
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d104      	bne.n	80091a0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009196:	f001 fadb 	bl	800a750 <pvTaskIncrementMutexHeldCount>
 800919a:	4602      	mov	r2, r0
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00f      	beq.n	80091c8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	3310      	adds	r3, #16
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 ff97 	bl	800a0e0 <xTaskRemoveFromEventList>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d007      	beq.n	80091c8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091b8:	4b53      	ldr	r3, [pc, #332]	; (8009308 <xQueueSemaphoreTake+0x20c>)
 80091ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091c8:	f001 ffc6 	bl	800b158 <vPortExitCritical>
				return pdPASS;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e096      	b.n	80092fe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d110      	bne.n	80091f8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d009      	beq.n	80091f0 <xQueueSemaphoreTake+0xf4>
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	e7fe      	b.n	80091ee <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80091f0:	f001 ffb2 	bl	800b158 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e082      	b.n	80092fe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091fe:	f107 030c 	add.w	r3, r7, #12
 8009202:	4618      	mov	r0, r3
 8009204:	f000 ffce 	bl	800a1a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800920c:	f001 ffa4 	bl	800b158 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009210:	f000 fd4a 	bl	8009ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009214:	f001 ff72 	bl	800b0fc <vPortEnterCritical>
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800921e:	b25b      	sxtb	r3, r3
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d103      	bne.n	800922e <xQueueSemaphoreTake+0x132>
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009234:	b25b      	sxtb	r3, r3
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d103      	bne.n	8009244 <xQueueSemaphoreTake+0x148>
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009244:	f001 ff88 	bl	800b158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009248:	463a      	mov	r2, r7
 800924a:	f107 030c 	add.w	r3, r7, #12
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f000 ffbd 	bl	800a1d0 <xTaskCheckForTimeOut>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d132      	bne.n	80092c2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800925c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800925e:	f000 f9ee 	bl	800963e <prvIsQueueEmpty>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d026      	beq.n	80092b6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d109      	bne.n	8009284 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009270:	f001 ff44 	bl	800b0fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f915 	bl	800a4a8 <xTaskPriorityInherit>
 800927e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009280:	f001 ff6a 	bl	800b158 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fed9 	bl	800a044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009294:	f000 f981 	bl	800959a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009298:	f000 fd14 	bl	8009cc4 <xTaskResumeAll>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f47f af69 	bne.w	8009176 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80092a4:	4b18      	ldr	r3, [pc, #96]	; (8009308 <xQueueSemaphoreTake+0x20c>)
 80092a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	e75f      	b.n	8009176 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80092b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092b8:	f000 f96f 	bl	800959a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092bc:	f000 fd02 	bl	8009cc4 <xTaskResumeAll>
 80092c0:	e759      	b.n	8009176 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80092c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092c4:	f000 f969 	bl	800959a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092c8:	f000 fcfc 	bl	8009cc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092ce:	f000 f9b6 	bl	800963e <prvIsQueueEmpty>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f43f af4e 	beq.w	8009176 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00d      	beq.n	80092fc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80092e0:	f001 ff0c 	bl	800b0fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80092e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e6:	f000 f8b0 	bl	800944a <prvGetDisinheritPriorityAfterTimeout>
 80092ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 f9ac 	bl	800a650 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80092f8:	f001 ff2e 	bl	800b158 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3738      	adds	r7, #56	; 0x38
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	e000ed04 	.word	0xe000ed04

0800930c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08e      	sub	sp, #56	; 0x38
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <xQueueReceiveFromISR+0x2a>
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	623b      	str	r3, [r7, #32]
 8009334:	e7fe      	b.n	8009334 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d103      	bne.n	8009344 <xQueueReceiveFromISR+0x38>
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <xQueueReceiveFromISR+0x3c>
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <xQueueReceiveFromISR+0x3e>
 8009348:	2300      	movs	r3, #0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <xQueueReceiveFromISR+0x56>
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	61fb      	str	r3, [r7, #28]
 8009360:	e7fe      	b.n	8009360 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009362:	f001 ffa7 	bl	800b2b4 <vPortValidateInterruptPriority>
	__asm volatile
 8009366:	f3ef 8211 	mrs	r2, BASEPRI
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	61ba      	str	r2, [r7, #24]
 800937c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800937e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009380:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	2b00      	cmp	r3, #0
 800938c:	d02f      	beq.n	80093ee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800939c:	f000 f8d7 	bl	800954e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	1e5a      	subs	r2, r3, #1
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80093a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d112      	bne.n	80093d8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d016      	beq.n	80093e8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	3310      	adds	r3, #16
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fe8e 	bl	800a0e0 <xTaskRemoveFromEventList>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00e      	beq.n	80093e8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e007      	b.n	80093e8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80093d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093dc:	3301      	adds	r3, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	b25a      	sxtb	r2, r3
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80093e8:	2301      	movs	r3, #1
 80093ea:	637b      	str	r3, [r7, #52]	; 0x34
 80093ec:	e001      	b.n	80093f2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	637b      	str	r3, [r7, #52]	; 0x34
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3738      	adds	r7, #56	; 0x38
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b086      	sub	sp, #24
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d109      	bne.n	800942c <uxQueueSpacesAvailable+0x26>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	e7fe      	b.n	800942a <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800942c:	f001 fe66 	bl	800b0fc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800943c:	f001 fe8c 	bl	800b158 <vPortExitCritical>

	return uxReturn;
 8009440:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	2b00      	cmp	r3, #0
 8009458:	d006      	beq.n	8009468 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e001      	b.n	800946c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009468:	2300      	movs	r3, #0
 800946a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800946c:	68fb      	ldr	r3, [r7, #12]
	}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b086      	sub	sp, #24
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10d      	bne.n	80094b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d14d      	bne.n	800953c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 f867 	bl	800a578 <xTaskPriorityDisinherit>
 80094aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	609a      	str	r2, [r3, #8]
 80094b2:	e043      	b.n	800953c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d119      	bne.n	80094ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6858      	ldr	r0, [r3, #4]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c2:	461a      	mov	r2, r3
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	f002 fc45 	bl	800bd54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d2:	441a      	add	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d32b      	bcc.n	800953c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	605a      	str	r2, [r3, #4]
 80094ec:	e026      	b.n	800953c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	68d8      	ldr	r0, [r3, #12]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	461a      	mov	r2, r3
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	f002 fc2b 	bl	800bd54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	68da      	ldr	r2, [r3, #12]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009506:	425b      	negs	r3, r3
 8009508:	441a      	add	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d207      	bcs.n	800952a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689a      	ldr	r2, [r3, #8]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	425b      	negs	r3, r3
 8009524:	441a      	add	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d105      	bne.n	800953c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	3b01      	subs	r3, #1
 800953a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009544:	697b      	ldr	r3, [r7, #20]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	d018      	beq.n	8009592 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	441a      	add	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	429a      	cmp	r2, r3
 8009578:	d303      	bcc.n	8009582 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68d9      	ldr	r1, [r3, #12]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	461a      	mov	r2, r3
 800958c:	6838      	ldr	r0, [r7, #0]
 800958e:	f002 fbe1 	bl	800bd54 <memcpy>
	}
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095a2:	f001 fdab 	bl	800b0fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095ae:	e011      	b.n	80095d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d012      	beq.n	80095de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3324      	adds	r3, #36	; 0x24
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fd8f 	bl	800a0e0 <xTaskRemoveFromEventList>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095c8:	f000 fe62 	bl	800a290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	dce9      	bgt.n	80095b0 <prvUnlockQueue+0x16>
 80095dc:	e000      	b.n	80095e0 <prvUnlockQueue+0x46>
					break;
 80095de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	22ff      	movs	r2, #255	; 0xff
 80095e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095e8:	f001 fdb6 	bl	800b158 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095ec:	f001 fd86 	bl	800b0fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095f8:	e011      	b.n	800961e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d012      	beq.n	8009628 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3310      	adds	r3, #16
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fd6a 	bl	800a0e0 <xTaskRemoveFromEventList>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009612:	f000 fe3d 	bl	800a290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	3b01      	subs	r3, #1
 800961a:	b2db      	uxtb	r3, r3
 800961c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800961e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009622:	2b00      	cmp	r3, #0
 8009624:	dce9      	bgt.n	80095fa <prvUnlockQueue+0x60>
 8009626:	e000      	b.n	800962a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009628:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	22ff      	movs	r2, #255	; 0xff
 800962e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009632:	f001 fd91 	bl	800b158 <vPortExitCritical>
}
 8009636:	bf00      	nop
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009646:	f001 fd59 	bl	800b0fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964e:	2b00      	cmp	r3, #0
 8009650:	d102      	bne.n	8009658 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009652:	2301      	movs	r3, #1
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	e001      	b.n	800965c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800965c:	f001 fd7c 	bl	800b158 <vPortExitCritical>

	return xReturn;
 8009660:	68fb      	ldr	r3, [r7, #12]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009672:	f001 fd43 	bl	800b0fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967e:	429a      	cmp	r2, r3
 8009680:	d102      	bne.n	8009688 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009682:	2301      	movs	r3, #1
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	e001      	b.n	800968c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009688:	2300      	movs	r3, #0
 800968a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800968c:	f001 fd64 	bl	800b158 <vPortExitCritical>

	return xReturn;
 8009690:	68fb      	ldr	r3, [r7, #12]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096a6:	2300      	movs	r3, #0
 80096a8:	60fb      	str	r3, [r7, #12]
 80096aa:	e014      	b.n	80096d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096ac:	4a0e      	ldr	r2, [pc, #56]	; (80096e8 <vQueueAddToRegistry+0x4c>)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10b      	bne.n	80096d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096b8:	490b      	ldr	r1, [pc, #44]	; (80096e8 <vQueueAddToRegistry+0x4c>)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096c2:	4a09      	ldr	r2, [pc, #36]	; (80096e8 <vQueueAddToRegistry+0x4c>)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	4413      	add	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096ce:	e005      	b.n	80096dc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3301      	adds	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b07      	cmp	r3, #7
 80096da:	d9e7      	bls.n	80096ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096dc:	bf00      	nop
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	20005700 	.word	0x20005700

080096ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096fc:	f001 fcfe 	bl	800b0fc <vPortEnterCritical>
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009706:	b25b      	sxtb	r3, r3
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970c:	d103      	bne.n	8009716 <vQueueWaitForMessageRestricted+0x2a>
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800971c:	b25b      	sxtb	r3, r3
 800971e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009722:	d103      	bne.n	800972c <vQueueWaitForMessageRestricted+0x40>
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800972c:	f001 fd14 	bl	800b158 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	3324      	adds	r3, #36	; 0x24
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	68b9      	ldr	r1, [r7, #8]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fca3 	bl	800a08c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009746:	6978      	ldr	r0, [r7, #20]
 8009748:	f7ff ff27 	bl	800959a <prvUnlockQueue>
	}
 800974c:	bf00      	nop
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08e      	sub	sp, #56	; 0x38
 8009758:	af04      	add	r7, sp, #16
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009764:	2b00      	cmp	r3, #0
 8009766:	d109      	bne.n	800977c <xTaskCreateStatic+0x28>
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	623b      	str	r3, [r7, #32]
 800977a:	e7fe      	b.n	800977a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	2b00      	cmp	r3, #0
 8009780:	d109      	bne.n	8009796 <xTaskCreateStatic+0x42>
 8009782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	61fb      	str	r3, [r7, #28]
 8009794:	e7fe      	b.n	8009794 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009796:	235c      	movs	r3, #92	; 0x5c
 8009798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2b5c      	cmp	r3, #92	; 0x5c
 800979e:	d009      	beq.n	80097b4 <xTaskCreateStatic+0x60>
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	61bb      	str	r3, [r7, #24]
 80097b2:	e7fe      	b.n	80097b2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d01e      	beq.n	80097fa <xTaskCreateStatic+0xa6>
 80097bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d01b      	beq.n	80097fa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097d4:	2300      	movs	r3, #0
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	9302      	str	r3, [sp, #8]
 80097dc:	f107 0314 	add.w	r3, r7, #20
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	68b9      	ldr	r1, [r7, #8]
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 f850 	bl	8009892 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097f4:	f000 f8dc 	bl	80099b0 <prvAddNewTaskToReadyList>
 80097f8:	e001      	b.n	80097fe <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097fe:	697b      	ldr	r3, [r7, #20]
	}
 8009800:	4618      	mov	r0, r3
 8009802:	3728      	adds	r7, #40	; 0x28
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08c      	sub	sp, #48	; 0x30
 800980c:	af04      	add	r7, sp, #16
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	4613      	mov	r3, r2
 8009816:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009818:	88fb      	ldrh	r3, [r7, #6]
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4618      	mov	r0, r3
 800981e:	f001 fd87 	bl	800b330 <pvPortMalloc>
 8009822:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00e      	beq.n	8009848 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800982a:	205c      	movs	r0, #92	; 0x5c
 800982c:	f001 fd80 	bl	800b330 <pvPortMalloc>
 8009830:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	631a      	str	r2, [r3, #48]	; 0x30
 800983e:	e005      	b.n	800984c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009840:	6978      	ldr	r0, [r7, #20]
 8009842:	f001 fe37 	bl	800b4b4 <vPortFree>
 8009846:	e001      	b.n	800984c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009848:	2300      	movs	r3, #0
 800984a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d017      	beq.n	8009882 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800985a:	88fa      	ldrh	r2, [r7, #6]
 800985c:	2300      	movs	r3, #0
 800985e:	9303      	str	r3, [sp, #12]
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	9302      	str	r3, [sp, #8]
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68b9      	ldr	r1, [r7, #8]
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 f80e 	bl	8009892 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009876:	69f8      	ldr	r0, [r7, #28]
 8009878:	f000 f89a 	bl	80099b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800987c:	2301      	movs	r3, #1
 800987e:	61bb      	str	r3, [r7, #24]
 8009880:	e002      	b.n	8009888 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009882:	f04f 33ff 	mov.w	r3, #4294967295
 8009886:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009888:	69bb      	ldr	r3, [r7, #24]
	}
 800988a:	4618      	mov	r0, r3
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b088      	sub	sp, #32
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	461a      	mov	r2, r3
 80098aa:	21a5      	movs	r1, #165	; 0xa5
 80098ac:	f002 fa5d 	bl	800bd6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098ba:	3b01      	subs	r3, #1
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	f023 0307 	bic.w	r3, r3, #7
 80098c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d009      	beq.n	80098e8 <prvInitialiseNewTask+0x56>
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	617b      	str	r3, [r7, #20]
 80098e6:	e7fe      	b.n	80098e6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01f      	beq.n	800992e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098ee:	2300      	movs	r3, #0
 80098f0:	61fb      	str	r3, [r7, #28]
 80098f2:	e012      	b.n	800991a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	4413      	add	r3, r2
 80098fa:	7819      	ldrb	r1, [r3, #0]
 80098fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	3334      	adds	r3, #52	; 0x34
 8009904:	460a      	mov	r2, r1
 8009906:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d006      	beq.n	8009922 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	3301      	adds	r3, #1
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	2b0f      	cmp	r3, #15
 800991e:	d9e9      	bls.n	80098f4 <prvInitialiseNewTask+0x62>
 8009920:	e000      	b.n	8009924 <prvInitialiseNewTask+0x92>
			{
				break;
 8009922:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800992c:	e003      	b.n	8009936 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	2b37      	cmp	r3, #55	; 0x37
 800993a:	d901      	bls.n	8009940 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800993c:	2337      	movs	r3, #55	; 0x37
 800993e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009944:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800994a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	2200      	movs	r2, #0
 8009950:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	3304      	adds	r3, #4
 8009956:	4618      	mov	r0, r3
 8009958:	f7fe fee0 	bl	800871c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	3318      	adds	r3, #24
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe fedb 	bl	800871c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997e:	2200      	movs	r2, #0
 8009980:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	68f9      	ldr	r1, [r7, #12]
 800998e:	69b8      	ldr	r0, [r7, #24]
 8009990:	f001 fa8c 	bl	800aeac <pxPortInitialiseStack>
 8009994:	4602      	mov	r2, r0
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099a6:	bf00      	nop
 80099a8:	3720      	adds	r7, #32
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099b8:	f001 fba0 	bl	800b0fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099bc:	4b2d      	ldr	r3, [pc, #180]	; (8009a74 <prvAddNewTaskToReadyList+0xc4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	4a2c      	ldr	r2, [pc, #176]	; (8009a74 <prvAddNewTaskToReadyList+0xc4>)
 80099c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099c6:	4b2c      	ldr	r3, [pc, #176]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099ce:	4a2a      	ldr	r2, [pc, #168]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099d4:	4b27      	ldr	r3, [pc, #156]	; (8009a74 <prvAddNewTaskToReadyList+0xc4>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d110      	bne.n	80099fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099dc:	f000 fc7c 	bl	800a2d8 <prvInitialiseTaskLists>
 80099e0:	e00d      	b.n	80099fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099e2:	4b26      	ldr	r3, [pc, #152]	; (8009a7c <prvAddNewTaskToReadyList+0xcc>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099ea:	4b23      	ldr	r3, [pc, #140]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d802      	bhi.n	80099fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099f8:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099fe:	4b20      	ldr	r3, [pc, #128]	; (8009a80 <prvAddNewTaskToReadyList+0xd0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3301      	adds	r3, #1
 8009a04:	4a1e      	ldr	r2, [pc, #120]	; (8009a80 <prvAddNewTaskToReadyList+0xd0>)
 8009a06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <prvAddNewTaskToReadyList+0xd0>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a14:	4b1b      	ldr	r3, [pc, #108]	; (8009a84 <prvAddNewTaskToReadyList+0xd4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d903      	bls.n	8009a24 <prvAddNewTaskToReadyList+0x74>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	4a18      	ldr	r2, [pc, #96]	; (8009a84 <prvAddNewTaskToReadyList+0xd4>)
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4a15      	ldr	r2, [pc, #84]	; (8009a88 <prvAddNewTaskToReadyList+0xd8>)
 8009a32:	441a      	add	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	f7fe fe7b 	bl	8008736 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a40:	f001 fb8a 	bl	800b158 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a44:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <prvAddNewTaskToReadyList+0xcc>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00e      	beq.n	8009a6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d207      	bcs.n	8009a6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <prvAddNewTaskToReadyList+0xdc>)
 8009a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a6a:	bf00      	nop
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	20001708 	.word	0x20001708
 8009a78:	20001234 	.word	0x20001234
 8009a7c:	20001714 	.word	0x20001714
 8009a80:	20001724 	.word	0x20001724
 8009a84:	20001710 	.word	0x20001710
 8009a88:	20001238 	.word	0x20001238
 8009a8c:	e000ed04 	.word	0xe000ed04

08009a90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d016      	beq.n	8009ad0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009aa2:	4b13      	ldr	r3, [pc, #76]	; (8009af0 <vTaskDelay+0x60>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d009      	beq.n	8009abe <vTaskDelay+0x2e>
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	60bb      	str	r3, [r7, #8]
 8009abc:	e7fe      	b.n	8009abc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009abe:	f000 f8f3 	bl	8009ca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fe57 	bl	800a778 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009aca:	f000 f8fb 	bl	8009cc4 <xTaskResumeAll>
 8009ace:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d107      	bne.n	8009ae6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009ad6:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <vTaskDelay+0x64>)
 8009ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20001730 	.word	0x20001730
 8009af4:	e000ed04 	.word	0xe000ed04

08009af8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009b00:	f001 fafc 	bl	800b0fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <vTaskSuspend+0x18>
 8009b0a:	4b2f      	ldr	r3, [pc, #188]	; (8009bc8 <vTaskSuspend+0xd0>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	e000      	b.n	8009b12 <vTaskSuspend+0x1a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3304      	adds	r3, #4
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe fe69 	bl	80087f0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d004      	beq.n	8009b30 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3318      	adds	r3, #24
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe fe60 	bl	80087f0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4619      	mov	r1, r3
 8009b36:	4825      	ldr	r0, [pc, #148]	; (8009bcc <vTaskSuspend+0xd4>)
 8009b38:	f7fe fdfd 	bl	8008736 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d103      	bne.n	8009b50 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009b50:	f001 fb02 	bl	800b158 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009b54:	4b1e      	ldr	r3, [pc, #120]	; (8009bd0 <vTaskSuspend+0xd8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009b5c:	f001 face 	bl	800b0fc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009b60:	f000 fc54 	bl	800a40c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009b64:	f001 faf8 	bl	800b158 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009b68:	4b17      	ldr	r3, [pc, #92]	; (8009bc8 <vTaskSuspend+0xd0>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d126      	bne.n	8009bc0 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8009b72:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <vTaskSuspend+0xd8>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d016      	beq.n	8009ba8 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009b7a:	4b16      	ldr	r3, [pc, #88]	; (8009bd4 <vTaskSuspend+0xdc>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d009      	beq.n	8009b96 <vTaskSuspend+0x9e>
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	60bb      	str	r3, [r7, #8]
 8009b94:	e7fe      	b.n	8009b94 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8009b96:	4b10      	ldr	r3, [pc, #64]	; (8009bd8 <vTaskSuspend+0xe0>)
 8009b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ba6:	e00b      	b.n	8009bc0 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009ba8:	4b08      	ldr	r3, [pc, #32]	; (8009bcc <vTaskSuspend+0xd4>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <vTaskSuspend+0xe4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d103      	bne.n	8009bbc <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8009bb4:	4b04      	ldr	r3, [pc, #16]	; (8009bc8 <vTaskSuspend+0xd0>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
	}
 8009bba:	e001      	b.n	8009bc0 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8009bbc:	f000 f9e6 	bl	8009f8c <vTaskSwitchContext>
	}
 8009bc0:	bf00      	nop
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20001234 	.word	0x20001234
 8009bcc:	200016f4 	.word	0x200016f4
 8009bd0:	20001714 	.word	0x20001714
 8009bd4:	20001730 	.word	0x20001730
 8009bd8:	e000ed04 	.word	0xe000ed04
 8009bdc:	20001708 	.word	0x20001708

08009be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	; 0x28
 8009be4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bee:	463a      	mov	r2, r7
 8009bf0:	1d39      	adds	r1, r7, #4
 8009bf2:	f107 0308 	add.w	r3, r7, #8
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fd3c 	bl	8008674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	9202      	str	r2, [sp, #8]
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	2300      	movs	r3, #0
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	460a      	mov	r2, r1
 8009c0e:	4920      	ldr	r1, [pc, #128]	; (8009c90 <vTaskStartScheduler+0xb0>)
 8009c10:	4820      	ldr	r0, [pc, #128]	; (8009c94 <vTaskStartScheduler+0xb4>)
 8009c12:	f7ff fd9f 	bl	8009754 <xTaskCreateStatic>
 8009c16:	4602      	mov	r2, r0
 8009c18:	4b1f      	ldr	r3, [pc, #124]	; (8009c98 <vTaskStartScheduler+0xb8>)
 8009c1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c1c:	4b1e      	ldr	r3, [pc, #120]	; (8009c98 <vTaskStartScheduler+0xb8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c24:	2301      	movs	r3, #1
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	e001      	b.n	8009c2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d102      	bne.n	8009c3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c34:	f000 fdf4 	bl	800a820 <xTimerCreateTimerTask>
 8009c38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d115      	bne.n	8009c6c <vTaskStartScheduler+0x8c>
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c52:	4b12      	ldr	r3, [pc, #72]	; (8009c9c <vTaskStartScheduler+0xbc>)
 8009c54:	f04f 32ff 	mov.w	r2, #4294967295
 8009c58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c5a:	4b11      	ldr	r3, [pc, #68]	; (8009ca0 <vTaskStartScheduler+0xc0>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c60:	4b10      	ldr	r3, [pc, #64]	; (8009ca4 <vTaskStartScheduler+0xc4>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c66:	f001 f9ab 	bl	800afc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c6a:	e00d      	b.n	8009c88 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d109      	bne.n	8009c88 <vTaskStartScheduler+0xa8>
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	e7fe      	b.n	8009c86 <vTaskStartScheduler+0xa6>
}
 8009c88:	bf00      	nop
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	0800c660 	.word	0x0800c660
 8009c94:	0800a2a9 	.word	0x0800a2a9
 8009c98:	2000172c 	.word	0x2000172c
 8009c9c:	20001728 	.word	0x20001728
 8009ca0:	20001714 	.word	0x20001714
 8009ca4:	2000170c 	.word	0x2000170c

08009ca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009cac:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <vTaskSuspendAll+0x18>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	4a03      	ldr	r2, [pc, #12]	; (8009cc0 <vTaskSuspendAll+0x18>)
 8009cb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009cb6:	bf00      	nop
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	20001730 	.word	0x20001730

08009cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cd2:	4b41      	ldr	r3, [pc, #260]	; (8009dd8 <xTaskResumeAll+0x114>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d109      	bne.n	8009cee <xTaskResumeAll+0x2a>
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	e7fe      	b.n	8009cec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cee:	f001 fa05 	bl	800b0fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cf2:	4b39      	ldr	r3, [pc, #228]	; (8009dd8 <xTaskResumeAll+0x114>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	4a37      	ldr	r2, [pc, #220]	; (8009dd8 <xTaskResumeAll+0x114>)
 8009cfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cfc:	4b36      	ldr	r3, [pc, #216]	; (8009dd8 <xTaskResumeAll+0x114>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d162      	bne.n	8009dca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d04:	4b35      	ldr	r3, [pc, #212]	; (8009ddc <xTaskResumeAll+0x118>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d05e      	beq.n	8009dca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d0c:	e02f      	b.n	8009d6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d0e:	4b34      	ldr	r3, [pc, #208]	; (8009de0 <xTaskResumeAll+0x11c>)
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3318      	adds	r3, #24
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe fd68 	bl	80087f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3304      	adds	r3, #4
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe fd63 	bl	80087f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2e:	4b2d      	ldr	r3, [pc, #180]	; (8009de4 <xTaskResumeAll+0x120>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d903      	bls.n	8009d3e <xTaskResumeAll+0x7a>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	4a2a      	ldr	r2, [pc, #168]	; (8009de4 <xTaskResumeAll+0x120>)
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4a27      	ldr	r2, [pc, #156]	; (8009de8 <xTaskResumeAll+0x124>)
 8009d4c:	441a      	add	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3304      	adds	r3, #4
 8009d52:	4619      	mov	r1, r3
 8009d54:	4610      	mov	r0, r2
 8009d56:	f7fe fcee 	bl	8008736 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5e:	4b23      	ldr	r3, [pc, #140]	; (8009dec <xTaskResumeAll+0x128>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d302      	bcc.n	8009d6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009d68:	4b21      	ldr	r3, [pc, #132]	; (8009df0 <xTaskResumeAll+0x12c>)
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d6e:	4b1c      	ldr	r3, [pc, #112]	; (8009de0 <xTaskResumeAll+0x11c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1cb      	bne.n	8009d0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d7c:	f000 fb46 	bl	800a40c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d80:	4b1c      	ldr	r3, [pc, #112]	; (8009df4 <xTaskResumeAll+0x130>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d010      	beq.n	8009dae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d8c:	f000 f846 	bl	8009e1c <xTaskIncrementTick>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009d96:	4b16      	ldr	r3, [pc, #88]	; (8009df0 <xTaskResumeAll+0x12c>)
 8009d98:	2201      	movs	r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1f1      	bne.n	8009d8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009da8:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <xTaskResumeAll+0x130>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009dae:	4b10      	ldr	r3, [pc, #64]	; (8009df0 <xTaskResumeAll+0x12c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009db6:	2301      	movs	r3, #1
 8009db8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009dba:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <xTaskResumeAll+0x134>)
 8009dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009dca:	f001 f9c5 	bl	800b158 <vPortExitCritical>

	return xAlreadyYielded;
 8009dce:	68bb      	ldr	r3, [r7, #8]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20001730 	.word	0x20001730
 8009ddc:	20001708 	.word	0x20001708
 8009de0:	200016c8 	.word	0x200016c8
 8009de4:	20001710 	.word	0x20001710
 8009de8:	20001238 	.word	0x20001238
 8009dec:	20001234 	.word	0x20001234
 8009df0:	2000171c 	.word	0x2000171c
 8009df4:	20001718 	.word	0x20001718
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e02:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <xTaskGetTickCount+0x1c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e08:	687b      	ldr	r3, [r7, #4]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	2000170c 	.word	0x2000170c

08009e1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e26:	4b4e      	ldr	r3, [pc, #312]	; (8009f60 <xTaskIncrementTick+0x144>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f040 8088 	bne.w	8009f40 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e30:	4b4c      	ldr	r3, [pc, #304]	; (8009f64 <xTaskIncrementTick+0x148>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3301      	adds	r3, #1
 8009e36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e38:	4a4a      	ldr	r2, [pc, #296]	; (8009f64 <xTaskIncrementTick+0x148>)
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d11f      	bne.n	8009e84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e44:	4b48      	ldr	r3, [pc, #288]	; (8009f68 <xTaskIncrementTick+0x14c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d009      	beq.n	8009e62 <xTaskIncrementTick+0x46>
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	e7fe      	b.n	8009e60 <xTaskIncrementTick+0x44>
 8009e62:	4b41      	ldr	r3, [pc, #260]	; (8009f68 <xTaskIncrementTick+0x14c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	4b40      	ldr	r3, [pc, #256]	; (8009f6c <xTaskIncrementTick+0x150>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a3e      	ldr	r2, [pc, #248]	; (8009f68 <xTaskIncrementTick+0x14c>)
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	4a3e      	ldr	r2, [pc, #248]	; (8009f6c <xTaskIncrementTick+0x150>)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	4b3e      	ldr	r3, [pc, #248]	; (8009f70 <xTaskIncrementTick+0x154>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	4a3c      	ldr	r2, [pc, #240]	; (8009f70 <xTaskIncrementTick+0x154>)
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	f000 fac4 	bl	800a40c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e84:	4b3b      	ldr	r3, [pc, #236]	; (8009f74 <xTaskIncrementTick+0x158>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d349      	bcc.n	8009f22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e8e:	4b36      	ldr	r3, [pc, #216]	; (8009f68 <xTaskIncrementTick+0x14c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e98:	4b36      	ldr	r3, [pc, #216]	; (8009f74 <xTaskIncrementTick+0x158>)
 8009e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9e:	601a      	str	r2, [r3, #0]
					break;
 8009ea0:	e03f      	b.n	8009f22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea2:	4b31      	ldr	r3, [pc, #196]	; (8009f68 <xTaskIncrementTick+0x14c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d203      	bcs.n	8009ec2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009eba:	4a2e      	ldr	r2, [pc, #184]	; (8009f74 <xTaskIncrementTick+0x158>)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ec0:	e02f      	b.n	8009f22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe fc92 	bl	80087f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d004      	beq.n	8009ede <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	3318      	adds	r3, #24
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe fc89 	bl	80087f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee2:	4b25      	ldr	r3, [pc, #148]	; (8009f78 <xTaskIncrementTick+0x15c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d903      	bls.n	8009ef2 <xTaskIncrementTick+0xd6>
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	4a22      	ldr	r2, [pc, #136]	; (8009f78 <xTaskIncrementTick+0x15c>)
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4a1f      	ldr	r2, [pc, #124]	; (8009f7c <xTaskIncrementTick+0x160>)
 8009f00:	441a      	add	r2, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	3304      	adds	r3, #4
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f7fe fc14 	bl	8008736 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f12:	4b1b      	ldr	r3, [pc, #108]	; (8009f80 <xTaskIncrementTick+0x164>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d3b8      	bcc.n	8009e8e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f20:	e7b5      	b.n	8009e8e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f22:	4b17      	ldr	r3, [pc, #92]	; (8009f80 <xTaskIncrementTick+0x164>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f28:	4914      	ldr	r1, [pc, #80]	; (8009f7c <xTaskIncrementTick+0x160>)
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	440b      	add	r3, r1
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d907      	bls.n	8009f4a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e004      	b.n	8009f4a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009f40:	4b10      	ldr	r3, [pc, #64]	; (8009f84 <xTaskIncrementTick+0x168>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	4a0f      	ldr	r2, [pc, #60]	; (8009f84 <xTaskIncrementTick+0x168>)
 8009f48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <xTaskIncrementTick+0x16c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009f52:	2301      	movs	r3, #1
 8009f54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009f56:	697b      	ldr	r3, [r7, #20]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20001730 	.word	0x20001730
 8009f64:	2000170c 	.word	0x2000170c
 8009f68:	200016c0 	.word	0x200016c0
 8009f6c:	200016c4 	.word	0x200016c4
 8009f70:	20001720 	.word	0x20001720
 8009f74:	20001728 	.word	0x20001728
 8009f78:	20001710 	.word	0x20001710
 8009f7c:	20001238 	.word	0x20001238
 8009f80:	20001234 	.word	0x20001234
 8009f84:	20001718 	.word	0x20001718
 8009f88:	2000171c 	.word	0x2000171c

08009f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f92:	4b27      	ldr	r3, [pc, #156]	; (800a030 <vTaskSwitchContext+0xa4>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f9a:	4b26      	ldr	r3, [pc, #152]	; (800a034 <vTaskSwitchContext+0xa8>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fa0:	e040      	b.n	800a024 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009fa2:	4b24      	ldr	r3, [pc, #144]	; (800a034 <vTaskSwitchContext+0xa8>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa8:	4b23      	ldr	r3, [pc, #140]	; (800a038 <vTaskSwitchContext+0xac>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e00f      	b.n	8009fd0 <vTaskSwitchContext+0x44>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <vTaskSwitchContext+0x3e>
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	607b      	str	r3, [r7, #4]
 8009fc8:	e7fe      	b.n	8009fc8 <vTaskSwitchContext+0x3c>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]
 8009fd0:	491a      	ldr	r1, [pc, #104]	; (800a03c <vTaskSwitchContext+0xb0>)
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d0e5      	beq.n	8009fb0 <vTaskSwitchContext+0x24>
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4a13      	ldr	r2, [pc, #76]	; (800a03c <vTaskSwitchContext+0xb0>)
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60bb      	str	r3, [r7, #8]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	605a      	str	r2, [r3, #4]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	3308      	adds	r3, #8
 800a006:	429a      	cmp	r2, r3
 800a008:	d104      	bne.n	800a014 <vTaskSwitchContext+0x88>
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	605a      	str	r2, [r3, #4]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	4a09      	ldr	r2, [pc, #36]	; (800a040 <vTaskSwitchContext+0xb4>)
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	4a06      	ldr	r2, [pc, #24]	; (800a038 <vTaskSwitchContext+0xac>)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6013      	str	r3, [r2, #0]
}
 800a024:	bf00      	nop
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	20001730 	.word	0x20001730
 800a034:	2000171c 	.word	0x2000171c
 800a038:	20001710 	.word	0x20001710
 800a03c:	20001238 	.word	0x20001238
 800a040:	20001234 	.word	0x20001234

0800a044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d109      	bne.n	800a068 <vTaskPlaceOnEventList+0x24>
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e7fe      	b.n	800a066 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a068:	4b07      	ldr	r3, [pc, #28]	; (800a088 <vTaskPlaceOnEventList+0x44>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3318      	adds	r3, #24
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7fe fb84 	bl	800877e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a076:	2101      	movs	r1, #1
 800a078:	6838      	ldr	r0, [r7, #0]
 800a07a:	f000 fb7d 	bl	800a778 <prvAddCurrentTaskToDelayedList>
}
 800a07e:	bf00      	nop
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20001234 	.word	0x20001234

0800a08c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d109      	bne.n	800a0b2 <vTaskPlaceOnEventListRestricted+0x26>
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	e7fe      	b.n	800a0b0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0b2:	4b0a      	ldr	r3, [pc, #40]	; (800a0dc <vTaskPlaceOnEventListRestricted+0x50>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3318      	adds	r3, #24
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7fe fb3b 	bl	8008736 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	68b8      	ldr	r0, [r7, #8]
 800a0d0:	f000 fb52 	bl	800a778 <prvAddCurrentTaskToDelayedList>
	}
 800a0d4:	bf00      	nop
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20001234 	.word	0x20001234

0800a0e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d109      	bne.n	800a10a <xTaskRemoveFromEventList+0x2a>
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	e7fe      	b.n	800a108 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	3318      	adds	r3, #24
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe fb6e 	bl	80087f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a114:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <xTaskRemoveFromEventList+0xac>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d11d      	bne.n	800a158 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	3304      	adds	r3, #4
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fb65 	bl	80087f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a12a:	4b19      	ldr	r3, [pc, #100]	; (800a190 <xTaskRemoveFromEventList+0xb0>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d903      	bls.n	800a13a <xTaskRemoveFromEventList+0x5a>
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	4a16      	ldr	r2, [pc, #88]	; (800a190 <xTaskRemoveFromEventList+0xb0>)
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13e:	4613      	mov	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4a13      	ldr	r2, [pc, #76]	; (800a194 <xTaskRemoveFromEventList+0xb4>)
 800a148:	441a      	add	r2, r3
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	3304      	adds	r3, #4
 800a14e:	4619      	mov	r1, r3
 800a150:	4610      	mov	r0, r2
 800a152:	f7fe faf0 	bl	8008736 <vListInsertEnd>
 800a156:	e005      	b.n	800a164 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	3318      	adds	r3, #24
 800a15c:	4619      	mov	r1, r3
 800a15e:	480e      	ldr	r0, [pc, #56]	; (800a198 <xTaskRemoveFromEventList+0xb8>)
 800a160:	f7fe fae9 	bl	8008736 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <xTaskRemoveFromEventList+0xbc>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	429a      	cmp	r2, r3
 800a170:	d905      	bls.n	800a17e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a172:	2301      	movs	r3, #1
 800a174:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a176:	4b0a      	ldr	r3, [pc, #40]	; (800a1a0 <xTaskRemoveFromEventList+0xc0>)
 800a178:	2201      	movs	r2, #1
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	e001      	b.n	800a182 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a17e:	2300      	movs	r3, #0
 800a180:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a182:	697b      	ldr	r3, [r7, #20]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20001730 	.word	0x20001730
 800a190:	20001710 	.word	0x20001710
 800a194:	20001238 	.word	0x20001238
 800a198:	200016c8 	.word	0x200016c8
 800a19c:	20001234 	.word	0x20001234
 800a1a0:	2000171c 	.word	0x2000171c

0800a1a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1ac:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <vTaskInternalSetTimeOutState+0x24>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1b4:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <vTaskInternalSetTimeOutState+0x28>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	605a      	str	r2, [r3, #4]
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	20001720 	.word	0x20001720
 800a1cc:	2000170c 	.word	0x2000170c

0800a1d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d109      	bne.n	800a1f4 <xTaskCheckForTimeOut+0x24>
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	613b      	str	r3, [r7, #16]
 800a1f2:	e7fe      	b.n	800a1f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d109      	bne.n	800a20e <xTaskCheckForTimeOut+0x3e>
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	e7fe      	b.n	800a20c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a20e:	f000 ff75 	bl	800b0fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a212:	4b1d      	ldr	r3, [pc, #116]	; (800a288 <xTaskCheckForTimeOut+0xb8>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22a:	d102      	bne.n	800a232 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a22c:	2300      	movs	r3, #0
 800a22e:	61fb      	str	r3, [r7, #28]
 800a230:	e023      	b.n	800a27a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <xTaskCheckForTimeOut+0xbc>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d007      	beq.n	800a24e <xTaskCheckForTimeOut+0x7e>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	429a      	cmp	r2, r3
 800a246:	d302      	bcc.n	800a24e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a248:	2301      	movs	r3, #1
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	e015      	b.n	800a27a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	429a      	cmp	r2, r3
 800a256:	d20b      	bcs.n	800a270 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	1ad2      	subs	r2, r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f7ff ff9d 	bl	800a1a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61fb      	str	r3, [r7, #28]
 800a26e:	e004      	b.n	800a27a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a276:	2301      	movs	r3, #1
 800a278:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a27a:	f000 ff6d 	bl	800b158 <vPortExitCritical>

	return xReturn;
 800a27e:	69fb      	ldr	r3, [r7, #28]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	2000170c 	.word	0x2000170c
 800a28c:	20001720 	.word	0x20001720

0800a290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a294:	4b03      	ldr	r3, [pc, #12]	; (800a2a4 <vTaskMissedYield+0x14>)
 800a296:	2201      	movs	r2, #1
 800a298:	601a      	str	r2, [r3, #0]
}
 800a29a:	bf00      	nop
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	2000171c 	.word	0x2000171c

0800a2a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2b0:	f000 f852 	bl	800a358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2b4:	4b06      	ldr	r3, [pc, #24]	; (800a2d0 <prvIdleTask+0x28>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d9f9      	bls.n	800a2b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2bc:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <prvIdleTask+0x2c>)
 800a2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2cc:	e7f0      	b.n	800a2b0 <prvIdleTask+0x8>
 800a2ce:	bf00      	nop
 800a2d0:	20001238 	.word	0x20001238
 800a2d4:	e000ed04 	.word	0xe000ed04

0800a2d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2de:	2300      	movs	r3, #0
 800a2e0:	607b      	str	r3, [r7, #4]
 800a2e2:	e00c      	b.n	800a2fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4a12      	ldr	r2, [pc, #72]	; (800a338 <prvInitialiseTaskLists+0x60>)
 800a2f0:	4413      	add	r3, r2
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe f9f2 	bl	80086dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	607b      	str	r3, [r7, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b37      	cmp	r3, #55	; 0x37
 800a302:	d9ef      	bls.n	800a2e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a304:	480d      	ldr	r0, [pc, #52]	; (800a33c <prvInitialiseTaskLists+0x64>)
 800a306:	f7fe f9e9 	bl	80086dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a30a:	480d      	ldr	r0, [pc, #52]	; (800a340 <prvInitialiseTaskLists+0x68>)
 800a30c:	f7fe f9e6 	bl	80086dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a310:	480c      	ldr	r0, [pc, #48]	; (800a344 <prvInitialiseTaskLists+0x6c>)
 800a312:	f7fe f9e3 	bl	80086dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a316:	480c      	ldr	r0, [pc, #48]	; (800a348 <prvInitialiseTaskLists+0x70>)
 800a318:	f7fe f9e0 	bl	80086dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a31c:	480b      	ldr	r0, [pc, #44]	; (800a34c <prvInitialiseTaskLists+0x74>)
 800a31e:	f7fe f9dd 	bl	80086dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a322:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <prvInitialiseTaskLists+0x78>)
 800a324:	4a05      	ldr	r2, [pc, #20]	; (800a33c <prvInitialiseTaskLists+0x64>)
 800a326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a328:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <prvInitialiseTaskLists+0x7c>)
 800a32a:	4a05      	ldr	r2, [pc, #20]	; (800a340 <prvInitialiseTaskLists+0x68>)
 800a32c:	601a      	str	r2, [r3, #0]
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20001238 	.word	0x20001238
 800a33c:	20001698 	.word	0x20001698
 800a340:	200016ac 	.word	0x200016ac
 800a344:	200016c8 	.word	0x200016c8
 800a348:	200016dc 	.word	0x200016dc
 800a34c:	200016f4 	.word	0x200016f4
 800a350:	200016c0 	.word	0x200016c0
 800a354:	200016c4 	.word	0x200016c4

0800a358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a35e:	e019      	b.n	800a394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a360:	f000 fecc 	bl	800b0fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a364:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <prvCheckTasksWaitingTermination+0x4c>)
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3304      	adds	r3, #4
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fa3d 	bl	80087f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a376:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <prvCheckTasksWaitingTermination+0x50>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	4a0a      	ldr	r2, [pc, #40]	; (800a3a8 <prvCheckTasksWaitingTermination+0x50>)
 800a37e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a380:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <prvCheckTasksWaitingTermination+0x54>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3b01      	subs	r3, #1
 800a386:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <prvCheckTasksWaitingTermination+0x54>)
 800a388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a38a:	f000 fee5 	bl	800b158 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f80e 	bl	800a3b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <prvCheckTasksWaitingTermination+0x54>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e1      	bne.n	800a360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	200016dc 	.word	0x200016dc
 800a3a8:	20001708 	.word	0x20001708
 800a3ac:	200016f0 	.word	0x200016f0

0800a3b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d108      	bne.n	800a3d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f001 f874 	bl	800b4b4 <vPortFree>
				vPortFree( pxTCB );
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 f871 	bl	800b4b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3d2:	e017      	b.n	800a404 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d103      	bne.n	800a3e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f001 f868 	bl	800b4b4 <vPortFree>
	}
 800a3e4:	e00e      	b.n	800a404 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d009      	beq.n	800a404 <prvDeleteTCB+0x54>
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	e7fe      	b.n	800a402 <prvDeleteTCB+0x52>
	}
 800a404:	bf00      	nop
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a412:	4b0c      	ldr	r3, [pc, #48]	; (800a444 <prvResetNextTaskUnblockTime+0x38>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d104      	bne.n	800a426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a41c:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <prvResetNextTaskUnblockTime+0x3c>)
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295
 800a422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a424:	e008      	b.n	800a438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a426:	4b07      	ldr	r3, [pc, #28]	; (800a444 <prvResetNextTaskUnblockTime+0x38>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	4a04      	ldr	r2, [pc, #16]	; (800a448 <prvResetNextTaskUnblockTime+0x3c>)
 800a436:	6013      	str	r3, [r2, #0]
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	200016c0 	.word	0x200016c0
 800a448:	20001728 	.word	0x20001728

0800a44c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <xTaskGetCurrentTaskHandle+0x1c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a458:	687b      	ldr	r3, [r7, #4]
	}
 800a45a:	4618      	mov	r0, r3
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	20001234 	.word	0x20001234

0800a46c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a472:	4b0b      	ldr	r3, [pc, #44]	; (800a4a0 <xTaskGetSchedulerState+0x34>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a47a:	2301      	movs	r3, #1
 800a47c:	607b      	str	r3, [r7, #4]
 800a47e:	e008      	b.n	800a492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a480:	4b08      	ldr	r3, [pc, #32]	; (800a4a4 <xTaskGetSchedulerState+0x38>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d102      	bne.n	800a48e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a488:	2302      	movs	r3, #2
 800a48a:	607b      	str	r3, [r7, #4]
 800a48c:	e001      	b.n	800a492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a48e:	2300      	movs	r3, #0
 800a490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a492:	687b      	ldr	r3, [r7, #4]
	}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	20001714 	.word	0x20001714
 800a4a4:	20001730 	.word	0x20001730

0800a4a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d051      	beq.n	800a562 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c2:	4b2a      	ldr	r3, [pc, #168]	; (800a56c <xTaskPriorityInherit+0xc4>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d241      	bcs.n	800a550 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	db06      	blt.n	800a4e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4d4:	4b25      	ldr	r3, [pc, #148]	; (800a56c <xTaskPriorityInherit+0xc4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	6959      	ldr	r1, [r3, #20]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4a1f      	ldr	r2, [pc, #124]	; (800a570 <xTaskPriorityInherit+0xc8>)
 800a4f4:	4413      	add	r3, r2
 800a4f6:	4299      	cmp	r1, r3
 800a4f8:	d122      	bne.n	800a540 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe f976 	bl	80087f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a504:	4b19      	ldr	r3, [pc, #100]	; (800a56c <xTaskPriorityInherit+0xc4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a512:	4b18      	ldr	r3, [pc, #96]	; (800a574 <xTaskPriorityInherit+0xcc>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d903      	bls.n	800a522 <xTaskPriorityInherit+0x7a>
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	4a15      	ldr	r2, [pc, #84]	; (800a574 <xTaskPriorityInherit+0xcc>)
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a526:	4613      	mov	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4a10      	ldr	r2, [pc, #64]	; (800a570 <xTaskPriorityInherit+0xc8>)
 800a530:	441a      	add	r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	3304      	adds	r3, #4
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f7fe f8fc 	bl	8008736 <vListInsertEnd>
 800a53e:	e004      	b.n	800a54a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a540:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <xTaskPriorityInherit+0xc4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a54a:	2301      	movs	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	e008      	b.n	800a562 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <xTaskPriorityInherit+0xc4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d201      	bcs.n	800a562 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a55e:	2301      	movs	r3, #1
 800a560:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a562:	68fb      	ldr	r3, [r7, #12]
	}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	20001234 	.word	0x20001234
 800a570:	20001238 	.word	0x20001238
 800a574:	20001710 	.word	0x20001710

0800a578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a584:	2300      	movs	r3, #0
 800a586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d054      	beq.n	800a638 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a58e:	4b2d      	ldr	r3, [pc, #180]	; (800a644 <xTaskPriorityDisinherit+0xcc>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	429a      	cmp	r2, r3
 800a596:	d009      	beq.n	800a5ac <xTaskPriorityDisinherit+0x34>
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	60fb      	str	r3, [r7, #12]
 800a5aa:	e7fe      	b.n	800a5aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d109      	bne.n	800a5c8 <xTaskPriorityDisinherit+0x50>
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	60bb      	str	r3, [r7, #8]
 800a5c6:	e7fe      	b.n	800a5c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5cc:	1e5a      	subs	r2, r3, #1
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d02c      	beq.n	800a638 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d128      	bne.n	800a638 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe f900 	bl	80087f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a608:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <xTaskPriorityDisinherit+0xd0>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d903      	bls.n	800a618 <xTaskPriorityDisinherit+0xa0>
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	4a0c      	ldr	r2, [pc, #48]	; (800a648 <xTaskPriorityDisinherit+0xd0>)
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4a09      	ldr	r2, [pc, #36]	; (800a64c <xTaskPriorityDisinherit+0xd4>)
 800a626:	441a      	add	r2, r3
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fe f881 	bl	8008736 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a634:	2301      	movs	r3, #1
 800a636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a638:	697b      	ldr	r3, [r7, #20]
	}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20001234 	.word	0x20001234
 800a648:	20001710 	.word	0x20001710
 800a64c:	20001238 	.word	0x20001238

0800a650 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a65e:	2301      	movs	r3, #1
 800a660:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d068      	beq.n	800a73a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d109      	bne.n	800a684 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e7fe      	b.n	800a682 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d902      	bls.n	800a694 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	e002      	b.n	800a69a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a698:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69e:	69fa      	ldr	r2, [r7, #28]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d04a      	beq.n	800a73a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d145      	bne.n	800a73a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a6ae:	4b25      	ldr	r3, [pc, #148]	; (800a744 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d109      	bne.n	800a6cc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800a6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	60bb      	str	r3, [r7, #8]
 800a6ca:	e7fe      	b.n	800a6ca <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	69fa      	ldr	r2, [r7, #28]
 800a6d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	db04      	blt.n	800a6ea <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	6959      	ldr	r1, [r3, #20]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4a13      	ldr	r2, [pc, #76]	; (800a748 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a6fa:	4413      	add	r3, r2
 800a6fc:	4299      	cmp	r1, r3
 800a6fe:	d11c      	bne.n	800a73a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	3304      	adds	r3, #4
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe f873 	bl	80087f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70e:	4b0f      	ldr	r3, [pc, #60]	; (800a74c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	429a      	cmp	r2, r3
 800a714:	d903      	bls.n	800a71e <vTaskPriorityDisinheritAfterTimeout+0xce>
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71a:	4a0c      	ldr	r2, [pc, #48]	; (800a74c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a722:	4613      	mov	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4a07      	ldr	r2, [pc, #28]	; (800a748 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a72c:	441a      	add	r2, r3
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	3304      	adds	r3, #4
 800a732:	4619      	mov	r1, r3
 800a734:	4610      	mov	r0, r2
 800a736:	f7fd fffe 	bl	8008736 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a73a:	bf00      	nop
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20001234 	.word	0x20001234
 800a748:	20001238 	.word	0x20001238
 800a74c:	20001710 	.word	0x20001710

0800a750 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a754:	4b07      	ldr	r3, [pc, #28]	; (800a774 <pvTaskIncrementMutexHeldCount+0x24>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d004      	beq.n	800a766 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a75c:	4b05      	ldr	r3, [pc, #20]	; (800a774 <pvTaskIncrementMutexHeldCount+0x24>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a762:	3201      	adds	r2, #1
 800a764:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a766:	4b03      	ldr	r3, [pc, #12]	; (800a774 <pvTaskIncrementMutexHeldCount+0x24>)
 800a768:	681b      	ldr	r3, [r3, #0]
	}
 800a76a:	4618      	mov	r0, r3
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	20001234 	.word	0x20001234

0800a778 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a782:	4b21      	ldr	r3, [pc, #132]	; (800a808 <prvAddCurrentTaskToDelayedList+0x90>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a788:	4b20      	ldr	r3, [pc, #128]	; (800a80c <prvAddCurrentTaskToDelayedList+0x94>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe f82e 	bl	80087f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79a:	d10a      	bne.n	800a7b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d007      	beq.n	800a7b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7a2:	4b1a      	ldr	r3, [pc, #104]	; (800a80c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4819      	ldr	r0, [pc, #100]	; (800a810 <prvAddCurrentTaskToDelayedList+0x98>)
 800a7ac:	f7fd ffc3 	bl	8008736 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7b0:	e026      	b.n	800a800 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7ba:	4b14      	ldr	r3, [pc, #80]	; (800a80c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d209      	bcs.n	800a7de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7ca:	4b12      	ldr	r3, [pc, #72]	; (800a814 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	4b0f      	ldr	r3, [pc, #60]	; (800a80c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	f7fd ffd1 	bl	800877e <vListInsert>
}
 800a7dc:	e010      	b.n	800a800 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7de:	4b0e      	ldr	r3, [pc, #56]	; (800a818 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	4b0a      	ldr	r3, [pc, #40]	; (800a80c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	f7fd ffc7 	bl	800877e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d202      	bcs.n	800a800 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7fa:	4a08      	ldr	r2, [pc, #32]	; (800a81c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	6013      	str	r3, [r2, #0]
}
 800a800:	bf00      	nop
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	2000170c 	.word	0x2000170c
 800a80c:	20001234 	.word	0x20001234
 800a810:	200016f4 	.word	0x200016f4
 800a814:	200016c4 	.word	0x200016c4
 800a818:	200016c0 	.word	0x200016c0
 800a81c:	20001728 	.word	0x20001728

0800a820 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b08a      	sub	sp, #40	; 0x28
 800a824:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a82a:	f000 faff 	bl	800ae2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a82e:	4b1c      	ldr	r3, [pc, #112]	; (800a8a0 <xTimerCreateTimerTask+0x80>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d021      	beq.n	800a87a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a83e:	1d3a      	adds	r2, r7, #4
 800a840:	f107 0108 	add.w	r1, r7, #8
 800a844:	f107 030c 	add.w	r3, r7, #12
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fd ff2d 	bl	80086a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	9202      	str	r2, [sp, #8]
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	2302      	movs	r3, #2
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	2300      	movs	r3, #0
 800a85e:	460a      	mov	r2, r1
 800a860:	4910      	ldr	r1, [pc, #64]	; (800a8a4 <xTimerCreateTimerTask+0x84>)
 800a862:	4811      	ldr	r0, [pc, #68]	; (800a8a8 <xTimerCreateTimerTask+0x88>)
 800a864:	f7fe ff76 	bl	8009754 <xTaskCreateStatic>
 800a868:	4602      	mov	r2, r0
 800a86a:	4b10      	ldr	r3, [pc, #64]	; (800a8ac <xTimerCreateTimerTask+0x8c>)
 800a86c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a86e:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <xTimerCreateTimerTask+0x8c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a876:	2301      	movs	r3, #1
 800a878:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d109      	bne.n	800a894 <xTimerCreateTimerTask+0x74>
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	613b      	str	r3, [r7, #16]
 800a892:	e7fe      	b.n	800a892 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a894:	697b      	ldr	r3, [r7, #20]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20001764 	.word	0x20001764
 800a8a4:	0800c668 	.word	0x0800c668
 800a8a8:	0800a9e1 	.word	0x0800a9e1
 800a8ac:	20001768 	.word	0x20001768

0800a8b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08a      	sub	sp, #40	; 0x28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d109      	bne.n	800a8dc <xTimerGenericCommand+0x2c>
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	623b      	str	r3, [r7, #32]
 800a8da:	e7fe      	b.n	800a8da <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8dc:	4b19      	ldr	r3, [pc, #100]	; (800a944 <xTimerGenericCommand+0x94>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d02a      	beq.n	800a93a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b05      	cmp	r3, #5
 800a8f4:	dc18      	bgt.n	800a928 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8f6:	f7ff fdb9 	bl	800a46c <xTaskGetSchedulerState>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d109      	bne.n	800a914 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a900:	4b10      	ldr	r3, [pc, #64]	; (800a944 <xTimerGenericCommand+0x94>)
 800a902:	6818      	ldr	r0, [r3, #0]
 800a904:	f107 0110 	add.w	r1, r7, #16
 800a908:	2300      	movs	r3, #0
 800a90a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a90c:	f7fe f98c 	bl	8008c28 <xQueueGenericSend>
 800a910:	6278      	str	r0, [r7, #36]	; 0x24
 800a912:	e012      	b.n	800a93a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a914:	4b0b      	ldr	r3, [pc, #44]	; (800a944 <xTimerGenericCommand+0x94>)
 800a916:	6818      	ldr	r0, [r3, #0]
 800a918:	f107 0110 	add.w	r1, r7, #16
 800a91c:	2300      	movs	r3, #0
 800a91e:	2200      	movs	r2, #0
 800a920:	f7fe f982 	bl	8008c28 <xQueueGenericSend>
 800a924:	6278      	str	r0, [r7, #36]	; 0x24
 800a926:	e008      	b.n	800a93a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <xTimerGenericCommand+0x94>)
 800a92a:	6818      	ldr	r0, [r3, #0]
 800a92c:	f107 0110 	add.w	r1, r7, #16
 800a930:	2300      	movs	r3, #0
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	f7fe fa72 	bl	8008e1c <xQueueGenericSendFromISR>
 800a938:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3728      	adds	r7, #40	; 0x28
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20001764 	.word	0x20001764

0800a948 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a952:	4b22      	ldr	r3, [pc, #136]	; (800a9dc <prvProcessExpiredTimer+0x94>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	3304      	adds	r3, #4
 800a960:	4618      	mov	r0, r3
 800a962:	f7fd ff45 	bl	80087f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a96c:	f003 0304 	and.w	r3, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	d021      	beq.n	800a9b8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	699a      	ldr	r2, [r3, #24]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	18d1      	adds	r1, r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	6978      	ldr	r0, [r7, #20]
 800a982:	f000 f8d1 	bl	800ab28 <prvInsertTimerInActiveList>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01e      	beq.n	800a9ca <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a98c:	2300      	movs	r3, #0
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	2300      	movs	r3, #0
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	2100      	movs	r1, #0
 800a996:	6978      	ldr	r0, [r7, #20]
 800a998:	f7ff ff8a 	bl	800a8b0 <xTimerGenericCommand>
 800a99c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d112      	bne.n	800a9ca <prvProcessExpiredTimer+0x82>
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	e7fe      	b.n	800a9b6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9be:	f023 0301 	bic.w	r3, r3, #1
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	6978      	ldr	r0, [r7, #20]
 800a9d0:	4798      	blx	r3
}
 800a9d2:	bf00      	nop
 800a9d4:	3718      	adds	r7, #24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	2000175c 	.word	0x2000175c

0800a9e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9e8:	f107 0308 	add.w	r3, r7, #8
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 f857 	bl	800aaa0 <prvGetNextExpireTime>
 800a9f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 f803 	bl	800aa04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9fe:	f000 f8d5 	bl	800abac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa02:	e7f1      	b.n	800a9e8 <prvTimerTask+0x8>

0800aa04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa0e:	f7ff f94b 	bl	8009ca8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa12:	f107 0308 	add.w	r3, r7, #8
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f866 	bl	800aae8 <prvSampleTimeNow>
 800aa1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d130      	bne.n	800aa86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10a      	bne.n	800aa40 <prvProcessTimerOrBlockTask+0x3c>
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d806      	bhi.n	800aa40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa32:	f7ff f947 	bl	8009cc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa36:	68f9      	ldr	r1, [r7, #12]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7ff ff85 	bl	800a948 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa3e:	e024      	b.n	800aa8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d008      	beq.n	800aa58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa46:	4b13      	ldr	r3, [pc, #76]	; (800aa94 <prvProcessTimerOrBlockTask+0x90>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <prvProcessTimerOrBlockTask+0x50>
 800aa50:	2301      	movs	r3, #1
 800aa52:	e000      	b.n	800aa56 <prvProcessTimerOrBlockTask+0x52>
 800aa54:	2300      	movs	r3, #0
 800aa56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa58:	4b0f      	ldr	r3, [pc, #60]	; (800aa98 <prvProcessTimerOrBlockTask+0x94>)
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	4619      	mov	r1, r3
 800aa66:	f7fe fe41 	bl	80096ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa6a:	f7ff f92b 	bl	8009cc4 <xTaskResumeAll>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa74:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <prvProcessTimerOrBlockTask+0x98>)
 800aa76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	f3bf 8f6f 	isb	sy
}
 800aa84:	e001      	b.n	800aa8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa86:	f7ff f91d 	bl	8009cc4 <xTaskResumeAll>
}
 800aa8a:	bf00      	nop
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20001760 	.word	0x20001760
 800aa98:	20001764 	.word	0x20001764
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aaa8:	4b0e      	ldr	r3, [pc, #56]	; (800aae4 <prvGetNextExpireTime+0x44>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <prvGetNextExpireTime+0x16>
 800aab2:	2201      	movs	r2, #1
 800aab4:	e000      	b.n	800aab8 <prvGetNextExpireTime+0x18>
 800aab6:	2200      	movs	r2, #0
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d105      	bne.n	800aad0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aac4:	4b07      	ldr	r3, [pc, #28]	; (800aae4 <prvGetNextExpireTime+0x44>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	60fb      	str	r3, [r7, #12]
 800aace:	e001      	b.n	800aad4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aad0:	2300      	movs	r3, #0
 800aad2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aad4:	68fb      	ldr	r3, [r7, #12]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	2000175c 	.word	0x2000175c

0800aae8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aaf0:	f7ff f984 	bl	8009dfc <xTaskGetTickCount>
 800aaf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aaf6:	4b0b      	ldr	r3, [pc, #44]	; (800ab24 <prvSampleTimeNow+0x3c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d205      	bcs.n	800ab0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab00:	f000 f930 	bl	800ad64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
 800ab0a:	e002      	b.n	800ab12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab12:	4a04      	ldr	r2, [pc, #16]	; (800ab24 <prvSampleTimeNow+0x3c>)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab18:	68fb      	ldr	r3, [r7, #12]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	2000176c 	.word	0x2000176c

0800ab28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab36:	2300      	movs	r3, #0
 800ab38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d812      	bhi.n	800ab74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	1ad2      	subs	r2, r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d302      	bcc.n	800ab62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	617b      	str	r3, [r7, #20]
 800ab60:	e01b      	b.n	800ab9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab62:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <prvInsertTimerInActiveList+0x7c>)
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	f7fd fe06 	bl	800877e <vListInsert>
 800ab72:	e012      	b.n	800ab9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d206      	bcs.n	800ab8a <prvInsertTimerInActiveList+0x62>
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d302      	bcc.n	800ab8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab84:	2301      	movs	r3, #1
 800ab86:	617b      	str	r3, [r7, #20]
 800ab88:	e007      	b.n	800ab9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab8a:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <prvInsertTimerInActiveList+0x80>)
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3304      	adds	r3, #4
 800ab92:	4619      	mov	r1, r3
 800ab94:	4610      	mov	r0, r2
 800ab96:	f7fd fdf2 	bl	800877e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab9a:	697b      	ldr	r3, [r7, #20]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	20001760 	.word	0x20001760
 800aba8:	2000175c 	.word	0x2000175c

0800abac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b08e      	sub	sp, #56	; 0x38
 800abb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abb2:	e0c6      	b.n	800ad42 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	da17      	bge.n	800abea <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800abba:	1d3b      	adds	r3, r7, #4
 800abbc:	3304      	adds	r3, #4
 800abbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d109      	bne.n	800abda <prvProcessReceivedCommands+0x2e>
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	61fb      	str	r3, [r7, #28]
 800abd8:	e7fe      	b.n	800abd8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abe0:	6850      	ldr	r0, [r2, #4]
 800abe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abe4:	6892      	ldr	r2, [r2, #8]
 800abe6:	4611      	mov	r1, r2
 800abe8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f2c0 80a7 	blt.w	800ad40 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac00:	3304      	adds	r3, #4
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fd fdf4 	bl	80087f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac08:	463b      	mov	r3, r7
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff ff6c 	bl	800aae8 <prvSampleTimeNow>
 800ac10:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b09      	cmp	r3, #9
 800ac16:	f200 8094 	bhi.w	800ad42 <prvProcessReceivedCommands+0x196>
 800ac1a:	a201      	add	r2, pc, #4	; (adr r2, 800ac20 <prvProcessReceivedCommands+0x74>)
 800ac1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac20:	0800ac49 	.word	0x0800ac49
 800ac24:	0800ac49 	.word	0x0800ac49
 800ac28:	0800ac49 	.word	0x0800ac49
 800ac2c:	0800acbb 	.word	0x0800acbb
 800ac30:	0800accf 	.word	0x0800accf
 800ac34:	0800ad17 	.word	0x0800ad17
 800ac38:	0800ac49 	.word	0x0800ac49
 800ac3c:	0800ac49 	.word	0x0800ac49
 800ac40:	0800acbb 	.word	0x0800acbb
 800ac44:	0800accf 	.word	0x0800accf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac4e:	f043 0301 	orr.w	r3, r3, #1
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	18d1      	adds	r1, r2, r3
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac68:	f7ff ff5e 	bl	800ab28 <prvInsertTimerInActiveList>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d067      	beq.n	800ad42 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d05c      	beq.n	800ad42 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	441a      	add	r2, r3
 800ac90:	2300      	movs	r3, #0
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2300      	movs	r3, #0
 800ac96:	2100      	movs	r1, #0
 800ac98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac9a:	f7ff fe09 	bl	800a8b0 <xTimerGenericCommand>
 800ac9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d14d      	bne.n	800ad42 <prvProcessReceivedCommands+0x196>
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	61bb      	str	r3, [r7, #24]
 800acb8:	e7fe      	b.n	800acb8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc0:	f023 0301 	bic.w	r3, r3, #1
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800accc:	e039      	b.n	800ad42 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acd4:	f043 0301 	orr.w	r3, r3, #1
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ace6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d109      	bne.n	800ad02 <prvProcessReceivedCommands+0x156>
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	617b      	str	r3, [r7, #20]
 800ad00:	e7fe      	b.n	800ad00 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	18d1      	adds	r1, r2, r3
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad10:	f7ff ff0a 	bl	800ab28 <prvInsertTimerInActiveList>
					break;
 800ad14:	e015      	b.n	800ad42 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad1c:	f003 0302 	and.w	r3, r3, #2
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d103      	bne.n	800ad2c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800ad24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad26:	f000 fbc5 	bl	800b4b4 <vPortFree>
 800ad2a:	e00a      	b.n	800ad42 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad32:	f023 0301 	bic.w	r3, r3, #1
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad3e:	e000      	b.n	800ad42 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad42:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <prvProcessReceivedCommands+0x1b4>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	1d39      	adds	r1, r7, #4
 800ad48:	2200      	movs	r2, #0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe f8fa 	bl	8008f44 <xQueueReceive>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f47f af2e 	bne.w	800abb4 <prvProcessReceivedCommands+0x8>
	}
}
 800ad58:	bf00      	nop
 800ad5a:	3730      	adds	r7, #48	; 0x30
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20001764 	.word	0x20001764

0800ad64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad6a:	e047      	b.n	800adfc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad6c:	4b2d      	ldr	r3, [pc, #180]	; (800ae24 <prvSwitchTimerLists+0xc0>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad76:	4b2b      	ldr	r3, [pc, #172]	; (800ae24 <prvSwitchTimerLists+0xc0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3304      	adds	r3, #4
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fd fd33 	bl	80087f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6a1b      	ldr	r3, [r3, #32]
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d02d      	beq.n	800adfc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	4413      	add	r3, r2
 800ada8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d90e      	bls.n	800add0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adbe:	4b19      	ldr	r3, [pc, #100]	; (800ae24 <prvSwitchTimerLists+0xc0>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3304      	adds	r3, #4
 800adc6:	4619      	mov	r1, r3
 800adc8:	4610      	mov	r0, r2
 800adca:	f7fd fcd8 	bl	800877e <vListInsert>
 800adce:	e015      	b.n	800adfc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800add0:	2300      	movs	r3, #0
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	2300      	movs	r3, #0
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	2100      	movs	r1, #0
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f7ff fd68 	bl	800a8b0 <xTimerGenericCommand>
 800ade0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d109      	bne.n	800adfc <prvSwitchTimerLists+0x98>
 800ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	603b      	str	r3, [r7, #0]
 800adfa:	e7fe      	b.n	800adfa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adfc:	4b09      	ldr	r3, [pc, #36]	; (800ae24 <prvSwitchTimerLists+0xc0>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1b2      	bne.n	800ad6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae06:	4b07      	ldr	r3, [pc, #28]	; (800ae24 <prvSwitchTimerLists+0xc0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae0c:	4b06      	ldr	r3, [pc, #24]	; (800ae28 <prvSwitchTimerLists+0xc4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a04      	ldr	r2, [pc, #16]	; (800ae24 <prvSwitchTimerLists+0xc0>)
 800ae12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae14:	4a04      	ldr	r2, [pc, #16]	; (800ae28 <prvSwitchTimerLists+0xc4>)
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	6013      	str	r3, [r2, #0]
}
 800ae1a:	bf00      	nop
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	2000175c 	.word	0x2000175c
 800ae28:	20001760 	.word	0x20001760

0800ae2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae32:	f000 f963 	bl	800b0fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae36:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <prvCheckForValidListAndQueue+0x60>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d120      	bne.n	800ae80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae3e:	4814      	ldr	r0, [pc, #80]	; (800ae90 <prvCheckForValidListAndQueue+0x64>)
 800ae40:	f7fd fc4c 	bl	80086dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae44:	4813      	ldr	r0, [pc, #76]	; (800ae94 <prvCheckForValidListAndQueue+0x68>)
 800ae46:	f7fd fc49 	bl	80086dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae4a:	4b13      	ldr	r3, [pc, #76]	; (800ae98 <prvCheckForValidListAndQueue+0x6c>)
 800ae4c:	4a10      	ldr	r2, [pc, #64]	; (800ae90 <prvCheckForValidListAndQueue+0x64>)
 800ae4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae50:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <prvCheckForValidListAndQueue+0x70>)
 800ae52:	4a10      	ldr	r2, [pc, #64]	; (800ae94 <prvCheckForValidListAndQueue+0x68>)
 800ae54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae56:	2300      	movs	r3, #0
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	4b11      	ldr	r3, [pc, #68]	; (800aea0 <prvCheckForValidListAndQueue+0x74>)
 800ae5c:	4a11      	ldr	r2, [pc, #68]	; (800aea4 <prvCheckForValidListAndQueue+0x78>)
 800ae5e:	2110      	movs	r1, #16
 800ae60:	200a      	movs	r0, #10
 800ae62:	f7fd fd57 	bl	8008914 <xQueueGenericCreateStatic>
 800ae66:	4602      	mov	r2, r0
 800ae68:	4b08      	ldr	r3, [pc, #32]	; (800ae8c <prvCheckForValidListAndQueue+0x60>)
 800ae6a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <prvCheckForValidListAndQueue+0x60>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d005      	beq.n	800ae80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <prvCheckForValidListAndQueue+0x60>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	490b      	ldr	r1, [pc, #44]	; (800aea8 <prvCheckForValidListAndQueue+0x7c>)
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe fc0e 	bl	800969c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae80:	f000 f96a 	bl	800b158 <vPortExitCritical>
}
 800ae84:	bf00      	nop
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20001764 	.word	0x20001764
 800ae90:	20001734 	.word	0x20001734
 800ae94:	20001748 	.word	0x20001748
 800ae98:	2000175c 	.word	0x2000175c
 800ae9c:	20001760 	.word	0x20001760
 800aea0:	20001810 	.word	0x20001810
 800aea4:	20001770 	.word	0x20001770
 800aea8:	0800c670 	.word	0x0800c670

0800aeac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3b04      	subs	r3, #4
 800aebc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3b04      	subs	r3, #4
 800aeca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f023 0201 	bic.w	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3b04      	subs	r3, #4
 800aeda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aedc:	4a0c      	ldr	r2, [pc, #48]	; (800af10 <pxPortInitialiseStack+0x64>)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3b14      	subs	r3, #20
 800aee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3b04      	subs	r3, #4
 800aef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f06f 0202 	mvn.w	r2, #2
 800aefa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3b20      	subs	r3, #32
 800af00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af02:	68fb      	ldr	r3, [r7, #12]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	0800af15 	.word	0x0800af15

0800af14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <prvTaskExitError+0x50>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af26:	d009      	beq.n	800af3c <prvTaskExitError+0x28>
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	e7fe      	b.n	800af3a <prvTaskExitError+0x26>
 800af3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af4e:	bf00      	nop
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0fc      	beq.n	800af50 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20000054 	.word	0x20000054
	...

0800af70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af70:	4b07      	ldr	r3, [pc, #28]	; (800af90 <pxCurrentTCBConst2>)
 800af72:	6819      	ldr	r1, [r3, #0]
 800af74:	6808      	ldr	r0, [r1, #0]
 800af76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7a:	f380 8809 	msr	PSP, r0
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8811 	msr	BASEPRI, r0
 800af8a:	4770      	bx	lr
 800af8c:	f3af 8000 	nop.w

0800af90 <pxCurrentTCBConst2>:
 800af90:	20001234 	.word	0x20001234
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop

0800af98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af98:	4808      	ldr	r0, [pc, #32]	; (800afbc <prvPortStartFirstTask+0x24>)
 800af9a:	6800      	ldr	r0, [r0, #0]
 800af9c:	6800      	ldr	r0, [r0, #0]
 800af9e:	f380 8808 	msr	MSP, r0
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f380 8814 	msr	CONTROL, r0
 800afaa:	b662      	cpsie	i
 800afac:	b661      	cpsie	f
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	df00      	svc	0
 800afb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afba:	bf00      	nop
 800afbc:	e000ed08 	.word	0xe000ed08

0800afc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afc6:	4b44      	ldr	r3, [pc, #272]	; (800b0d8 <xPortStartScheduler+0x118>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a44      	ldr	r2, [pc, #272]	; (800b0dc <xPortStartScheduler+0x11c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d109      	bne.n	800afe4 <xPortStartScheduler+0x24>
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	613b      	str	r3, [r7, #16]
 800afe2:	e7fe      	b.n	800afe2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afe4:	4b3c      	ldr	r3, [pc, #240]	; (800b0d8 <xPortStartScheduler+0x118>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a3d      	ldr	r2, [pc, #244]	; (800b0e0 <xPortStartScheduler+0x120>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d109      	bne.n	800b002 <xPortStartScheduler+0x42>
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	e7fe      	b.n	800b000 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b002:	4b38      	ldr	r3, [pc, #224]	; (800b0e4 <xPortStartScheduler+0x124>)
 800b004:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	22ff      	movs	r2, #255	; 0xff
 800b012:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b01c:	78fb      	ldrb	r3, [r7, #3]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b024:	b2da      	uxtb	r2, r3
 800b026:	4b30      	ldr	r3, [pc, #192]	; (800b0e8 <xPortStartScheduler+0x128>)
 800b028:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b02a:	4b30      	ldr	r3, [pc, #192]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b02c:	2207      	movs	r2, #7
 800b02e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b030:	e009      	b.n	800b046 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b032:	4b2e      	ldr	r3, [pc, #184]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3b01      	subs	r3, #1
 800b038:	4a2c      	ldr	r2, [pc, #176]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b03a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b03c:	78fb      	ldrb	r3, [r7, #3]
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	005b      	lsls	r3, r3, #1
 800b042:	b2db      	uxtb	r3, r3
 800b044:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b046:	78fb      	ldrb	r3, [r7, #3]
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04e:	2b80      	cmp	r3, #128	; 0x80
 800b050:	d0ef      	beq.n	800b032 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b052:	4b26      	ldr	r3, [pc, #152]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f1c3 0307 	rsb	r3, r3, #7
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	d009      	beq.n	800b072 <xPortStartScheduler+0xb2>
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	60bb      	str	r3, [r7, #8]
 800b070:	e7fe      	b.n	800b070 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b072:	4b1e      	ldr	r3, [pc, #120]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	021b      	lsls	r3, r3, #8
 800b078:	4a1c      	ldr	r2, [pc, #112]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b07a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b07c:	4b1b      	ldr	r3, [pc, #108]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b084:	4a19      	ldr	r2, [pc, #100]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b086:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b090:	4b17      	ldr	r3, [pc, #92]	; (800b0f0 <xPortStartScheduler+0x130>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a16      	ldr	r2, [pc, #88]	; (800b0f0 <xPortStartScheduler+0x130>)
 800b096:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b09a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b09c:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <xPortStartScheduler+0x130>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a13      	ldr	r2, [pc, #76]	; (800b0f0 <xPortStartScheduler+0x130>)
 800b0a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0a8:	f000 f8d6 	bl	800b258 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0ac:	4b11      	ldr	r3, [pc, #68]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0b2:	f000 f8f5 	bl	800b2a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0b6:	4b10      	ldr	r3, [pc, #64]	; (800b0f8 <xPortStartScheduler+0x138>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a0f      	ldr	r2, [pc, #60]	; (800b0f8 <xPortStartScheduler+0x138>)
 800b0bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0c2:	f7ff ff69 	bl	800af98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0c6:	f7fe ff61 	bl	8009f8c <vTaskSwitchContext>
	prvTaskExitError();
 800b0ca:	f7ff ff23 	bl	800af14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	e000ed00 	.word	0xe000ed00
 800b0dc:	410fc271 	.word	0x410fc271
 800b0e0:	410fc270 	.word	0x410fc270
 800b0e4:	e000e400 	.word	0xe000e400
 800b0e8:	20001860 	.word	0x20001860
 800b0ec:	20001864 	.word	0x20001864
 800b0f0:	e000ed20 	.word	0xe000ed20
 800b0f4:	20000054 	.word	0x20000054
 800b0f8:	e000ef34 	.word	0xe000ef34

0800b0fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b114:	4b0e      	ldr	r3, [pc, #56]	; (800b150 <vPortEnterCritical+0x54>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	4a0d      	ldr	r2, [pc, #52]	; (800b150 <vPortEnterCritical+0x54>)
 800b11c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b11e:	4b0c      	ldr	r3, [pc, #48]	; (800b150 <vPortEnterCritical+0x54>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d10e      	bne.n	800b144 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <vPortEnterCritical+0x58>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d009      	beq.n	800b144 <vPortEnterCritical+0x48>
 800b130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	603b      	str	r3, [r7, #0]
 800b142:	e7fe      	b.n	800b142 <vPortEnterCritical+0x46>
	}
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	20000054 	.word	0x20000054
 800b154:	e000ed04 	.word	0xe000ed04

0800b158 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b15e:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <vPortExitCritical+0x4c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d109      	bne.n	800b17a <vPortExitCritical+0x22>
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	607b      	str	r3, [r7, #4]
 800b178:	e7fe      	b.n	800b178 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b17a:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <vPortExitCritical+0x4c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3b01      	subs	r3, #1
 800b180:	4a08      	ldr	r2, [pc, #32]	; (800b1a4 <vPortExitCritical+0x4c>)
 800b182:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b184:	4b07      	ldr	r3, [pc, #28]	; (800b1a4 <vPortExitCritical+0x4c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d104      	bne.n	800b196 <vPortExitCritical+0x3e>
 800b18c:	2300      	movs	r3, #0
 800b18e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	20000054 	.word	0x20000054
	...

0800b1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1b0:	f3ef 8009 	mrs	r0, PSP
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	4b15      	ldr	r3, [pc, #84]	; (800b210 <pxCurrentTCBConst>)
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	f01e 0f10 	tst.w	lr, #16
 800b1c0:	bf08      	it	eq
 800b1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ca:	6010      	str	r0, [r2, #0]
 800b1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b1d4:	f380 8811 	msr	BASEPRI, r0
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f7fe fed4 	bl	8009f8c <vTaskSwitchContext>
 800b1e4:	f04f 0000 	mov.w	r0, #0
 800b1e8:	f380 8811 	msr	BASEPRI, r0
 800b1ec:	bc09      	pop	{r0, r3}
 800b1ee:	6819      	ldr	r1, [r3, #0]
 800b1f0:	6808      	ldr	r0, [r1, #0]
 800b1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f6:	f01e 0f10 	tst.w	lr, #16
 800b1fa:	bf08      	it	eq
 800b1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b200:	f380 8809 	msr	PSP, r0
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	f3af 8000 	nop.w

0800b210 <pxCurrentTCBConst>:
 800b210:	20001234 	.word	0x20001234
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop

0800b218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b230:	f7fe fdf4 	bl	8009e1c <xTaskIncrementTick>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b23a:	4b06      	ldr	r3, [pc, #24]	; (800b254 <SysTick_Handler+0x3c>)
 800b23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	2300      	movs	r3, #0
 800b244:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b24c:	bf00      	nop
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	e000ed04 	.word	0xe000ed04

0800b258 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b25c:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <vPortSetupTimerInterrupt+0x34>)
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b262:	4b0b      	ldr	r3, [pc, #44]	; (800b290 <vPortSetupTimerInterrupt+0x38>)
 800b264:	2200      	movs	r2, #0
 800b266:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b268:	4b0a      	ldr	r3, [pc, #40]	; (800b294 <vPortSetupTimerInterrupt+0x3c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a0a      	ldr	r2, [pc, #40]	; (800b298 <vPortSetupTimerInterrupt+0x40>)
 800b26e:	fba2 2303 	umull	r2, r3, r2, r3
 800b272:	099b      	lsrs	r3, r3, #6
 800b274:	4a09      	ldr	r2, [pc, #36]	; (800b29c <vPortSetupTimerInterrupt+0x44>)
 800b276:	3b01      	subs	r3, #1
 800b278:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b27a:	4b04      	ldr	r3, [pc, #16]	; (800b28c <vPortSetupTimerInterrupt+0x34>)
 800b27c:	2207      	movs	r2, #7
 800b27e:	601a      	str	r2, [r3, #0]
}
 800b280:	bf00      	nop
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	e000e010 	.word	0xe000e010
 800b290:	e000e018 	.word	0xe000e018
 800b294:	20000028 	.word	0x20000028
 800b298:	10624dd3 	.word	0x10624dd3
 800b29c:	e000e014 	.word	0xe000e014

0800b2a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2b0 <vPortEnableVFP+0x10>
 800b2a4:	6801      	ldr	r1, [r0, #0]
 800b2a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2aa:	6001      	str	r1, [r0, #0]
 800b2ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2ae:	bf00      	nop
 800b2b0:	e000ed88 	.word	0xe000ed88

0800b2b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ba:	f3ef 8305 	mrs	r3, IPSR
 800b2be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2b0f      	cmp	r3, #15
 800b2c4:	d913      	bls.n	800b2ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2c6:	4a16      	ldr	r2, [pc, #88]	; (800b320 <vPortValidateInterruptPriority+0x6c>)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2d0:	4b14      	ldr	r3, [pc, #80]	; (800b324 <vPortValidateInterruptPriority+0x70>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	7afa      	ldrb	r2, [r7, #11]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d209      	bcs.n	800b2ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	607b      	str	r3, [r7, #4]
 800b2ec:	e7fe      	b.n	800b2ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2ee:	4b0e      	ldr	r3, [pc, #56]	; (800b328 <vPortValidateInterruptPriority+0x74>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	; (800b32c <vPortValidateInterruptPriority+0x78>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d909      	bls.n	800b312 <vPortValidateInterruptPriority+0x5e>
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	603b      	str	r3, [r7, #0]
 800b310:	e7fe      	b.n	800b310 <vPortValidateInterruptPriority+0x5c>
	}
 800b312:	bf00      	nop
 800b314:	3714      	adds	r7, #20
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	e000e3f0 	.word	0xe000e3f0
 800b324:	20001860 	.word	0x20001860
 800b328:	e000ed0c 	.word	0xe000ed0c
 800b32c:	20001864 	.word	0x20001864

0800b330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08a      	sub	sp, #40	; 0x28
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b338:	2300      	movs	r3, #0
 800b33a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b33c:	f7fe fcb4 	bl	8009ca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b340:	4b57      	ldr	r3, [pc, #348]	; (800b4a0 <pvPortMalloc+0x170>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b348:	f000 f90c 	bl	800b564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b34c:	4b55      	ldr	r3, [pc, #340]	; (800b4a4 <pvPortMalloc+0x174>)
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4013      	ands	r3, r2
 800b354:	2b00      	cmp	r3, #0
 800b356:	f040 808c 	bne.w	800b472 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d01c      	beq.n	800b39a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b360:	2208      	movs	r2, #8
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4413      	add	r3, r2
 800b366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f003 0307 	and.w	r3, r3, #7
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d013      	beq.n	800b39a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f023 0307 	bic.w	r3, r3, #7
 800b378:	3308      	adds	r3, #8
 800b37a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	2b00      	cmp	r3, #0
 800b384:	d009      	beq.n	800b39a <pvPortMalloc+0x6a>
 800b386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	e7fe      	b.n	800b398 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d068      	beq.n	800b472 <pvPortMalloc+0x142>
 800b3a0:	4b41      	ldr	r3, [pc, #260]	; (800b4a8 <pvPortMalloc+0x178>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d863      	bhi.n	800b472 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3aa:	4b40      	ldr	r3, [pc, #256]	; (800b4ac <pvPortMalloc+0x17c>)
 800b3ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3ae:	4b3f      	ldr	r3, [pc, #252]	; (800b4ac <pvPortMalloc+0x17c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3b4:	e004      	b.n	800b3c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d903      	bls.n	800b3d2 <pvPortMalloc+0xa2>
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1f1      	bne.n	800b3b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3d2:	4b33      	ldr	r3, [pc, #204]	; (800b4a0 <pvPortMalloc+0x170>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d04a      	beq.n	800b472 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3dc:	6a3b      	ldr	r3, [r7, #32]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2208      	movs	r2, #8
 800b3e2:	4413      	add	r3, r2
 800b3e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	1ad2      	subs	r2, r2, r3
 800b3f6:	2308      	movs	r3, #8
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d91e      	bls.n	800b43c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4413      	add	r3, r2
 800b404:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	f003 0307 	and.w	r3, r3, #7
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d009      	beq.n	800b424 <pvPortMalloc+0xf4>
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	613b      	str	r3, [r7, #16]
 800b422:	e7fe      	b.n	800b422 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	685a      	ldr	r2, [r3, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	1ad2      	subs	r2, r2, r3
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b436:	69b8      	ldr	r0, [r7, #24]
 800b438:	f000 f8f6 	bl	800b628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b43c:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <pvPortMalloc+0x178>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	4a18      	ldr	r2, [pc, #96]	; (800b4a8 <pvPortMalloc+0x178>)
 800b448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b44a:	4b17      	ldr	r3, [pc, #92]	; (800b4a8 <pvPortMalloc+0x178>)
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	4b18      	ldr	r3, [pc, #96]	; (800b4b0 <pvPortMalloc+0x180>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	429a      	cmp	r2, r3
 800b454:	d203      	bcs.n	800b45e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b456:	4b14      	ldr	r3, [pc, #80]	; (800b4a8 <pvPortMalloc+0x178>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a15      	ldr	r2, [pc, #84]	; (800b4b0 <pvPortMalloc+0x180>)
 800b45c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	685a      	ldr	r2, [r3, #4]
 800b462:	4b10      	ldr	r3, [pc, #64]	; (800b4a4 <pvPortMalloc+0x174>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	431a      	orrs	r2, r3
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b472:	f7fe fc27 	bl	8009cc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d009      	beq.n	800b494 <pvPortMalloc+0x164>
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	e7fe      	b.n	800b492 <pvPortMalloc+0x162>
	return pvReturn;
 800b494:	69fb      	ldr	r3, [r7, #28]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3728      	adds	r7, #40	; 0x28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	20005470 	.word	0x20005470
 800b4a4:	2000547c 	.word	0x2000547c
 800b4a8:	20005474 	.word	0x20005474
 800b4ac:	20005468 	.word	0x20005468
 800b4b0:	20005478 	.word	0x20005478

0800b4b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d046      	beq.n	800b554 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4c6:	2308      	movs	r3, #8
 800b4c8:	425b      	negs	r3, r3
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	685a      	ldr	r2, [r3, #4]
 800b4d8:	4b20      	ldr	r3, [pc, #128]	; (800b55c <vPortFree+0xa8>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4013      	ands	r3, r2
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <vPortFree+0x42>
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	e7fe      	b.n	800b4f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d009      	beq.n	800b512 <vPortFree+0x5e>
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60bb      	str	r3, [r7, #8]
 800b510:	e7fe      	b.n	800b510 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	4b11      	ldr	r3, [pc, #68]	; (800b55c <vPortFree+0xa8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4013      	ands	r3, r2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d019      	beq.n	800b554 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d115      	bne.n	800b554 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <vPortFree+0xa8>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	43db      	mvns	r3, r3
 800b532:	401a      	ands	r2, r3
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b538:	f7fe fbb6 	bl	8009ca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	4b07      	ldr	r3, [pc, #28]	; (800b560 <vPortFree+0xac>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4413      	add	r3, r2
 800b546:	4a06      	ldr	r2, [pc, #24]	; (800b560 <vPortFree+0xac>)
 800b548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b54a:	6938      	ldr	r0, [r7, #16]
 800b54c:	f000 f86c 	bl	800b628 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b550:	f7fe fbb8 	bl	8009cc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b554:	bf00      	nop
 800b556:	3718      	adds	r7, #24
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	2000547c 	.word	0x2000547c
 800b560:	20005474 	.word	0x20005474

0800b564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b56a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b56e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b570:	4b27      	ldr	r3, [pc, #156]	; (800b610 <prvHeapInit+0xac>)
 800b572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f003 0307 	and.w	r3, r3, #7
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00c      	beq.n	800b598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3307      	adds	r3, #7
 800b582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 0307 	bic.w	r3, r3, #7
 800b58a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	4a1f      	ldr	r2, [pc, #124]	; (800b610 <prvHeapInit+0xac>)
 800b594:	4413      	add	r3, r2
 800b596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b59c:	4a1d      	ldr	r2, [pc, #116]	; (800b614 <prvHeapInit+0xb0>)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5a2:	4b1c      	ldr	r3, [pc, #112]	; (800b614 <prvHeapInit+0xb0>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5b0:	2208      	movs	r2, #8
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	1a9b      	subs	r3, r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f023 0307 	bic.w	r3, r3, #7
 800b5be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	4a15      	ldr	r2, [pc, #84]	; (800b618 <prvHeapInit+0xb4>)
 800b5c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5c6:	4b14      	ldr	r3, [pc, #80]	; (800b618 <prvHeapInit+0xb4>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5ce:	4b12      	ldr	r3, [pc, #72]	; (800b618 <prvHeapInit+0xb4>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5e4:	4b0c      	ldr	r3, [pc, #48]	; (800b618 <prvHeapInit+0xb4>)
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	4a0a      	ldr	r2, [pc, #40]	; (800b61c <prvHeapInit+0xb8>)
 800b5f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	4a09      	ldr	r2, [pc, #36]	; (800b620 <prvHeapInit+0xbc>)
 800b5fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5fc:	4b09      	ldr	r3, [pc, #36]	; (800b624 <prvHeapInit+0xc0>)
 800b5fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b602:	601a      	str	r2, [r3, #0]
}
 800b604:	bf00      	nop
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	20001868 	.word	0x20001868
 800b614:	20005468 	.word	0x20005468
 800b618:	20005470 	.word	0x20005470
 800b61c:	20005478 	.word	0x20005478
 800b620:	20005474 	.word	0x20005474
 800b624:	2000547c 	.word	0x2000547c

0800b628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b630:	4b28      	ldr	r3, [pc, #160]	; (800b6d4 <prvInsertBlockIntoFreeList+0xac>)
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	e002      	b.n	800b63c <prvInsertBlockIntoFreeList+0x14>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	429a      	cmp	r2, r3
 800b644:	d8f7      	bhi.n	800b636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	4413      	add	r3, r2
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	429a      	cmp	r2, r3
 800b656:	d108      	bne.n	800b66a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	441a      	add	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	441a      	add	r2, r3
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d118      	bne.n	800b6b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d00d      	beq.n	800b6a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	441a      	add	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	e008      	b.n	800b6b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6a6:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	e003      	b.n	800b6b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d002      	beq.n	800b6c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6c6:	bf00      	nop
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	20005468 	.word	0x20005468
 800b6d8:	20005470 	.word	0x20005470

0800b6dc <MX_USB_HOST_Process>:
  *         Runs the usb host process and FSMs
  * @param  none
  * @retval none
  */
void MX_USB_HOST_Process(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b6e0:	4802      	ldr	r0, [pc, #8]	; (800b6ec <MX_USB_HOST_Process+0x10>)
 800b6e2:	f7fa ff03 	bl	80064ec <USBH_Process>
}
 800b6e6:	bf00      	nop
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20005740 	.word	0x20005740

0800b6f0 <MX_USB_HOST_SuspendThread>:
  *         this function is used to suspend the (broken) usb host thread auto-generated by CubeMX. It has to be done before the os is started, in order to avoid hardfaults.
  * @param  none
  * @retval none
  */
#if (USBH_USE_OS == 1)
void MX_USB_HOST_SuspendThread(void){
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
	osThreadSuspend((&hUsbHostFS)->thread);
 800b6f4:	4b03      	ldr	r3, [pc, #12]	; (800b704 <MX_USB_HOST_SuspendThread+0x14>)
 800b6f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fc fc28 	bl	8007f50 <osThreadSuspend>
}
 800b700:	bf00      	nop
 800b702:	bd80      	pop	{r7, pc}
 800b704:	20005740 	.word	0x20005740

0800b708 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

	/* Init host Library, add supported class and start the library. */
	/* This bypass the auto generated init in order to register the HID class */
	if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b70c:	2201      	movs	r2, #1
 800b70e:	490e      	ldr	r1, [pc, #56]	; (800b748 <MX_USB_HOST_Init+0x40>)
 800b710:	480e      	ldr	r0, [pc, #56]	; (800b74c <MX_USB_HOST_Init+0x44>)
 800b712:	f7fa fd9f 	bl	8006254 <USBH_Init>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <MX_USB_HOST_Init+0x18>
	{
		Error_Handler();
 800b71c:	f7f5 fa90 	bl	8000c40 <Error_Handler>
	}
	if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800b720:	490b      	ldr	r1, [pc, #44]	; (800b750 <MX_USB_HOST_Init+0x48>)
 800b722:	480a      	ldr	r0, [pc, #40]	; (800b74c <MX_USB_HOST_Init+0x44>)
 800b724:	f7fa fe46 	bl	80063b4 <USBH_RegisterClass>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <MX_USB_HOST_Init+0x2a>
	{
		Error_Handler();
 800b72e:	f7f5 fa87 	bl	8000c40 <Error_Handler>
	}
	if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b732:	4806      	ldr	r0, [pc, #24]	; (800b74c <MX_USB_HOST_Init+0x44>)
 800b734:	f7fa feca 	bl	80064cc <USBH_Start>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <MX_USB_HOST_Init+0x3c>
	{
		Error_Handler();
 800b73e:	f7f5 fa7f 	bl	8000c40 <Error_Handler>
	}
	return;
 800b742:	bf00      	nop
 800b744:	bf00      	nop
    Error_Handler();
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b746:	bd80      	pop	{r7, pc}
 800b748:	0800b755 	.word	0x0800b755
 800b74c:	20005740 	.word	0x20005740
 800b750:	2000002c 	.word	0x2000002c

0800b754 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b760:	78fb      	ldrb	r3, [r7, #3]
 800b762:	3b01      	subs	r3, #1
 800b764:	2b04      	cmp	r3, #4
 800b766:	d819      	bhi.n	800b79c <USBH_UserProcess+0x48>
 800b768:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <USBH_UserProcess+0x1c>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b79d 	.word	0x0800b79d
 800b774:	0800b78d 	.word	0x0800b78d
 800b778:	0800b79d 	.word	0x0800b79d
 800b77c:	0800b795 	.word	0x0800b795
 800b780:	0800b785 	.word	0x0800b785
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b784:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <USBH_UserProcess+0x58>)
 800b786:	2203      	movs	r2, #3
 800b788:	701a      	strb	r2, [r3, #0]
  break;
 800b78a:	e008      	b.n	800b79e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b78c:	4b07      	ldr	r3, [pc, #28]	; (800b7ac <USBH_UserProcess+0x58>)
 800b78e:	2202      	movs	r2, #2
 800b790:	701a      	strb	r2, [r3, #0]
  break;
 800b792:	e004      	b.n	800b79e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b794:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <USBH_UserProcess+0x58>)
 800b796:	2201      	movs	r2, #1
 800b798:	701a      	strb	r2, [r3, #0]
  break;
 800b79a:	e000      	b.n	800b79e <USBH_UserProcess+0x4a>

  default:
  break;
 800b79c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	20005480 	.word	0x20005480

0800b7b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08a      	sub	sp, #40	; 0x28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7b8:	f107 0314 	add.w	r3, r7, #20
 800b7bc:	2200      	movs	r2, #0
 800b7be:	601a      	str	r2, [r3, #0]
 800b7c0:	605a      	str	r2, [r3, #4]
 800b7c2:	609a      	str	r2, [r3, #8]
 800b7c4:	60da      	str	r2, [r3, #12]
 800b7c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d0:	d13a      	bne.n	800b848 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	613b      	str	r3, [r7, #16]
 800b7d6:	4b1e      	ldr	r3, [pc, #120]	; (800b850 <HAL_HCD_MspInit+0xa0>)
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7da:	4a1d      	ldr	r2, [pc, #116]	; (800b850 <HAL_HCD_MspInit+0xa0>)
 800b7dc:	f043 0301 	orr.w	r3, r3, #1
 800b7e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b7e2:	4b1b      	ldr	r3, [pc, #108]	; (800b850 <HAL_HCD_MspInit+0xa0>)
 800b7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	613b      	str	r3, [r7, #16]
 800b7ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b7ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b7f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b800:	230a      	movs	r3, #10
 800b802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b804:	f107 0314 	add.w	r3, r7, #20
 800b808:	4619      	mov	r1, r3
 800b80a:	4812      	ldr	r0, [pc, #72]	; (800b854 <HAL_HCD_MspInit+0xa4>)
 800b80c:	f7f6 fb14 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b810:	4b0f      	ldr	r3, [pc, #60]	; (800b850 <HAL_HCD_MspInit+0xa0>)
 800b812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b814:	4a0e      	ldr	r2, [pc, #56]	; (800b850 <HAL_HCD_MspInit+0xa0>)
 800b816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b81a:	6353      	str	r3, [r2, #52]	; 0x34
 800b81c:	2300      	movs	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <HAL_HCD_MspInit+0xa0>)
 800b822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b824:	4a0a      	ldr	r2, [pc, #40]	; (800b850 <HAL_HCD_MspInit+0xa0>)
 800b826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b82a:	6453      	str	r3, [r2, #68]	; 0x44
 800b82c:	4b08      	ldr	r3, [pc, #32]	; (800b850 <HAL_HCD_MspInit+0xa0>)
 800b82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b838:	2200      	movs	r2, #0
 800b83a:	2105      	movs	r1, #5
 800b83c:	2043      	movs	r0, #67	; 0x43
 800b83e:	f7f6 fad1 	bl	8001de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b842:	2043      	movs	r0, #67	; 0x43
 800b844:	f7f6 faea 	bl	8001e1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b848:	bf00      	nop
 800b84a:	3728      	adds	r7, #40	; 0x28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	40023800 	.word	0x40023800
 800b854:	40020000 	.word	0x40020000

0800b858 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b866:	4618      	mov	r0, r3
 800b868:	f7fb fadd 	bl	8006e26 <USBH_LL_IncTimer>
}
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b882:	4618      	mov	r0, r3
 800b884:	f7fb fb21 	bl	8006eca <USBH_LL_Connect>
}
 800b888:	bf00      	nop
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fb fb36 	bl	8006f10 <USBH_LL_Disconnect>
}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	70fb      	strb	r3, [r7, #3]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fb fb6d 	bl	8006fa2 <USBH_LL_NotifyURBChange>
#endif
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fb facb 	bl	8006e7a <USBH_LL_PortEnabled>
}
 800b8e4:	bf00      	nop
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fb fad7 	bl	8006eae <USBH_LL_PortDisabled>
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b916:	2b01      	cmp	r3, #1
 800b918:	d12a      	bne.n	800b970 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b91a:	4a18      	ldr	r2, [pc, #96]	; (800b97c <USBH_LL_Init+0x74>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a15      	ldr	r2, [pc, #84]	; (800b97c <USBH_LL_Init+0x74>)
 800b926:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b92a:	4b14      	ldr	r3, [pc, #80]	; (800b97c <USBH_LL_Init+0x74>)
 800b92c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b930:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800b932:	4b12      	ldr	r3, [pc, #72]	; (800b97c <USBH_LL_Init+0x74>)
 800b934:	220c      	movs	r2, #12
 800b936:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b938:	4b10      	ldr	r3, [pc, #64]	; (800b97c <USBH_LL_Init+0x74>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b93e:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <USBH_LL_Init+0x74>)
 800b940:	2200      	movs	r2, #0
 800b942:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b944:	4b0d      	ldr	r3, [pc, #52]	; (800b97c <USBH_LL_Init+0x74>)
 800b946:	2202      	movs	r2, #2
 800b948:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b94a:	4b0c      	ldr	r3, [pc, #48]	; (800b97c <USBH_LL_Init+0x74>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b950:	480a      	ldr	r0, [pc, #40]	; (800b97c <USBH_LL_Init+0x74>)
 800b952:	f7f6 fc1c 	bl	800218e <HAL_HCD_Init>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b95c:	f7f5 f970 	bl	8000c40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b960:	4806      	ldr	r0, [pc, #24]	; (800b97c <USBH_LL_Init+0x74>)
 800b962:	f7f7 f81f 	bl	80029a4 <HAL_HCD_GetCurrentFrame>
 800b966:	4603      	mov	r3, r0
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7fb fa4c 	bl	8006e08 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20005b24 	.word	0x20005b24

0800b980 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b996:	4618      	mov	r0, r3
 800b998:	f7f6 ff8c 	bl	80028b4 <HAL_HCD_Start>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 f95c 	bl	800bc60 <USBH_Get_USB_Status>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f6 ff94 	bl	80028fa <HAL_HCD_Stop>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 f941 	bl	800bc60 <USBH_Get_USB_Status>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7f6 ffde 	bl	80029c0 <HAL_HCD_GetCurrentSpeed>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d007      	beq.n	800ba1a <USBH_LL_GetSpeed+0x2e>
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d302      	bcc.n	800ba14 <USBH_LL_GetSpeed+0x28>
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d006      	beq.n	800ba20 <USBH_LL_GetSpeed+0x34>
 800ba12:	e008      	b.n	800ba26 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
    break;
 800ba18:	e008      	b.n	800ba2c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba1e:	e005      	b.n	800ba2c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ba20:	2302      	movs	r3, #2
 800ba22:	73fb      	strb	r3, [r7, #15]
    break;
 800ba24:	e002      	b.n	800ba2c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ba26:	2301      	movs	r3, #1
 800ba28:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2a:	bf00      	nop
  }
  return  speed;
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7f6 ff71 	bl	8002934 <HAL_HCD_ResetPort>
 800ba52:	4603      	mov	r3, r0
 800ba54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 f901 	bl	800bc60 <USBH_Get_USB_Status>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	460b      	mov	r3, r1
 800ba76:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba7e:	78fa      	ldrb	r2, [r7, #3]
 800ba80:	4611      	mov	r1, r2
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7f6 ff79 	bl	800297a <HAL_HCD_HC_GetXferCount>
 800ba88:	4603      	mov	r3, r0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba92:	b590      	push	{r4, r7, lr}
 800ba94:	b089      	sub	sp, #36	; 0x24
 800ba96:	af04      	add	r7, sp, #16
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4603      	mov	r3, r0
 800baa2:	70fb      	strb	r3, [r7, #3]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70bb      	strb	r3, [r7, #2]
 800baa8:	4613      	mov	r3, r2
 800baaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800baba:	787c      	ldrb	r4, [r7, #1]
 800babc:	78ba      	ldrb	r2, [r7, #2]
 800babe:	78f9      	ldrb	r1, [r7, #3]
 800bac0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bac2:	9302      	str	r3, [sp, #8]
 800bac4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	4623      	mov	r3, r4
 800bad2:	f7f6 fbbe 	bl	8002252 <HAL_HCD_HC_Init>
 800bad6:	4603      	mov	r3, r0
 800bad8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 f8bf 	bl	800bc60 <USBH_Get_USB_Status>
 800bae2:	4603      	mov	r3, r0
 800bae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	bd90      	pop	{r4, r7, pc}

0800baf0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb0a:	78fa      	ldrb	r2, [r7, #3]
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7f6 fc37 	bl	8002382 <HAL_HCD_HC_Halt>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 f8a0 	bl	800bc60 <USBH_Get_USB_Status>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bb2e:	b590      	push	{r4, r7, lr}
 800bb30:	b089      	sub	sp, #36	; 0x24
 800bb32:	af04      	add	r7, sp, #16
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	4608      	mov	r0, r1
 800bb38:	4611      	mov	r1, r2
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	70fb      	strb	r3, [r7, #3]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70bb      	strb	r3, [r7, #2]
 800bb44:	4613      	mov	r3, r2
 800bb46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb56:	787c      	ldrb	r4, [r7, #1]
 800bb58:	78ba      	ldrb	r2, [r7, #2]
 800bb5a:	78f9      	ldrb	r1, [r7, #3]
 800bb5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bb60:	9303      	str	r3, [sp, #12]
 800bb62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb64:	9302      	str	r3, [sp, #8]
 800bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	4623      	mov	r3, r4
 800bb72:	f7f6 fc29 	bl	80023c8 <HAL_HCD_HC_SubmitRequest>
 800bb76:	4603      	mov	r3, r0
 800bb78:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 f86f 	bl	800bc60 <USBH_Get_USB_Status>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd90      	pop	{r4, r7, pc}

0800bb90 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bba2:	78fa      	ldrb	r2, [r7, #3]
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7f6 fed2 	bl	8002950 <HAL_HCD_HC_GetURBState>
 800bbac:	4603      	mov	r3, r0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d103      	bne.n	800bbd4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f872 	bl	800bcb8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bbd4:	20c8      	movs	r0, #200	; 0xc8
 800bbd6:	f7f6 f82b 	bl	8001c30 <HAL_Delay>
  return USBH_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	70fb      	strb	r3, [r7, #3]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbfa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bbfc:	78fa      	ldrb	r2, [r7, #3]
 800bbfe:	68f9      	ldr	r1, [r7, #12]
 800bc00:	4613      	mov	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	00db      	lsls	r3, r3, #3
 800bc08:	440b      	add	r3, r1
 800bc0a:	333b      	adds	r3, #59	; 0x3b
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bc12:	78fa      	ldrb	r2, [r7, #3]
 800bc14:	68f9      	ldr	r1, [r7, #12]
 800bc16:	4613      	mov	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	00db      	lsls	r3, r3, #3
 800bc1e:	440b      	add	r3, r1
 800bc20:	3350      	adds	r3, #80	; 0x50
 800bc22:	78ba      	ldrb	r2, [r7, #2]
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	e009      	b.n	800bc3c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bc28:	78fa      	ldrb	r2, [r7, #3]
 800bc2a:	68f9      	ldr	r1, [r7, #12]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	440b      	add	r3, r1
 800bc36:	3351      	adds	r3, #81	; 0x51
 800bc38:	78ba      	ldrb	r2, [r7, #2]
 800bc3a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b082      	sub	sp, #8
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7f5 ffec 	bl	8001c30 <HAL_Delay>
}
 800bc58:	bf00      	nop
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d817      	bhi.n	800bca4 <USBH_Get_USB_Status+0x44>
 800bc74:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <USBH_Get_USB_Status+0x1c>)
 800bc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7a:	bf00      	nop
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc93 	.word	0x0800bc93
 800bc84:	0800bc99 	.word	0x0800bc99
 800bc88:	0800bc9f 	.word	0x0800bc9f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc90:	e00b      	b.n	800bcaa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bc92:	2302      	movs	r3, #2
 800bc94:	73fb      	strb	r3, [r7, #15]
    break;
 800bc96:	e008      	b.n	800bcaa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc9c:	e005      	b.n	800bcaa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bc9e:	2302      	movs	r3, #2
 800bca0:	73fb      	strb	r3, [r7, #15]
    break;
 800bca2:	e002      	b.n	800bcaa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bca4:	2302      	movs	r3, #2
 800bca6:	73fb      	strb	r3, [r7, #15]
    break;
 800bca8:	bf00      	nop
  }
  return usb_status;
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bcc6:	79fb      	ldrb	r3, [r7, #7]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d102      	bne.n	800bcd2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800bccc:	2301      	movs	r3, #1
 800bcce:	73fb      	strb	r3, [r7, #15]
 800bcd0:	e001      	b.n	800bcd6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,(GPIO_PinState)data);
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bcde:	4803      	ldr	r0, [pc, #12]	; (800bcec <MX_DriverVbusFS+0x34>)
 800bce0:	f7f6 fa3c 	bl	800215c <HAL_GPIO_WritePin>
}
 800bce4:	bf00      	nop
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	40020400 	.word	0x40020400

0800bcf0 <__errno>:
 800bcf0:	4b01      	ldr	r3, [pc, #4]	; (800bcf8 <__errno+0x8>)
 800bcf2:	6818      	ldr	r0, [r3, #0]
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	20000058 	.word	0x20000058

0800bcfc <__libc_init_array>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	4e0d      	ldr	r6, [pc, #52]	; (800bd34 <__libc_init_array+0x38>)
 800bd00:	4c0d      	ldr	r4, [pc, #52]	; (800bd38 <__libc_init_array+0x3c>)
 800bd02:	1ba4      	subs	r4, r4, r6
 800bd04:	10a4      	asrs	r4, r4, #2
 800bd06:	2500      	movs	r5, #0
 800bd08:	42a5      	cmp	r5, r4
 800bd0a:	d109      	bne.n	800bd20 <__libc_init_array+0x24>
 800bd0c:	4e0b      	ldr	r6, [pc, #44]	; (800bd3c <__libc_init_array+0x40>)
 800bd0e:	4c0c      	ldr	r4, [pc, #48]	; (800bd40 <__libc_init_array+0x44>)
 800bd10:	f000 fc30 	bl	800c574 <_init>
 800bd14:	1ba4      	subs	r4, r4, r6
 800bd16:	10a4      	asrs	r4, r4, #2
 800bd18:	2500      	movs	r5, #0
 800bd1a:	42a5      	cmp	r5, r4
 800bd1c:	d105      	bne.n	800bd2a <__libc_init_array+0x2e>
 800bd1e:	bd70      	pop	{r4, r5, r6, pc}
 800bd20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd24:	4798      	blx	r3
 800bd26:	3501      	adds	r5, #1
 800bd28:	e7ee      	b.n	800bd08 <__libc_init_array+0xc>
 800bd2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd2e:	4798      	blx	r3
 800bd30:	3501      	adds	r5, #1
 800bd32:	e7f2      	b.n	800bd1a <__libc_init_array+0x1e>
 800bd34:	0800c798 	.word	0x0800c798
 800bd38:	0800c798 	.word	0x0800c798
 800bd3c:	0800c798 	.word	0x0800c798
 800bd40:	0800c79c 	.word	0x0800c79c

0800bd44 <free>:
 800bd44:	4b02      	ldr	r3, [pc, #8]	; (800bd50 <free+0xc>)
 800bd46:	4601      	mov	r1, r0
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	f000 b817 	b.w	800bd7c <_free_r>
 800bd4e:	bf00      	nop
 800bd50:	20000058 	.word	0x20000058

0800bd54 <memcpy>:
 800bd54:	b510      	push	{r4, lr}
 800bd56:	1e43      	subs	r3, r0, #1
 800bd58:	440a      	add	r2, r1
 800bd5a:	4291      	cmp	r1, r2
 800bd5c:	d100      	bne.n	800bd60 <memcpy+0xc>
 800bd5e:	bd10      	pop	{r4, pc}
 800bd60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd68:	e7f7      	b.n	800bd5a <memcpy+0x6>

0800bd6a <memset>:
 800bd6a:	4402      	add	r2, r0
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d100      	bne.n	800bd74 <memset+0xa>
 800bd72:	4770      	bx	lr
 800bd74:	f803 1b01 	strb.w	r1, [r3], #1
 800bd78:	e7f9      	b.n	800bd6e <memset+0x4>
	...

0800bd7c <_free_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4605      	mov	r5, r0
 800bd80:	2900      	cmp	r1, #0
 800bd82:	d045      	beq.n	800be10 <_free_r+0x94>
 800bd84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd88:	1f0c      	subs	r4, r1, #4
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	bfb8      	it	lt
 800bd8e:	18e4      	addlt	r4, r4, r3
 800bd90:	f000 f8cc 	bl	800bf2c <__malloc_lock>
 800bd94:	4a1f      	ldr	r2, [pc, #124]	; (800be14 <_free_r+0x98>)
 800bd96:	6813      	ldr	r3, [r2, #0]
 800bd98:	4610      	mov	r0, r2
 800bd9a:	b933      	cbnz	r3, 800bdaa <_free_r+0x2e>
 800bd9c:	6063      	str	r3, [r4, #4]
 800bd9e:	6014      	str	r4, [r2, #0]
 800bda0:	4628      	mov	r0, r5
 800bda2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bda6:	f000 b8c2 	b.w	800bf2e <__malloc_unlock>
 800bdaa:	42a3      	cmp	r3, r4
 800bdac:	d90c      	bls.n	800bdc8 <_free_r+0x4c>
 800bdae:	6821      	ldr	r1, [r4, #0]
 800bdb0:	1862      	adds	r2, r4, r1
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	bf04      	itt	eq
 800bdb6:	681a      	ldreq	r2, [r3, #0]
 800bdb8:	685b      	ldreq	r3, [r3, #4]
 800bdba:	6063      	str	r3, [r4, #4]
 800bdbc:	bf04      	itt	eq
 800bdbe:	1852      	addeq	r2, r2, r1
 800bdc0:	6022      	streq	r2, [r4, #0]
 800bdc2:	6004      	str	r4, [r0, #0]
 800bdc4:	e7ec      	b.n	800bda0 <_free_r+0x24>
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	685a      	ldr	r2, [r3, #4]
 800bdca:	b10a      	cbz	r2, 800bdd0 <_free_r+0x54>
 800bdcc:	42a2      	cmp	r2, r4
 800bdce:	d9fa      	bls.n	800bdc6 <_free_r+0x4a>
 800bdd0:	6819      	ldr	r1, [r3, #0]
 800bdd2:	1858      	adds	r0, r3, r1
 800bdd4:	42a0      	cmp	r0, r4
 800bdd6:	d10b      	bne.n	800bdf0 <_free_r+0x74>
 800bdd8:	6820      	ldr	r0, [r4, #0]
 800bdda:	4401      	add	r1, r0
 800bddc:	1858      	adds	r0, r3, r1
 800bdde:	4282      	cmp	r2, r0
 800bde0:	6019      	str	r1, [r3, #0]
 800bde2:	d1dd      	bne.n	800bda0 <_free_r+0x24>
 800bde4:	6810      	ldr	r0, [r2, #0]
 800bde6:	6852      	ldr	r2, [r2, #4]
 800bde8:	605a      	str	r2, [r3, #4]
 800bdea:	4401      	add	r1, r0
 800bdec:	6019      	str	r1, [r3, #0]
 800bdee:	e7d7      	b.n	800bda0 <_free_r+0x24>
 800bdf0:	d902      	bls.n	800bdf8 <_free_r+0x7c>
 800bdf2:	230c      	movs	r3, #12
 800bdf4:	602b      	str	r3, [r5, #0]
 800bdf6:	e7d3      	b.n	800bda0 <_free_r+0x24>
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	1821      	adds	r1, r4, r0
 800bdfc:	428a      	cmp	r2, r1
 800bdfe:	bf04      	itt	eq
 800be00:	6811      	ldreq	r1, [r2, #0]
 800be02:	6852      	ldreq	r2, [r2, #4]
 800be04:	6062      	str	r2, [r4, #4]
 800be06:	bf04      	itt	eq
 800be08:	1809      	addeq	r1, r1, r0
 800be0a:	6021      	streq	r1, [r4, #0]
 800be0c:	605c      	str	r4, [r3, #4]
 800be0e:	e7c7      	b.n	800bda0 <_free_r+0x24>
 800be10:	bd38      	pop	{r3, r4, r5, pc}
 800be12:	bf00      	nop
 800be14:	20005484 	.word	0x20005484

0800be18 <_malloc_r>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	1ccd      	adds	r5, r1, #3
 800be1c:	f025 0503 	bic.w	r5, r5, #3
 800be20:	3508      	adds	r5, #8
 800be22:	2d0c      	cmp	r5, #12
 800be24:	bf38      	it	cc
 800be26:	250c      	movcc	r5, #12
 800be28:	2d00      	cmp	r5, #0
 800be2a:	4606      	mov	r6, r0
 800be2c:	db01      	blt.n	800be32 <_malloc_r+0x1a>
 800be2e:	42a9      	cmp	r1, r5
 800be30:	d903      	bls.n	800be3a <_malloc_r+0x22>
 800be32:	230c      	movs	r3, #12
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	2000      	movs	r0, #0
 800be38:	bd70      	pop	{r4, r5, r6, pc}
 800be3a:	f000 f877 	bl	800bf2c <__malloc_lock>
 800be3e:	4a21      	ldr	r2, [pc, #132]	; (800bec4 <_malloc_r+0xac>)
 800be40:	6814      	ldr	r4, [r2, #0]
 800be42:	4621      	mov	r1, r4
 800be44:	b991      	cbnz	r1, 800be6c <_malloc_r+0x54>
 800be46:	4c20      	ldr	r4, [pc, #128]	; (800bec8 <_malloc_r+0xb0>)
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	b91b      	cbnz	r3, 800be54 <_malloc_r+0x3c>
 800be4c:	4630      	mov	r0, r6
 800be4e:	f000 f83d 	bl	800becc <_sbrk_r>
 800be52:	6020      	str	r0, [r4, #0]
 800be54:	4629      	mov	r1, r5
 800be56:	4630      	mov	r0, r6
 800be58:	f000 f838 	bl	800becc <_sbrk_r>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d124      	bne.n	800beaa <_malloc_r+0x92>
 800be60:	230c      	movs	r3, #12
 800be62:	6033      	str	r3, [r6, #0]
 800be64:	4630      	mov	r0, r6
 800be66:	f000 f862 	bl	800bf2e <__malloc_unlock>
 800be6a:	e7e4      	b.n	800be36 <_malloc_r+0x1e>
 800be6c:	680b      	ldr	r3, [r1, #0]
 800be6e:	1b5b      	subs	r3, r3, r5
 800be70:	d418      	bmi.n	800bea4 <_malloc_r+0x8c>
 800be72:	2b0b      	cmp	r3, #11
 800be74:	d90f      	bls.n	800be96 <_malloc_r+0x7e>
 800be76:	600b      	str	r3, [r1, #0]
 800be78:	50cd      	str	r5, [r1, r3]
 800be7a:	18cc      	adds	r4, r1, r3
 800be7c:	4630      	mov	r0, r6
 800be7e:	f000 f856 	bl	800bf2e <__malloc_unlock>
 800be82:	f104 000b 	add.w	r0, r4, #11
 800be86:	1d23      	adds	r3, r4, #4
 800be88:	f020 0007 	bic.w	r0, r0, #7
 800be8c:	1ac3      	subs	r3, r0, r3
 800be8e:	d0d3      	beq.n	800be38 <_malloc_r+0x20>
 800be90:	425a      	negs	r2, r3
 800be92:	50e2      	str	r2, [r4, r3]
 800be94:	e7d0      	b.n	800be38 <_malloc_r+0x20>
 800be96:	428c      	cmp	r4, r1
 800be98:	684b      	ldr	r3, [r1, #4]
 800be9a:	bf16      	itet	ne
 800be9c:	6063      	strne	r3, [r4, #4]
 800be9e:	6013      	streq	r3, [r2, #0]
 800bea0:	460c      	movne	r4, r1
 800bea2:	e7eb      	b.n	800be7c <_malloc_r+0x64>
 800bea4:	460c      	mov	r4, r1
 800bea6:	6849      	ldr	r1, [r1, #4]
 800bea8:	e7cc      	b.n	800be44 <_malloc_r+0x2c>
 800beaa:	1cc4      	adds	r4, r0, #3
 800beac:	f024 0403 	bic.w	r4, r4, #3
 800beb0:	42a0      	cmp	r0, r4
 800beb2:	d005      	beq.n	800bec0 <_malloc_r+0xa8>
 800beb4:	1a21      	subs	r1, r4, r0
 800beb6:	4630      	mov	r0, r6
 800beb8:	f000 f808 	bl	800becc <_sbrk_r>
 800bebc:	3001      	adds	r0, #1
 800bebe:	d0cf      	beq.n	800be60 <_malloc_r+0x48>
 800bec0:	6025      	str	r5, [r4, #0]
 800bec2:	e7db      	b.n	800be7c <_malloc_r+0x64>
 800bec4:	20005484 	.word	0x20005484
 800bec8:	20005488 	.word	0x20005488

0800becc <_sbrk_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4c06      	ldr	r4, [pc, #24]	; (800bee8 <_sbrk_r+0x1c>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4605      	mov	r5, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	f7f4 ffb2 	bl	8000e40 <_sbrk>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_sbrk_r+0x1a>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_sbrk_r+0x1a>
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	20005de8 	.word	0x20005de8

0800beec <siprintf>:
 800beec:	b40e      	push	{r1, r2, r3}
 800beee:	b500      	push	{lr}
 800bef0:	b09c      	sub	sp, #112	; 0x70
 800bef2:	ab1d      	add	r3, sp, #116	; 0x74
 800bef4:	9002      	str	r0, [sp, #8]
 800bef6:	9006      	str	r0, [sp, #24]
 800bef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800befc:	4809      	ldr	r0, [pc, #36]	; (800bf24 <siprintf+0x38>)
 800befe:	9107      	str	r1, [sp, #28]
 800bf00:	9104      	str	r1, [sp, #16]
 800bf02:	4909      	ldr	r1, [pc, #36]	; (800bf28 <siprintf+0x3c>)
 800bf04:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf08:	9105      	str	r1, [sp, #20]
 800bf0a:	6800      	ldr	r0, [r0, #0]
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	a902      	add	r1, sp, #8
 800bf10:	f000 f868 	bl	800bfe4 <_svfiprintf_r>
 800bf14:	9b02      	ldr	r3, [sp, #8]
 800bf16:	2200      	movs	r2, #0
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	b01c      	add	sp, #112	; 0x70
 800bf1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf20:	b003      	add	sp, #12
 800bf22:	4770      	bx	lr
 800bf24:	20000058 	.word	0x20000058
 800bf28:	ffff0208 	.word	0xffff0208

0800bf2c <__malloc_lock>:
 800bf2c:	4770      	bx	lr

0800bf2e <__malloc_unlock>:
 800bf2e:	4770      	bx	lr

0800bf30 <__ssputs_r>:
 800bf30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf34:	688e      	ldr	r6, [r1, #8]
 800bf36:	429e      	cmp	r6, r3
 800bf38:	4682      	mov	sl, r0
 800bf3a:	460c      	mov	r4, r1
 800bf3c:	4690      	mov	r8, r2
 800bf3e:	4699      	mov	r9, r3
 800bf40:	d837      	bhi.n	800bfb2 <__ssputs_r+0x82>
 800bf42:	898a      	ldrh	r2, [r1, #12]
 800bf44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf48:	d031      	beq.n	800bfae <__ssputs_r+0x7e>
 800bf4a:	6825      	ldr	r5, [r4, #0]
 800bf4c:	6909      	ldr	r1, [r1, #16]
 800bf4e:	1a6f      	subs	r7, r5, r1
 800bf50:	6965      	ldr	r5, [r4, #20]
 800bf52:	2302      	movs	r3, #2
 800bf54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf58:	fb95 f5f3 	sdiv	r5, r5, r3
 800bf5c:	f109 0301 	add.w	r3, r9, #1
 800bf60:	443b      	add	r3, r7
 800bf62:	429d      	cmp	r5, r3
 800bf64:	bf38      	it	cc
 800bf66:	461d      	movcc	r5, r3
 800bf68:	0553      	lsls	r3, r2, #21
 800bf6a:	d530      	bpl.n	800bfce <__ssputs_r+0x9e>
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	f7ff ff53 	bl	800be18 <_malloc_r>
 800bf72:	4606      	mov	r6, r0
 800bf74:	b950      	cbnz	r0, 800bf8c <__ssputs_r+0x5c>
 800bf76:	230c      	movs	r3, #12
 800bf78:	f8ca 3000 	str.w	r3, [sl]
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf82:	81a3      	strh	r3, [r4, #12]
 800bf84:	f04f 30ff 	mov.w	r0, #4294967295
 800bf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8c:	463a      	mov	r2, r7
 800bf8e:	6921      	ldr	r1, [r4, #16]
 800bf90:	f7ff fee0 	bl	800bd54 <memcpy>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf9e:	81a3      	strh	r3, [r4, #12]
 800bfa0:	6126      	str	r6, [r4, #16]
 800bfa2:	6165      	str	r5, [r4, #20]
 800bfa4:	443e      	add	r6, r7
 800bfa6:	1bed      	subs	r5, r5, r7
 800bfa8:	6026      	str	r6, [r4, #0]
 800bfaa:	60a5      	str	r5, [r4, #8]
 800bfac:	464e      	mov	r6, r9
 800bfae:	454e      	cmp	r6, r9
 800bfb0:	d900      	bls.n	800bfb4 <__ssputs_r+0x84>
 800bfb2:	464e      	mov	r6, r9
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	4641      	mov	r1, r8
 800bfb8:	6820      	ldr	r0, [r4, #0]
 800bfba:	f000 fa93 	bl	800c4e4 <memmove>
 800bfbe:	68a3      	ldr	r3, [r4, #8]
 800bfc0:	1b9b      	subs	r3, r3, r6
 800bfc2:	60a3      	str	r3, [r4, #8]
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	441e      	add	r6, r3
 800bfc8:	6026      	str	r6, [r4, #0]
 800bfca:	2000      	movs	r0, #0
 800bfcc:	e7dc      	b.n	800bf88 <__ssputs_r+0x58>
 800bfce:	462a      	mov	r2, r5
 800bfd0:	f000 faa1 	bl	800c516 <_realloc_r>
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d1e2      	bne.n	800bfa0 <__ssputs_r+0x70>
 800bfda:	6921      	ldr	r1, [r4, #16]
 800bfdc:	4650      	mov	r0, sl
 800bfde:	f7ff fecd 	bl	800bd7c <_free_r>
 800bfe2:	e7c8      	b.n	800bf76 <__ssputs_r+0x46>

0800bfe4 <_svfiprintf_r>:
 800bfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	461d      	mov	r5, r3
 800bfea:	898b      	ldrh	r3, [r1, #12]
 800bfec:	061f      	lsls	r7, r3, #24
 800bfee:	b09d      	sub	sp, #116	; 0x74
 800bff0:	4680      	mov	r8, r0
 800bff2:	460c      	mov	r4, r1
 800bff4:	4616      	mov	r6, r2
 800bff6:	d50f      	bpl.n	800c018 <_svfiprintf_r+0x34>
 800bff8:	690b      	ldr	r3, [r1, #16]
 800bffa:	b96b      	cbnz	r3, 800c018 <_svfiprintf_r+0x34>
 800bffc:	2140      	movs	r1, #64	; 0x40
 800bffe:	f7ff ff0b 	bl	800be18 <_malloc_r>
 800c002:	6020      	str	r0, [r4, #0]
 800c004:	6120      	str	r0, [r4, #16]
 800c006:	b928      	cbnz	r0, 800c014 <_svfiprintf_r+0x30>
 800c008:	230c      	movs	r3, #12
 800c00a:	f8c8 3000 	str.w	r3, [r8]
 800c00e:	f04f 30ff 	mov.w	r0, #4294967295
 800c012:	e0c8      	b.n	800c1a6 <_svfiprintf_r+0x1c2>
 800c014:	2340      	movs	r3, #64	; 0x40
 800c016:	6163      	str	r3, [r4, #20]
 800c018:	2300      	movs	r3, #0
 800c01a:	9309      	str	r3, [sp, #36]	; 0x24
 800c01c:	2320      	movs	r3, #32
 800c01e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c022:	2330      	movs	r3, #48	; 0x30
 800c024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c028:	9503      	str	r5, [sp, #12]
 800c02a:	f04f 0b01 	mov.w	fp, #1
 800c02e:	4637      	mov	r7, r6
 800c030:	463d      	mov	r5, r7
 800c032:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c036:	b10b      	cbz	r3, 800c03c <_svfiprintf_r+0x58>
 800c038:	2b25      	cmp	r3, #37	; 0x25
 800c03a:	d13e      	bne.n	800c0ba <_svfiprintf_r+0xd6>
 800c03c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c040:	d00b      	beq.n	800c05a <_svfiprintf_r+0x76>
 800c042:	4653      	mov	r3, sl
 800c044:	4632      	mov	r2, r6
 800c046:	4621      	mov	r1, r4
 800c048:	4640      	mov	r0, r8
 800c04a:	f7ff ff71 	bl	800bf30 <__ssputs_r>
 800c04e:	3001      	adds	r0, #1
 800c050:	f000 80a4 	beq.w	800c19c <_svfiprintf_r+0x1b8>
 800c054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c056:	4453      	add	r3, sl
 800c058:	9309      	str	r3, [sp, #36]	; 0x24
 800c05a:	783b      	ldrb	r3, [r7, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 809d 	beq.w	800c19c <_svfiprintf_r+0x1b8>
 800c062:	2300      	movs	r3, #0
 800c064:	f04f 32ff 	mov.w	r2, #4294967295
 800c068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	9307      	str	r3, [sp, #28]
 800c070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c074:	931a      	str	r3, [sp, #104]	; 0x68
 800c076:	462f      	mov	r7, r5
 800c078:	2205      	movs	r2, #5
 800c07a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c07e:	4850      	ldr	r0, [pc, #320]	; (800c1c0 <_svfiprintf_r+0x1dc>)
 800c080:	f7f4 f8ce 	bl	8000220 <memchr>
 800c084:	9b04      	ldr	r3, [sp, #16]
 800c086:	b9d0      	cbnz	r0, 800c0be <_svfiprintf_r+0xda>
 800c088:	06d9      	lsls	r1, r3, #27
 800c08a:	bf44      	itt	mi
 800c08c:	2220      	movmi	r2, #32
 800c08e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c092:	071a      	lsls	r2, r3, #28
 800c094:	bf44      	itt	mi
 800c096:	222b      	movmi	r2, #43	; 0x2b
 800c098:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c09c:	782a      	ldrb	r2, [r5, #0]
 800c09e:	2a2a      	cmp	r2, #42	; 0x2a
 800c0a0:	d015      	beq.n	800c0ce <_svfiprintf_r+0xea>
 800c0a2:	9a07      	ldr	r2, [sp, #28]
 800c0a4:	462f      	mov	r7, r5
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	250a      	movs	r5, #10
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0b0:	3b30      	subs	r3, #48	; 0x30
 800c0b2:	2b09      	cmp	r3, #9
 800c0b4:	d94d      	bls.n	800c152 <_svfiprintf_r+0x16e>
 800c0b6:	b1b8      	cbz	r0, 800c0e8 <_svfiprintf_r+0x104>
 800c0b8:	e00f      	b.n	800c0da <_svfiprintf_r+0xf6>
 800c0ba:	462f      	mov	r7, r5
 800c0bc:	e7b8      	b.n	800c030 <_svfiprintf_r+0x4c>
 800c0be:	4a40      	ldr	r2, [pc, #256]	; (800c1c0 <_svfiprintf_r+0x1dc>)
 800c0c0:	1a80      	subs	r0, r0, r2
 800c0c2:	fa0b f000 	lsl.w	r0, fp, r0
 800c0c6:	4318      	orrs	r0, r3
 800c0c8:	9004      	str	r0, [sp, #16]
 800c0ca:	463d      	mov	r5, r7
 800c0cc:	e7d3      	b.n	800c076 <_svfiprintf_r+0x92>
 800c0ce:	9a03      	ldr	r2, [sp, #12]
 800c0d0:	1d11      	adds	r1, r2, #4
 800c0d2:	6812      	ldr	r2, [r2, #0]
 800c0d4:	9103      	str	r1, [sp, #12]
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	db01      	blt.n	800c0de <_svfiprintf_r+0xfa>
 800c0da:	9207      	str	r2, [sp, #28]
 800c0dc:	e004      	b.n	800c0e8 <_svfiprintf_r+0x104>
 800c0de:	4252      	negs	r2, r2
 800c0e0:	f043 0302 	orr.w	r3, r3, #2
 800c0e4:	9207      	str	r2, [sp, #28]
 800c0e6:	9304      	str	r3, [sp, #16]
 800c0e8:	783b      	ldrb	r3, [r7, #0]
 800c0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c0ec:	d10c      	bne.n	800c108 <_svfiprintf_r+0x124>
 800c0ee:	787b      	ldrb	r3, [r7, #1]
 800c0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f2:	d133      	bne.n	800c15c <_svfiprintf_r+0x178>
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	1d1a      	adds	r2, r3, #4
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	9203      	str	r2, [sp, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bfb8      	it	lt
 800c100:	f04f 33ff 	movlt.w	r3, #4294967295
 800c104:	3702      	adds	r7, #2
 800c106:	9305      	str	r3, [sp, #20]
 800c108:	4d2e      	ldr	r5, [pc, #184]	; (800c1c4 <_svfiprintf_r+0x1e0>)
 800c10a:	7839      	ldrb	r1, [r7, #0]
 800c10c:	2203      	movs	r2, #3
 800c10e:	4628      	mov	r0, r5
 800c110:	f7f4 f886 	bl	8000220 <memchr>
 800c114:	b138      	cbz	r0, 800c126 <_svfiprintf_r+0x142>
 800c116:	2340      	movs	r3, #64	; 0x40
 800c118:	1b40      	subs	r0, r0, r5
 800c11a:	fa03 f000 	lsl.w	r0, r3, r0
 800c11e:	9b04      	ldr	r3, [sp, #16]
 800c120:	4303      	orrs	r3, r0
 800c122:	3701      	adds	r7, #1
 800c124:	9304      	str	r3, [sp, #16]
 800c126:	7839      	ldrb	r1, [r7, #0]
 800c128:	4827      	ldr	r0, [pc, #156]	; (800c1c8 <_svfiprintf_r+0x1e4>)
 800c12a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c12e:	2206      	movs	r2, #6
 800c130:	1c7e      	adds	r6, r7, #1
 800c132:	f7f4 f875 	bl	8000220 <memchr>
 800c136:	2800      	cmp	r0, #0
 800c138:	d038      	beq.n	800c1ac <_svfiprintf_r+0x1c8>
 800c13a:	4b24      	ldr	r3, [pc, #144]	; (800c1cc <_svfiprintf_r+0x1e8>)
 800c13c:	bb13      	cbnz	r3, 800c184 <_svfiprintf_r+0x1a0>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	3307      	adds	r3, #7
 800c142:	f023 0307 	bic.w	r3, r3, #7
 800c146:	3308      	adds	r3, #8
 800c148:	9303      	str	r3, [sp, #12]
 800c14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14c:	444b      	add	r3, r9
 800c14e:	9309      	str	r3, [sp, #36]	; 0x24
 800c150:	e76d      	b.n	800c02e <_svfiprintf_r+0x4a>
 800c152:	fb05 3202 	mla	r2, r5, r2, r3
 800c156:	2001      	movs	r0, #1
 800c158:	460f      	mov	r7, r1
 800c15a:	e7a6      	b.n	800c0aa <_svfiprintf_r+0xc6>
 800c15c:	2300      	movs	r3, #0
 800c15e:	3701      	adds	r7, #1
 800c160:	9305      	str	r3, [sp, #20]
 800c162:	4619      	mov	r1, r3
 800c164:	250a      	movs	r5, #10
 800c166:	4638      	mov	r0, r7
 800c168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c16c:	3a30      	subs	r2, #48	; 0x30
 800c16e:	2a09      	cmp	r2, #9
 800c170:	d903      	bls.n	800c17a <_svfiprintf_r+0x196>
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0c8      	beq.n	800c108 <_svfiprintf_r+0x124>
 800c176:	9105      	str	r1, [sp, #20]
 800c178:	e7c6      	b.n	800c108 <_svfiprintf_r+0x124>
 800c17a:	fb05 2101 	mla	r1, r5, r1, r2
 800c17e:	2301      	movs	r3, #1
 800c180:	4607      	mov	r7, r0
 800c182:	e7f0      	b.n	800c166 <_svfiprintf_r+0x182>
 800c184:	ab03      	add	r3, sp, #12
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	4622      	mov	r2, r4
 800c18a:	4b11      	ldr	r3, [pc, #68]	; (800c1d0 <_svfiprintf_r+0x1ec>)
 800c18c:	a904      	add	r1, sp, #16
 800c18e:	4640      	mov	r0, r8
 800c190:	f3af 8000 	nop.w
 800c194:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c198:	4681      	mov	r9, r0
 800c19a:	d1d6      	bne.n	800c14a <_svfiprintf_r+0x166>
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	065b      	lsls	r3, r3, #25
 800c1a0:	f53f af35 	bmi.w	800c00e <_svfiprintf_r+0x2a>
 800c1a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1a6:	b01d      	add	sp, #116	; 0x74
 800c1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ac:	ab03      	add	r3, sp, #12
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <_svfiprintf_r+0x1ec>)
 800c1b4:	a904      	add	r1, sp, #16
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	f000 f882 	bl	800c2c0 <_printf_i>
 800c1bc:	e7ea      	b.n	800c194 <_svfiprintf_r+0x1b0>
 800c1be:	bf00      	nop
 800c1c0:	0800c75c 	.word	0x0800c75c
 800c1c4:	0800c762 	.word	0x0800c762
 800c1c8:	0800c766 	.word	0x0800c766
 800c1cc:	00000000 	.word	0x00000000
 800c1d0:	0800bf31 	.word	0x0800bf31

0800c1d4 <_printf_common>:
 800c1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d8:	4691      	mov	r9, r2
 800c1da:	461f      	mov	r7, r3
 800c1dc:	688a      	ldr	r2, [r1, #8]
 800c1de:	690b      	ldr	r3, [r1, #16]
 800c1e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	bfb8      	it	lt
 800c1e8:	4613      	movlt	r3, r2
 800c1ea:	f8c9 3000 	str.w	r3, [r9]
 800c1ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	b112      	cbz	r2, 800c1fe <_printf_common+0x2a>
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	f8c9 3000 	str.w	r3, [r9]
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	0699      	lsls	r1, r3, #26
 800c202:	bf42      	ittt	mi
 800c204:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c208:	3302      	addmi	r3, #2
 800c20a:	f8c9 3000 	strmi.w	r3, [r9]
 800c20e:	6825      	ldr	r5, [r4, #0]
 800c210:	f015 0506 	ands.w	r5, r5, #6
 800c214:	d107      	bne.n	800c226 <_printf_common+0x52>
 800c216:	f104 0a19 	add.w	sl, r4, #25
 800c21a:	68e3      	ldr	r3, [r4, #12]
 800c21c:	f8d9 2000 	ldr.w	r2, [r9]
 800c220:	1a9b      	subs	r3, r3, r2
 800c222:	42ab      	cmp	r3, r5
 800c224:	dc28      	bgt.n	800c278 <_printf_common+0xa4>
 800c226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c22a:	6822      	ldr	r2, [r4, #0]
 800c22c:	3300      	adds	r3, #0
 800c22e:	bf18      	it	ne
 800c230:	2301      	movne	r3, #1
 800c232:	0692      	lsls	r2, r2, #26
 800c234:	d42d      	bmi.n	800c292 <_printf_common+0xbe>
 800c236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c23a:	4639      	mov	r1, r7
 800c23c:	4630      	mov	r0, r6
 800c23e:	47c0      	blx	r8
 800c240:	3001      	adds	r0, #1
 800c242:	d020      	beq.n	800c286 <_printf_common+0xb2>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	68e5      	ldr	r5, [r4, #12]
 800c248:	f8d9 2000 	ldr.w	r2, [r9]
 800c24c:	f003 0306 	and.w	r3, r3, #6
 800c250:	2b04      	cmp	r3, #4
 800c252:	bf08      	it	eq
 800c254:	1aad      	subeq	r5, r5, r2
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	6922      	ldr	r2, [r4, #16]
 800c25a:	bf0c      	ite	eq
 800c25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c260:	2500      	movne	r5, #0
 800c262:	4293      	cmp	r3, r2
 800c264:	bfc4      	itt	gt
 800c266:	1a9b      	subgt	r3, r3, r2
 800c268:	18ed      	addgt	r5, r5, r3
 800c26a:	f04f 0900 	mov.w	r9, #0
 800c26e:	341a      	adds	r4, #26
 800c270:	454d      	cmp	r5, r9
 800c272:	d11a      	bne.n	800c2aa <_printf_common+0xd6>
 800c274:	2000      	movs	r0, #0
 800c276:	e008      	b.n	800c28a <_printf_common+0xb6>
 800c278:	2301      	movs	r3, #1
 800c27a:	4652      	mov	r2, sl
 800c27c:	4639      	mov	r1, r7
 800c27e:	4630      	mov	r0, r6
 800c280:	47c0      	blx	r8
 800c282:	3001      	adds	r0, #1
 800c284:	d103      	bne.n	800c28e <_printf_common+0xba>
 800c286:	f04f 30ff 	mov.w	r0, #4294967295
 800c28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28e:	3501      	adds	r5, #1
 800c290:	e7c3      	b.n	800c21a <_printf_common+0x46>
 800c292:	18e1      	adds	r1, r4, r3
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	2030      	movs	r0, #48	; 0x30
 800c298:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c29c:	4422      	add	r2, r4
 800c29e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2a6:	3302      	adds	r3, #2
 800c2a8:	e7c5      	b.n	800c236 <_printf_common+0x62>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	47c0      	blx	r8
 800c2b4:	3001      	adds	r0, #1
 800c2b6:	d0e6      	beq.n	800c286 <_printf_common+0xb2>
 800c2b8:	f109 0901 	add.w	r9, r9, #1
 800c2bc:	e7d8      	b.n	800c270 <_printf_common+0x9c>
	...

0800c2c0 <_printf_i>:
 800c2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	7e09      	ldrb	r1, [r1, #24]
 800c2cc:	b085      	sub	sp, #20
 800c2ce:	296e      	cmp	r1, #110	; 0x6e
 800c2d0:	4617      	mov	r7, r2
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	4698      	mov	r8, r3
 800c2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2d8:	f000 80b3 	beq.w	800c442 <_printf_i+0x182>
 800c2dc:	d822      	bhi.n	800c324 <_printf_i+0x64>
 800c2de:	2963      	cmp	r1, #99	; 0x63
 800c2e0:	d036      	beq.n	800c350 <_printf_i+0x90>
 800c2e2:	d80a      	bhi.n	800c2fa <_printf_i+0x3a>
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	f000 80b9 	beq.w	800c45c <_printf_i+0x19c>
 800c2ea:	2958      	cmp	r1, #88	; 0x58
 800c2ec:	f000 8083 	beq.w	800c3f6 <_printf_i+0x136>
 800c2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c2f8:	e032      	b.n	800c360 <_printf_i+0xa0>
 800c2fa:	2964      	cmp	r1, #100	; 0x64
 800c2fc:	d001      	beq.n	800c302 <_printf_i+0x42>
 800c2fe:	2969      	cmp	r1, #105	; 0x69
 800c300:	d1f6      	bne.n	800c2f0 <_printf_i+0x30>
 800c302:	6820      	ldr	r0, [r4, #0]
 800c304:	6813      	ldr	r3, [r2, #0]
 800c306:	0605      	lsls	r5, r0, #24
 800c308:	f103 0104 	add.w	r1, r3, #4
 800c30c:	d52a      	bpl.n	800c364 <_printf_i+0xa4>
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	6011      	str	r1, [r2, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	da03      	bge.n	800c31e <_printf_i+0x5e>
 800c316:	222d      	movs	r2, #45	; 0x2d
 800c318:	425b      	negs	r3, r3
 800c31a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c31e:	486f      	ldr	r0, [pc, #444]	; (800c4dc <_printf_i+0x21c>)
 800c320:	220a      	movs	r2, #10
 800c322:	e039      	b.n	800c398 <_printf_i+0xd8>
 800c324:	2973      	cmp	r1, #115	; 0x73
 800c326:	f000 809d 	beq.w	800c464 <_printf_i+0x1a4>
 800c32a:	d808      	bhi.n	800c33e <_printf_i+0x7e>
 800c32c:	296f      	cmp	r1, #111	; 0x6f
 800c32e:	d020      	beq.n	800c372 <_printf_i+0xb2>
 800c330:	2970      	cmp	r1, #112	; 0x70
 800c332:	d1dd      	bne.n	800c2f0 <_printf_i+0x30>
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	f043 0320 	orr.w	r3, r3, #32
 800c33a:	6023      	str	r3, [r4, #0]
 800c33c:	e003      	b.n	800c346 <_printf_i+0x86>
 800c33e:	2975      	cmp	r1, #117	; 0x75
 800c340:	d017      	beq.n	800c372 <_printf_i+0xb2>
 800c342:	2978      	cmp	r1, #120	; 0x78
 800c344:	d1d4      	bne.n	800c2f0 <_printf_i+0x30>
 800c346:	2378      	movs	r3, #120	; 0x78
 800c348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c34c:	4864      	ldr	r0, [pc, #400]	; (800c4e0 <_printf_i+0x220>)
 800c34e:	e055      	b.n	800c3fc <_printf_i+0x13c>
 800c350:	6813      	ldr	r3, [r2, #0]
 800c352:	1d19      	adds	r1, r3, #4
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6011      	str	r1, [r2, #0]
 800c358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c35c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c360:	2301      	movs	r3, #1
 800c362:	e08c      	b.n	800c47e <_printf_i+0x1be>
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6011      	str	r1, [r2, #0]
 800c368:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c36c:	bf18      	it	ne
 800c36e:	b21b      	sxthne	r3, r3
 800c370:	e7cf      	b.n	800c312 <_printf_i+0x52>
 800c372:	6813      	ldr	r3, [r2, #0]
 800c374:	6825      	ldr	r5, [r4, #0]
 800c376:	1d18      	adds	r0, r3, #4
 800c378:	6010      	str	r0, [r2, #0]
 800c37a:	0628      	lsls	r0, r5, #24
 800c37c:	d501      	bpl.n	800c382 <_printf_i+0xc2>
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	e002      	b.n	800c388 <_printf_i+0xc8>
 800c382:	0668      	lsls	r0, r5, #25
 800c384:	d5fb      	bpl.n	800c37e <_printf_i+0xbe>
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	4854      	ldr	r0, [pc, #336]	; (800c4dc <_printf_i+0x21c>)
 800c38a:	296f      	cmp	r1, #111	; 0x6f
 800c38c:	bf14      	ite	ne
 800c38e:	220a      	movne	r2, #10
 800c390:	2208      	moveq	r2, #8
 800c392:	2100      	movs	r1, #0
 800c394:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c398:	6865      	ldr	r5, [r4, #4]
 800c39a:	60a5      	str	r5, [r4, #8]
 800c39c:	2d00      	cmp	r5, #0
 800c39e:	f2c0 8095 	blt.w	800c4cc <_printf_i+0x20c>
 800c3a2:	6821      	ldr	r1, [r4, #0]
 800c3a4:	f021 0104 	bic.w	r1, r1, #4
 800c3a8:	6021      	str	r1, [r4, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d13d      	bne.n	800c42a <_printf_i+0x16a>
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	f040 808e 	bne.w	800c4d0 <_printf_i+0x210>
 800c3b4:	4665      	mov	r5, ip
 800c3b6:	2a08      	cmp	r2, #8
 800c3b8:	d10b      	bne.n	800c3d2 <_printf_i+0x112>
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	07db      	lsls	r3, r3, #31
 800c3be:	d508      	bpl.n	800c3d2 <_printf_i+0x112>
 800c3c0:	6923      	ldr	r3, [r4, #16]
 800c3c2:	6862      	ldr	r2, [r4, #4]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	bfde      	ittt	le
 800c3c8:	2330      	movle	r3, #48	; 0x30
 800c3ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3d2:	ebac 0305 	sub.w	r3, ip, r5
 800c3d6:	6123      	str	r3, [r4, #16]
 800c3d8:	f8cd 8000 	str.w	r8, [sp]
 800c3dc:	463b      	mov	r3, r7
 800c3de:	aa03      	add	r2, sp, #12
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	f7ff fef6 	bl	800c1d4 <_printf_common>
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	d14d      	bne.n	800c488 <_printf_i+0x1c8>
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	b005      	add	sp, #20
 800c3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3f6:	4839      	ldr	r0, [pc, #228]	; (800c4dc <_printf_i+0x21c>)
 800c3f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c3fc:	6813      	ldr	r3, [r2, #0]
 800c3fe:	6821      	ldr	r1, [r4, #0]
 800c400:	1d1d      	adds	r5, r3, #4
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6015      	str	r5, [r2, #0]
 800c406:	060a      	lsls	r2, r1, #24
 800c408:	d50b      	bpl.n	800c422 <_printf_i+0x162>
 800c40a:	07ca      	lsls	r2, r1, #31
 800c40c:	bf44      	itt	mi
 800c40e:	f041 0120 	orrmi.w	r1, r1, #32
 800c412:	6021      	strmi	r1, [r4, #0]
 800c414:	b91b      	cbnz	r3, 800c41e <_printf_i+0x15e>
 800c416:	6822      	ldr	r2, [r4, #0]
 800c418:	f022 0220 	bic.w	r2, r2, #32
 800c41c:	6022      	str	r2, [r4, #0]
 800c41e:	2210      	movs	r2, #16
 800c420:	e7b7      	b.n	800c392 <_printf_i+0xd2>
 800c422:	064d      	lsls	r5, r1, #25
 800c424:	bf48      	it	mi
 800c426:	b29b      	uxthmi	r3, r3
 800c428:	e7ef      	b.n	800c40a <_printf_i+0x14a>
 800c42a:	4665      	mov	r5, ip
 800c42c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c430:	fb02 3311 	mls	r3, r2, r1, r3
 800c434:	5cc3      	ldrb	r3, [r0, r3]
 800c436:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c43a:	460b      	mov	r3, r1
 800c43c:	2900      	cmp	r1, #0
 800c43e:	d1f5      	bne.n	800c42c <_printf_i+0x16c>
 800c440:	e7b9      	b.n	800c3b6 <_printf_i+0xf6>
 800c442:	6813      	ldr	r3, [r2, #0]
 800c444:	6825      	ldr	r5, [r4, #0]
 800c446:	6961      	ldr	r1, [r4, #20]
 800c448:	1d18      	adds	r0, r3, #4
 800c44a:	6010      	str	r0, [r2, #0]
 800c44c:	0628      	lsls	r0, r5, #24
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	d501      	bpl.n	800c456 <_printf_i+0x196>
 800c452:	6019      	str	r1, [r3, #0]
 800c454:	e002      	b.n	800c45c <_printf_i+0x19c>
 800c456:	066a      	lsls	r2, r5, #25
 800c458:	d5fb      	bpl.n	800c452 <_printf_i+0x192>
 800c45a:	8019      	strh	r1, [r3, #0]
 800c45c:	2300      	movs	r3, #0
 800c45e:	6123      	str	r3, [r4, #16]
 800c460:	4665      	mov	r5, ip
 800c462:	e7b9      	b.n	800c3d8 <_printf_i+0x118>
 800c464:	6813      	ldr	r3, [r2, #0]
 800c466:	1d19      	adds	r1, r3, #4
 800c468:	6011      	str	r1, [r2, #0]
 800c46a:	681d      	ldr	r5, [r3, #0]
 800c46c:	6862      	ldr	r2, [r4, #4]
 800c46e:	2100      	movs	r1, #0
 800c470:	4628      	mov	r0, r5
 800c472:	f7f3 fed5 	bl	8000220 <memchr>
 800c476:	b108      	cbz	r0, 800c47c <_printf_i+0x1bc>
 800c478:	1b40      	subs	r0, r0, r5
 800c47a:	6060      	str	r0, [r4, #4]
 800c47c:	6863      	ldr	r3, [r4, #4]
 800c47e:	6123      	str	r3, [r4, #16]
 800c480:	2300      	movs	r3, #0
 800c482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c486:	e7a7      	b.n	800c3d8 <_printf_i+0x118>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	462a      	mov	r2, r5
 800c48c:	4639      	mov	r1, r7
 800c48e:	4630      	mov	r0, r6
 800c490:	47c0      	blx	r8
 800c492:	3001      	adds	r0, #1
 800c494:	d0aa      	beq.n	800c3ec <_printf_i+0x12c>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	079b      	lsls	r3, r3, #30
 800c49a:	d413      	bmi.n	800c4c4 <_printf_i+0x204>
 800c49c:	68e0      	ldr	r0, [r4, #12]
 800c49e:	9b03      	ldr	r3, [sp, #12]
 800c4a0:	4298      	cmp	r0, r3
 800c4a2:	bfb8      	it	lt
 800c4a4:	4618      	movlt	r0, r3
 800c4a6:	e7a3      	b.n	800c3f0 <_printf_i+0x130>
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	464a      	mov	r2, r9
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	47c0      	blx	r8
 800c4b2:	3001      	adds	r0, #1
 800c4b4:	d09a      	beq.n	800c3ec <_printf_i+0x12c>
 800c4b6:	3501      	adds	r5, #1
 800c4b8:	68e3      	ldr	r3, [r4, #12]
 800c4ba:	9a03      	ldr	r2, [sp, #12]
 800c4bc:	1a9b      	subs	r3, r3, r2
 800c4be:	42ab      	cmp	r3, r5
 800c4c0:	dcf2      	bgt.n	800c4a8 <_printf_i+0x1e8>
 800c4c2:	e7eb      	b.n	800c49c <_printf_i+0x1dc>
 800c4c4:	2500      	movs	r5, #0
 800c4c6:	f104 0919 	add.w	r9, r4, #25
 800c4ca:	e7f5      	b.n	800c4b8 <_printf_i+0x1f8>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1ac      	bne.n	800c42a <_printf_i+0x16a>
 800c4d0:	7803      	ldrb	r3, [r0, #0]
 800c4d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4da:	e76c      	b.n	800c3b6 <_printf_i+0xf6>
 800c4dc:	0800c76d 	.word	0x0800c76d
 800c4e0:	0800c77e 	.word	0x0800c77e

0800c4e4 <memmove>:
 800c4e4:	4288      	cmp	r0, r1
 800c4e6:	b510      	push	{r4, lr}
 800c4e8:	eb01 0302 	add.w	r3, r1, r2
 800c4ec:	d807      	bhi.n	800c4fe <memmove+0x1a>
 800c4ee:	1e42      	subs	r2, r0, #1
 800c4f0:	4299      	cmp	r1, r3
 800c4f2:	d00a      	beq.n	800c50a <memmove+0x26>
 800c4f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c4fc:	e7f8      	b.n	800c4f0 <memmove+0xc>
 800c4fe:	4283      	cmp	r3, r0
 800c500:	d9f5      	bls.n	800c4ee <memmove+0xa>
 800c502:	1881      	adds	r1, r0, r2
 800c504:	1ad2      	subs	r2, r2, r3
 800c506:	42d3      	cmn	r3, r2
 800c508:	d100      	bne.n	800c50c <memmove+0x28>
 800c50a:	bd10      	pop	{r4, pc}
 800c50c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c510:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c514:	e7f7      	b.n	800c506 <memmove+0x22>

0800c516 <_realloc_r>:
 800c516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c518:	4607      	mov	r7, r0
 800c51a:	4614      	mov	r4, r2
 800c51c:	460e      	mov	r6, r1
 800c51e:	b921      	cbnz	r1, 800c52a <_realloc_r+0x14>
 800c520:	4611      	mov	r1, r2
 800c522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c526:	f7ff bc77 	b.w	800be18 <_malloc_r>
 800c52a:	b922      	cbnz	r2, 800c536 <_realloc_r+0x20>
 800c52c:	f7ff fc26 	bl	800bd7c <_free_r>
 800c530:	4625      	mov	r5, r4
 800c532:	4628      	mov	r0, r5
 800c534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c536:	f000 f814 	bl	800c562 <_malloc_usable_size_r>
 800c53a:	42a0      	cmp	r0, r4
 800c53c:	d20f      	bcs.n	800c55e <_realloc_r+0x48>
 800c53e:	4621      	mov	r1, r4
 800c540:	4638      	mov	r0, r7
 800c542:	f7ff fc69 	bl	800be18 <_malloc_r>
 800c546:	4605      	mov	r5, r0
 800c548:	2800      	cmp	r0, #0
 800c54a:	d0f2      	beq.n	800c532 <_realloc_r+0x1c>
 800c54c:	4631      	mov	r1, r6
 800c54e:	4622      	mov	r2, r4
 800c550:	f7ff fc00 	bl	800bd54 <memcpy>
 800c554:	4631      	mov	r1, r6
 800c556:	4638      	mov	r0, r7
 800c558:	f7ff fc10 	bl	800bd7c <_free_r>
 800c55c:	e7e9      	b.n	800c532 <_realloc_r+0x1c>
 800c55e:	4635      	mov	r5, r6
 800c560:	e7e7      	b.n	800c532 <_realloc_r+0x1c>

0800c562 <_malloc_usable_size_r>:
 800c562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c566:	1f18      	subs	r0, r3, #4
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bfbc      	itt	lt
 800c56c:	580b      	ldrlt	r3, [r1, r0]
 800c56e:	18c0      	addlt	r0, r0, r3
 800c570:	4770      	bx	lr
	...

0800c574 <_init>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	bf00      	nop
 800c578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57a:	bc08      	pop	{r3}
 800c57c:	469e      	mov	lr, r3
 800c57e:	4770      	bx	lr

0800c580 <_fini>:
 800c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c582:	bf00      	nop
 800c584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c586:	bc08      	pop	{r3}
 800c588:	469e      	mov	lr, r3
 800c58a:	4770      	bx	lr
