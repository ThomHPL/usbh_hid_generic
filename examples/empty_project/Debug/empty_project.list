
empty_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b994  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800bb64  0800bb64  0001bb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd4  0800bbd4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbd4  0800bbd4  0001bbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbdc  0800bbdc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbdc  0800bbdc  0001bbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbe0  0800bbe0  0001bbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800bbe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050d0  20000094  0800bc78  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005164  0800bc78  00025164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c88  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e5e  00000000  00000000  00048d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019d8  00000000  00000000  0004dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c0  00000000  00000000  0004f588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006cda  00000000  00000000  00050d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000188df  00000000  00000000  00057a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de63a  00000000  00000000  00070301  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce4  00000000  00000000  0014e9b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb4c 	.word	0x0800bb4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800bb4c 	.word	0x0800bb4c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fae2 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f818 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f8ca 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f89e 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000524:	f007 ff7c 	bl	8008420 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <main+0x30>)
 800052a:	2100      	movs	r1, #0
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x34>)
 800052e:	f007 ffe1 	bl	80084f4 <osThreadNew>
 8000532:	4602      	mov	r2, r0
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <main+0x38>)
 8000536:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f007 ffa6 	bl	8008488 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x2c>
 800053e:	bf00      	nop
 8000540:	0800bb98 	.word	0x0800bb98
 8000544:	080007c1 	.word	0x080007c1
 8000548:	200049cc 	.word	0x200049cc

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b0ac      	sub	sp, #176	; 0xb0
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f00b fa33 	bl	800b9c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	225c      	movs	r2, #92	; 0x5c
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f00b fa24 	bl	800b9c6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b35      	ldr	r3, [pc, #212]	; (8000658 <SystemClock_Config+0x10c>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a34      	ldr	r2, [pc, #208]	; (8000658 <SystemClock_Config+0x10c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	4b32      	ldr	r3, [pc, #200]	; (8000658 <SystemClock_Config+0x10c>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b2f      	ldr	r3, [pc, #188]	; (800065c <SystemClock_Config+0x110>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <SystemClock_Config+0x110>)
 80005a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ac:	6013      	str	r3, [r2, #0]
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <SystemClock_Config+0x110>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ba:	2301      	movs	r3, #1
 80005bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005da:	2348      	movs	r3, #72	; 0x48
 80005dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005e6:	2303      	movs	r3, #3
 80005e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f868 	bl	80036cc <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000602:	f000 f8f9 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fa3c 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800062e:	f000 f8e3 	bl	80007f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000636:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000638:	2300      	movs	r3, #0
 800063a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fb79 	bl	8002d38 <HAL_RCCEx_PeriphCLKConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x104>
  {
    Error_Handler();
 800064c:	f000 f8d4 	bl	80007f8 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	37b0      	adds	r7, #176	; 0xb0
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_USART2_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000698:	f003 fcb0 	bl	8003ffc <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f8a9 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200049d0 	.word	0x200049d0
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b37      	ldr	r3, [pc, #220]	; (80007ac <MX_GPIO_Init+0xf8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a36      	ldr	r2, [pc, #216]	; (80007ac <MX_GPIO_Init+0xf8>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <MX_GPIO_Init+0xf8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <MX_GPIO_Init+0xf8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <MX_GPIO_Init+0xf8>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <MX_GPIO_Init+0xf8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <MX_GPIO_Init+0xf8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a28      	ldr	r2, [pc, #160]	; (80007ac <MX_GPIO_Init+0xf8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_GPIO_Init+0xf8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <MX_GPIO_Init+0xf8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_GPIO_Init+0xf8>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_GPIO_Init+0xf8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	481c      	ldr	r0, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xfc>)
 8000740:	f000 fca4 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VBUS_GPIO_Port, VBUS_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	481a      	ldr	r0, [pc, #104]	; (80007b4 <MX_GPIO_Init+0x100>)
 800074c:	f000 fc9e 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_GPIO_Init+0x104>)
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	4815      	ldr	r0, [pc, #84]	; (80007bc <MX_GPIO_Init+0x108>)
 8000766:	f000 faff 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076a:	2320      	movs	r3, #32
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_GPIO_Init+0xfc>)
 8000782:	f000 faf1 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_Pin */
  GPIO_InitStruct.Pin = VBUS_Pin;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_GPIO_Init+0x100>)
 80007a0:	f000 fae2 	bl	8000d68 <HAL_GPIO_Init>

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020000 	.word	0x40020000
 80007b4:	40020400 	.word	0x40020400
 80007b8:	10210000 	.word	0x10210000
 80007bc:	40020800 	.word	0x40020800

080007c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80007c8:	f00a fd90 	bl	800b2ec <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f007 ff37 	bl	8008640 <osDelay>
 80007d2:	e7fb      	b.n	80007cc <StartDefaultTask+0xc>

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 f99b 	bl	8000b20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40001000 	.word	0x40001000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fe:	e7fe      	b.n	80007fe <Error_Handler+0x6>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_MspInit+0x54>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_MspInit+0x54>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	f06f 0001 	mvn.w	r0, #1
 8000846:	f000 fa65 	bl	8000d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <HAL_UART_MspInit+0x84>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12b      	bne.n	80008d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_UART_MspInit+0x88>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0x88>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x88>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_UART_MspInit+0x88>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_UART_MspInit+0x88>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_UART_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b2:	230c      	movs	r3, #12
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c2:	2307      	movs	r3, #7
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <HAL_UART_MspInit+0x8c>)
 80008ce:	f000 fa4b 	bl	8000d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000

080008e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2036      	movs	r0, #54	; 0x36
 80008fe:	f000 fa09 	bl	8000d14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000902:	2036      	movs	r0, #54	; 0x36
 8000904:	f000 fa22 	bl	8000d4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <HAL_InitTick+0xa4>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a1e      	ldr	r2, [pc, #120]	; (800098c <HAL_InitTick+0xa4>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <HAL_InitTick+0xa4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000924:	f107 0210 	add.w	r2, r7, #16
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f002 f9d0 	bl	8002cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000934:	f002 f9a6 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8000938:	4603      	mov	r3, r0
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <HAL_InitTick+0xa8>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	0c9b      	lsrs	r3, r3, #18
 8000948:	3b01      	subs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_InitTick+0xac>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <HAL_InitTick+0xb0>)
 8000950:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_InitTick+0xac>)
 8000954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000958:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_InitTick+0xac>)
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_InitTick+0xac>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_InitTick+0xac>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <HAL_InitTick+0xac>)
 800096e:	f003 f907 	bl	8003b80 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d104      	bne.n	8000982 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000978:	4806      	ldr	r0, [pc, #24]	; (8000994 <HAL_InitTick+0xac>)
 800097a:	f003 f936 	bl	8003bea <HAL_TIM_Base_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3730      	adds	r7, #48	; 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	431bde83 	.word	0x431bde83
 8000994:	20004a10 	.word	0x20004a10
 8000998:	40001000 	.word	0x40001000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM6_DAC_IRQHandler+0x10>)
 80009ce:	f003 f930 	bl	8003c32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20004a10 	.word	0x20004a10

080009dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <OTG_FS_IRQHandler+0x10>)
 80009e2:	f000 fdfb 	bl	80015dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20004e9c 	.word	0x20004e9c

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f00a ff8c 	bl	800b93c <__errno>
 8000a24:	4602      	mov	r2, r0
 8000a26:	230c      	movs	r3, #12
 8000a28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20020000 	.word	0x20020000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	200000b0 	.word	0x200000b0
 8000a58:	20005168 	.word	0x20005168

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <SystemInit+0x28>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <SystemInit+0x28>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SystemInit+0x28>)
 8000a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a76:	609a      	str	r2, [r3, #8]
#endif
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a8e:	e003      	b.n	8000a98 <LoopCopyDataInit>

08000a90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a96:	3104      	adds	r1, #4

08000a98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aa0:	d3f6      	bcc.n	8000a90 <CopyDataInit>
  ldr  r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aa4:	e002      	b.n	8000aac <LoopFillZerobss>

08000aa6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa8:	f842 3b04 	str.w	r3, [r2], #4

08000aac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ab0:	d3f9      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ab2:	f7ff ffd3 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f00a ff47 	bl	800b948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aba:	f7ff fd29 	bl	8000510 <main>
  bx  lr    
 8000abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ac4:	0800bbe4 	.word	0x0800bbe4
  ldr  r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000acc:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000ad0:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8000ad4:	20005164 	.word	0x20005164

08000ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <HAL_Init+0x40>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_Init+0x40>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x40>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f8fa 	bl	8000cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff feec 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe76 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20004a50 	.word	0x20004a50

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20004a50 	.word	0x20004a50

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff ffee 	bl	8000b48 <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_Delay+0x40>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffde 	bl	8000b48 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ff4c 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d26:	f7ff ff61 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f7ff ffb1 	bl	8000c98 <NVIC_EncodePriority>
 8000d36:	4602      	mov	r2, r0
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff80 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff54 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e165      	b.n	8001050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8154 	bne.w	800104a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d00b      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db6:	2b11      	cmp	r3, #17
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0xfc>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b12      	cmp	r3, #18
 8000e62:	d123      	bne.n	8000eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	69b9      	ldr	r1, [r7, #24]
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0203 	and.w	r2, r3, #3
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80ae 	beq.w	800104a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b59      	ldr	r3, [pc, #356]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0a:	4a57      	ldr	r2, [pc, #348]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4e      	ldr	r2, [pc, #312]	; (800106c <HAL_GPIO_Init+0x304>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d025      	beq.n	8000f82 <HAL_GPIO_Init+0x21a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_GPIO_Init+0x308>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01f      	beq.n	8000f7e <HAL_GPIO_Init+0x216>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x30c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x212>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4b      	ldr	r2, [pc, #300]	; (8001078 <HAL_GPIO_Init+0x310>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x20e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4a      	ldr	r2, [pc, #296]	; (800107c <HAL_GPIO_Init+0x314>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x20a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x318>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x206>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x31c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x202>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e00c      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00a      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f94:	4934      	ldr	r1, [pc, #208]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc6:	4a30      	ldr	r2, [pc, #192]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff0:	4a25      	ldr	r2, [pc, #148]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <HAL_GPIO_Init+0x320>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x320>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_GPIO_Init+0x320>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f ae96 	bls.w	8000d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	3724      	adds	r7, #36	; 0x24
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80010be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c0:	b08f      	sub	sp, #60	; 0x3c
 80010c2:	af0a      	add	r7, sp, #40	; 0x28
 80010c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e054      	b.n	800117a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f00a f952 	bl	800b394 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fbb0 	bl	8004874 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	687e      	ldr	r6, [r7, #4]
 800111c:	466d      	mov	r5, sp
 800111e:	f106 0410 	add.w	r4, r6, #16
 8001122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800112e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001132:	1d33      	adds	r3, r6, #4
 8001134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f003 fb2a 	bl	8004790 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fba7 	bl	8004896 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	687e      	ldr	r6, [r7, #4]
 8001150:	466d      	mov	r5, sp
 8001152:	f106 0410 	add.w	r4, r6, #16
 8001156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001162:	e885 0003 	stmia.w	r5, {r0, r1}
 8001166:	1d33      	adds	r3, r6, #4
 8001168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	f003 fcba 	bl	8004ae4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001182 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b089      	sub	sp, #36	; 0x24
 8001186:	af04      	add	r7, sp, #16
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	4608      	mov	r0, r1
 800118c:	4611      	mov	r1, r2
 800118e:	461a      	mov	r2, r3
 8001190:	4603      	mov	r3, r0
 8001192:	70fb      	strb	r3, [r7, #3]
 8001194:	460b      	mov	r3, r1
 8001196:	70bb      	strb	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_HCD_HC_Init+0x28>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e07f      	b.n	80012aa <HAL_HCD_HC_Init+0x128>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80011b2:	78fa      	ldrb	r2, [r7, #3]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	440b      	add	r3, r1
 80011c0:	333d      	adds	r3, #61	; 0x3d
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80011c6:	78fa      	ldrb	r2, [r7, #3]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	440b      	add	r3, r1
 80011d4:	3338      	adds	r3, #56	; 0x38
 80011d6:	787a      	ldrb	r2, [r7, #1]
 80011d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80011da:	78fa      	ldrb	r2, [r7, #3]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	3340      	adds	r3, #64	; 0x40
 80011ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011ec:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80011ee:	78fa      	ldrb	r2, [r7, #3]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	440b      	add	r3, r1
 80011fc:	3339      	adds	r3, #57	; 0x39
 80011fe:	78fa      	ldrb	r2, [r7, #3]
 8001200:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	333f      	adds	r3, #63	; 0x3f
 8001212:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001216:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	78bb      	ldrb	r3, [r7, #2]
 800121c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001220:	b2d8      	uxtb	r0, r3
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	333a      	adds	r3, #58	; 0x3a
 8001230:	4602      	mov	r2, r0
 8001232:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001234:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001238:	2b00      	cmp	r3, #0
 800123a:	da0a      	bge.n	8001252 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800123c:	78fa      	ldrb	r2, [r7, #3]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	333b      	adds	r3, #59	; 0x3b
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e009      	b.n	8001266 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001252:	78fa      	ldrb	r2, [r7, #3]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	440b      	add	r3, r1
 8001260:	333b      	adds	r3, #59	; 0x3b
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	333c      	adds	r3, #60	; 0x3c
 8001276:	f897 2020 	ldrb.w	r2, [r7, #32]
 800127a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	787c      	ldrb	r4, [r7, #1]
 8001282:	78ba      	ldrb	r2, [r7, #2]
 8001284:	78f9      	ldrb	r1, [r7, #3]
 8001286:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4623      	mov	r3, r4
 8001298:	f003 fd9a 	bl	8004dd0 <USB_HC_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}

080012b2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_HCD_HC_Halt+0x1e>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e00f      	b.n	80012f0 <HAL_HCD_HC_Halt+0x3e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	78fa      	ldrb	r2, [r7, #3]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 ffd6 	bl	8005292 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	4608      	mov	r0, r1
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4603      	mov	r3, r0
 8001308:	70fb      	strb	r3, [r7, #3]
 800130a:	460b      	mov	r3, r1
 800130c:	70bb      	strb	r3, [r7, #2]
 800130e:	4613      	mov	r3, r2
 8001310:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	333b      	adds	r3, #59	; 0x3b
 8001322:	78ba      	ldrb	r2, [r7, #2]
 8001324:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	333f      	adds	r3, #63	; 0x3f
 8001336:	787a      	ldrb	r2, [r7, #1]
 8001338:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800133a:	7c3b      	ldrb	r3, [r7, #16]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d114      	bne.n	800136a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3342      	adds	r3, #66	; 0x42
 8001350:	2203      	movs	r2, #3
 8001352:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001354:	78fa      	ldrb	r2, [r7, #3]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	440b      	add	r3, r1
 8001362:	333d      	adds	r3, #61	; 0x3d
 8001364:	7f3a      	ldrb	r2, [r7, #28]
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e009      	b.n	800137e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	3342      	adds	r3, #66	; 0x42
 800137a:	2202      	movs	r2, #2
 800137c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800137e:	787b      	ldrb	r3, [r7, #1]
 8001380:	2b03      	cmp	r3, #3
 8001382:	f200 80d6 	bhi.w	8001532 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	0800139d 	.word	0x0800139d
 8001390:	0800151d 	.word	0x0800151d
 8001394:	08001409 	.word	0x08001409
 8001398:	08001493 	.word	0x08001493
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800139c:	7c3b      	ldrb	r3, [r7, #16]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	f040 80c9 	bne.w	8001536 <HAL_HCD_HC_SubmitRequest+0x23e>
 80013a4:	78bb      	ldrb	r3, [r7, #2]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 80c5 	bne.w	8001536 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80013ac:	8b3b      	ldrh	r3, [r7, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	3351      	adds	r3, #81	; 0x51
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	3351      	adds	r3, #81	; 0x51
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10a      	bne.n	80013f2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013dc:	78fa      	ldrb	r2, [r7, #3]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	3342      	adds	r3, #66	; 0x42
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80013f0:	e0a1      	b.n	8001536 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013f2:	78fa      	ldrb	r2, [r7, #3]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	3342      	adds	r3, #66	; 0x42
 8001402:	2202      	movs	r2, #2
 8001404:	701a      	strb	r2, [r3, #0]
      break;
 8001406:	e096      	b.n	8001536 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001408:	78bb      	ldrb	r3, [r7, #2]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d120      	bne.n	8001450 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800140e:	78fa      	ldrb	r2, [r7, #3]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	3351      	adds	r3, #81	; 0x51
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10a      	bne.n	800143a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	3342      	adds	r3, #66	; 0x42
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001438:	e07e      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800143a:	78fa      	ldrb	r2, [r7, #3]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	3342      	adds	r3, #66	; 0x42
 800144a:	2202      	movs	r2, #2
 800144c:	701a      	strb	r2, [r3, #0]
      break;
 800144e:	e073      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001450:	78fa      	ldrb	r2, [r7, #3]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	3350      	adds	r3, #80	; 0x50
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10a      	bne.n	800147c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	3342      	adds	r3, #66	; 0x42
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
      break;
 800147a:	e05d      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3342      	adds	r3, #66	; 0x42
 800148c:	2202      	movs	r2, #2
 800148e:	701a      	strb	r2, [r3, #0]
      break;
 8001490:	e052      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001492:	78bb      	ldrb	r3, [r7, #2]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d120      	bne.n	80014da <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3351      	adds	r3, #81	; 0x51
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3342      	adds	r3, #66	; 0x42
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014c2:	e039      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014c4:	78fa      	ldrb	r2, [r7, #3]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	3342      	adds	r3, #66	; 0x42
 80014d4:	2202      	movs	r2, #2
 80014d6:	701a      	strb	r2, [r3, #0]
      break;
 80014d8:	e02e      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	3350      	adds	r3, #80	; 0x50
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10a      	bne.n	8001506 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3342      	adds	r3, #66	; 0x42
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
      break;
 8001504:	e018      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	3342      	adds	r3, #66	; 0x42
 8001516:	2202      	movs	r2, #2
 8001518:	701a      	strb	r2, [r3, #0]
      break;
 800151a:	e00d      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800151c:	78fa      	ldrb	r2, [r7, #3]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	3342      	adds	r3, #66	; 0x42
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
      break;
 8001530:	e002      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001532:	bf00      	nop
 8001534:	e000      	b.n	8001538 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001536:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	3344      	adds	r3, #68	; 0x44
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	8b39      	ldrh	r1, [r7, #24]
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4403      	add	r3, r0
 800155c:	3348      	adds	r3, #72	; 0x48
 800155e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	335c      	adds	r3, #92	; 0x5c
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	334c      	adds	r3, #76	; 0x4c
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3339      	adds	r3, #57	; 0x39
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	335d      	adds	r3, #93	; 0x5d
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	3338      	adds	r3, #56	; 0x38
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	18d1      	adds	r1, r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	f003 fd0a 	bl	8004fe4 <USB_HC_StartXfer>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop

080015dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fa33 	bl	8004a5e <USB_GetMode>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	f040 80ef 	bne.w	80017de <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f003 fa17 	bl	8004a38 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80e5 	beq.w	80017dc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fa0e 	bl	8004a38 <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001626:	d104      	bne.n	8001632 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001630:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f003 f9fe 	bl	8004a38 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001646:	d104      	bne.n	8001652 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f003 f9ee 	bl	8004a38 <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001666:	d104      	bne.n	8001672 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f003 f9de 	bl	8004a38 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b02      	cmp	r3, #2
 8001684:	d103      	bne.n	800168e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2202      	movs	r2, #2
 800168c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f003 f9d0 	bl	8004a38 <USB_ReadInterrupts>
 8001698:	4603      	mov	r3, r0
 800169a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800169e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a2:	d115      	bne.n	80016d0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d108      	bne.n	80016d0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f009 fed8 	bl	800b474 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 faba 	bl	8004c44 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 f9af 	bl	8004a38 <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d102      	bne.n	80016ec <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f001 f966 	bl	80029b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 f9a1 	bl	8004a38 <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d106      	bne.n	800170e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f009 fe9b 	bl	800b43c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2208      	movs	r2, #8
 800170c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f990 	bl	8004a38 <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001722:	d138      	bne.n	8001796 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f003 fda1 	bl	8005270 <USB_HC_ReadInterrupt>
 800172e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e025      	b.n	8001782 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d018      	beq.n	800177c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800175c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001760:	d106      	bne.n	8001770 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f8cf 	bl	800190c <HCD_HC_IN_IRQHandler>
 800176e:	e005      	b.n	800177c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fcfd 	bl	8002176 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3d4      	bcc.n	8001736 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f003 f94c 	bl	8004a38 <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d101      	bne.n	80017ae <HAL_HCD_IRQHandler+0x1d2>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_HCD_IRQHandler+0x1d4>
 80017ae:	2300      	movs	r3, #0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d014      	beq.n	80017de <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0210 	bic.w	r2, r2, #16
 80017c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f001 f84b 	bl	8002860 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0210 	orr.w	r2, r2, #16
 80017d8:	619a      	str	r2, [r3, #24]
 80017da:	e000      	b.n	80017de <HAL_HCD_IRQHandler+0x202>
      return;
 80017dc:	bf00      	nop
    }
  }
}
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_HCD_Start+0x16>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e013      	b.n	8001822 <HAL_HCD_Start+0x3e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 f823 	bl	8004852 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fa7a 	bl	8004d0c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_HCD_Stop+0x16>
 800183c:	2302      	movs	r3, #2
 800183e:	e00d      	b.n	800185c <HAL_HCD_Stop+0x32>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fe5b 	bl	8005508 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fa21 	bl	8004cb8 <USB_ResetPort>
 8001876:	4603      	mov	r3, r0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	335c      	adds	r3, #92	; 0x5c
 800189c:	781b      	ldrb	r3, [r3, #0]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	334c      	adds	r3, #76	; 0x4c
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fa63 	bl	8004dac <USB_GetCurrentFrame>
 80018e6:	4603      	mov	r3, r0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fa3e 	bl	8004d7e <USB_GetHostSpeed>
 8001902:	4603      	mov	r3, r0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	015a      	lsls	r2, r3, #5
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4413      	add	r3, r2
 800192e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b04      	cmp	r3, #4
 800193a:	d119      	bne.n	8001970 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4413      	add	r3, r2
 8001944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001948:	461a      	mov	r2, r3
 800194a:	2304      	movs	r3, #4
 800194c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4413      	add	r3, r2
 8001956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	0151      	lsls	r1, r2, #5
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	440a      	add	r2, r1
 8001964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	60d3      	str	r3, [r2, #12]
 800196e:	e0ce      	b.n	8001b0e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001986:	d12c      	bne.n	80019e2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4413      	add	r3, r2
 8001990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001994:	461a      	mov	r2, r3
 8001996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	335d      	adds	r3, #93	; 0x5d
 80019ac:	2207      	movs	r2, #7
 80019ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	0151      	lsls	r1, r2, #5
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	440a      	add	r2, r1
 80019c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fc59 	bl	8005292 <USB_HC_Halt>
 80019e0:	e095      	b.n	8001b0e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d109      	bne.n	8001a0c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	015a      	lsls	r2, r3, #5
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a04:	461a      	mov	r2, r3
 8001a06:	2320      	movs	r3, #32
 8001a08:	6093      	str	r3, [r2, #8]
 8001a0a:	e080      	b.n	8001b0e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d134      	bne.n	8001a8c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	015a      	lsls	r2, r3, #5
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	0151      	lsls	r1, r2, #5
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	440a      	add	r2, r1
 8001a38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	335d      	adds	r3, #93	; 0x5d
 8001a52:	2205      	movs	r2, #5
 8001a54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a62:	461a      	mov	r2, r3
 8001a64:	2310      	movs	r3, #16
 8001a66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a74:	461a      	mov	r2, r3
 8001a76:	2308      	movs	r3, #8
 8001a78:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fc04 	bl	8005292 <USB_HC_Halt>
 8001a8a:	e040      	b.n	8001b0e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa2:	d134      	bne.n	8001b0e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	0151      	lsls	r1, r2, #5
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	440a      	add	r2, r1
 8001aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fbdf 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	335d      	adds	r3, #93	; 0x5d
 8001af6:	2208      	movs	r2, #8
 8001af8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b06:	461a      	mov	r2, r3
 8001b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b24:	d122      	bne.n	8001b6c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	015a      	lsls	r2, r3, #5
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	0151      	lsls	r1, r2, #5
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	440a      	add	r2, r1
 8001b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 fb9e 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b62:	461a      	mov	r2, r3
 8001b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b68:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001b6a:	e300      	b.n	800216e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	015a      	lsls	r2, r3, #5
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 80fd 	bne.w	8001d7e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3348      	adds	r3, #72	; 0x48
 8001b9c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0159      	lsls	r1, r3, #5
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001bb0:	1ad1      	subs	r1, r2, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4403      	add	r3, r0
 8001bc0:	334c      	adds	r3, #76	; 0x4c
 8001bc2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	335d      	adds	r3, #93	; 0x5d
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	3358      	adds	r3, #88	; 0x58
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	333f      	adds	r3, #63	; 0x3f
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00a      	beq.n	8001c2a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	333f      	adds	r3, #63	; 0x3f
 8001c24:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d121      	bne.n	8001c6e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	0151      	lsls	r1, r2, #5
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	440a      	add	r2, r1
 8001c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fb1c 	bl	8005292 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	461a      	mov	r2, r3
 8001c68:	2310      	movs	r3, #16
 8001c6a:	6093      	str	r3, [r2, #8]
 8001c6c:	e070      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	333f      	adds	r3, #63	; 0x3f
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d12a      	bne.n	8001cda <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	0151      	lsls	r1, r2, #5
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	440a      	add	r2, r1
 8001c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ca2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	335c      	adds	r3, #92	; 0x5c
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	b2d8      	uxtb	r0, r3
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	335c      	adds	r3, #92	; 0x5c
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f009 fbdc 	bl	800b490 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001cd8:	e03a      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	333f      	adds	r3, #63	; 0x3f
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d12f      	bne.n	8001d50 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	335c      	adds	r3, #92	; 0x5c
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3350      	adds	r3, #80	; 0x50
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f083 0301 	eor.w	r3, r3, #1
 8001d1a:	b2d8      	uxtb	r0, r3
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3350      	adds	r3, #80	; 0x50
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	b2d8      	uxtb	r0, r3
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	335c      	adds	r3, #92	; 0x5c
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4601      	mov	r1, r0
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f009 fba0 	bl	800b490 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3350      	adds	r3, #80	; 0x50
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2d8      	uxtb	r0, r3
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	3350      	adds	r3, #80	; 0x50
 8001d78:	4602      	mov	r2, r0
 8001d7a:	701a      	strb	r2, [r3, #0]
}
 8001d7c:	e1f7      	b.n	800216e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f040 811a 	bne.w	8001fca <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	0151      	lsls	r1, r2, #5
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	440a      	add	r2, r1
 8001dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db0:	f023 0302 	bic.w	r3, r3, #2
 8001db4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	335d      	adds	r3, #93	; 0x5d
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10a      	bne.n	8001de2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	335c      	adds	r3, #92	; 0x5c
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e0d9      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	335d      	adds	r3, #93	; 0x5d
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d10a      	bne.n	8001e0e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	335c      	adds	r3, #92	; 0x5c
 8001e08:	2205      	movs	r2, #5
 8001e0a:	701a      	strb	r2, [r3, #0]
 8001e0c:	e0c3      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	440b      	add	r3, r1
 8001e1c:	335d      	adds	r3, #93	; 0x5d
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d00a      	beq.n	8001e3a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	335d      	adds	r3, #93	; 0x5d
 8001e34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d156      	bne.n	8001ee8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	3358      	adds	r3, #88	; 0x58
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1c59      	adds	r1, r3, #1
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4403      	add	r3, r0
 8001e5c:	3358      	adds	r3, #88	; 0x58
 8001e5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3358      	adds	r3, #88	; 0x58
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d914      	bls.n	8001ea0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	3358      	adds	r3, #88	; 0x58
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	335c      	adds	r3, #92	; 0x5c
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e009      	b.n	8001eb4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	335c      	adds	r3, #92	; 0x5c
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001eca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ed2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e056      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	335d      	adds	r3, #93	; 0x5d
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d123      	bne.n	8001f46 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	335c      	adds	r3, #92	; 0x5c
 8001f0e:	2202      	movs	r2, #2
 8001f10:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f28:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f30:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e027      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	335d      	adds	r3, #93	; 0x5d
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b07      	cmp	r3, #7
 8001f5a:	d11c      	bne.n	8001f96 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	3358      	adds	r3, #88	; 0x58
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	1c59      	adds	r1, r3, #1
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4403      	add	r3, r0
 8001f7e:	3358      	adds	r3, #88	; 0x58
 8001f80:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	335c      	adds	r3, #92	; 0x5c
 8001f92:	2204      	movs	r2, #4
 8001f94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	b2d8      	uxtb	r0, r3
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	335c      	adds	r3, #92	; 0x5c
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4601      	mov	r1, r0
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f009 fa64 	bl	800b490 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001fc8:	e0d1      	b.n	800216e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d13e      	bne.n	800205e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	0151      	lsls	r1, r2, #5
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	440a      	add	r2, r1
 8001ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3358      	adds	r3, #88	; 0x58
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	1c59      	adds	r1, r3, #1
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4403      	add	r3, r0
 8002022:	3358      	adds	r3, #88	; 0x58
 8002024:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	335d      	adds	r3, #93	; 0x5d
 8002036:	2206      	movs	r2, #6
 8002038:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f003 f924 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4413      	add	r3, r2
 8002052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002056:	461a      	mov	r2, r3
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	6093      	str	r3, [r2, #8]
}
 800205c:	e087      	b.n	800216e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b10      	cmp	r3, #16
 8002072:	d17c      	bne.n	800216e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	333f      	adds	r3, #63	; 0x3f
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d122      	bne.n	80020d0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	3358      	adds	r3, #88	; 0x58
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	0151      	lsls	r1, r2, #5
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	440a      	add	r2, r1
 80020b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 f8e2 	bl	8005292 <USB_HC_Halt>
 80020ce:	e045      	b.n	800215c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	333f      	adds	r3, #63	; 0x3f
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	333f      	adds	r3, #63	; 0x3f
 80020f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d12f      	bne.n	800215c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3358      	adds	r3, #88	; 0x58
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d121      	bne.n	800215c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335d      	adds	r3, #93	; 0x5d
 8002128:	2203      	movs	r2, #3
 800212a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	0151      	lsls	r1, r2, #5
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	440a      	add	r2, r1
 8002142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f003 f89b 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	461a      	mov	r2, r3
 800216a:	2310      	movs	r3, #16
 800216c:	6093      	str	r3, [r2, #8]
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d119      	bne.n	80021da <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	461a      	mov	r2, r3
 80021b4:	2304      	movs	r3, #4
 80021b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	0151      	lsls	r1, r2, #5
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	440a      	add	r2, r1
 80021ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80021d8:	e33e      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d141      	bne.n	8002274 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	461a      	mov	r2, r3
 80021fe:	2320      	movs	r3, #32
 8002200:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	333d      	adds	r3, #61	; 0x3d
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	f040 831f 	bne.w	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	333d      	adds	r3, #61	; 0x3d
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	335c      	adds	r3, #92	; 0x5c
 800223e:	2202      	movs	r2, #2
 8002240:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	0151      	lsls	r1, r2, #5
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	440a      	add	r2, r1
 8002258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f003 f810 	bl	8005292 <USB_HC_Halt>
}
 8002272:	e2f1      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d13f      	bne.n	800230a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	335d      	adds	r3, #93	; 0x5d
 800229a:	2204      	movs	r2, #4
 800229c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	333d      	adds	r3, #61	; 0x3d
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	3358      	adds	r3, #88	; 0x58
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	0151      	lsls	r1, r2, #5
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	440a      	add	r2, r1
 80022dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 ffce 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2340      	movs	r3, #64	; 0x40
 8002306:	6093      	str	r3, [r2, #8]
}
 8002308:	e2a6      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002320:	d122      	bne.n	8002368 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	0151      	lsls	r1, r2, #5
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	440a      	add	r2, r1
 8002338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f002 ffa0 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002364:	6093      	str	r3, [r2, #8]
}
 8002366:	e277      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d135      	bne.n	80023ea <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3358      	adds	r3, #88	; 0x58
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	0151      	lsls	r1, r2, #5
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	440a      	add	r2, r1
 80023a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 ff68 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	461a      	mov	r2, r3
 80023d0:	2301      	movs	r3, #1
 80023d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	335d      	adds	r3, #93	; 0x5d
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
}
 80023e8:	e236      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d12b      	bne.n	8002458 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	2308      	movs	r3, #8
 8002410:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	0151      	lsls	r1, r2, #5
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	440a      	add	r2, r1
 8002428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f002 ff28 	bl	8005292 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	335d      	adds	r3, #93	; 0x5d
 8002452:	2205      	movs	r2, #5
 8002454:	701a      	strb	r2, [r3, #0]
}
 8002456:	e1ff      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b10      	cmp	r3, #16
 800246c:	d155      	bne.n	800251a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3358      	adds	r3, #88	; 0x58
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	335d      	adds	r3, #93	; 0x5d
 8002492:	2203      	movs	r2, #3
 8002494:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	333d      	adds	r3, #61	; 0x3d
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d114      	bne.n	80024d6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	333c      	adds	r3, #60	; 0x3c
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	333d      	adds	r3, #61	; 0x3d
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	0151      	lsls	r1, r2, #5
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	440a      	add	r2, r1
 80024ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fec6 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	461a      	mov	r2, r3
 8002514:	2310      	movs	r3, #16
 8002516:	6093      	str	r3, [r2, #8]
}
 8002518:	e19e      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d12b      	bne.n	8002588 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	0151      	lsls	r1, r2, #5
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	440a      	add	r2, r1
 8002546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f002 fe99 	bl	8005292 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	335d      	adds	r3, #93	; 0x5d
 8002570:	2206      	movs	r2, #6
 8002572:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	461a      	mov	r2, r3
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	6093      	str	r3, [r2, #8]
}
 8002586:	e167      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d135      	bne.n	800260c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	0151      	lsls	r1, r2, #5
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	440a      	add	r2, r1
 80025b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 fe61 	bl	8005292 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	2310      	movs	r3, #16
 80025e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	461a      	mov	r2, r3
 80025f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	335d      	adds	r3, #93	; 0x5d
 8002606:	2208      	movs	r2, #8
 8002608:	701a      	strb	r2, [r3, #0]
}
 800260a:	e125      	b.n	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b02      	cmp	r3, #2
 8002620:	f040 811a 	bne.w	8002858 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	0151      	lsls	r1, r2, #5
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	440a      	add	r2, r1
 800263a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263e:	f023 0302 	bic.w	r3, r3, #2
 8002642:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	335d      	adds	r3, #93	; 0x5d
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d137      	bne.n	80026ca <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	335c      	adds	r3, #92	; 0x5c
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	333f      	adds	r3, #63	; 0x3f
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d00b      	beq.n	800269c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	333f      	adds	r3, #63	; 0x3f
 8002694:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002696:	2b03      	cmp	r3, #3
 8002698:	f040 80c5 	bne.w	8002826 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	3351      	adds	r3, #81	; 0x51
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2d8      	uxtb	r0, r3
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	3351      	adds	r3, #81	; 0x51
 80026c4:	4602      	mov	r2, r0
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e0ad      	b.n	8002826 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	335d      	adds	r3, #93	; 0x5d
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d10a      	bne.n	80026f6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	335c      	adds	r3, #92	; 0x5c
 80026f0:	2202      	movs	r2, #2
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e097      	b.n	8002826 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	335d      	adds	r3, #93	; 0x5d
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d10a      	bne.n	8002722 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	335c      	adds	r3, #92	; 0x5c
 800271c:	2202      	movs	r2, #2
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e081      	b.n	8002826 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	335d      	adds	r3, #93	; 0x5d
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b05      	cmp	r3, #5
 8002736:	d10a      	bne.n	800274e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	335c      	adds	r3, #92	; 0x5c
 8002748:	2205      	movs	r2, #5
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e06b      	b.n	8002826 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	335d      	adds	r3, #93	; 0x5d
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b06      	cmp	r3, #6
 8002762:	d00a      	beq.n	800277a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	335d      	adds	r3, #93	; 0x5d
 8002774:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002776:	2b08      	cmp	r3, #8
 8002778:	d155      	bne.n	8002826 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	3358      	adds	r3, #88	; 0x58
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	1c59      	adds	r1, r3, #1
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4403      	add	r3, r0
 800279c:	3358      	adds	r3, #88	; 0x58
 800279e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	3358      	adds	r3, #88	; 0x58
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d914      	bls.n	80027e0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	3358      	adds	r3, #88	; 0x58
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	335c      	adds	r3, #92	; 0x5c
 80027da:	2204      	movs	r2, #4
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e009      	b.n	80027f4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	335c      	adds	r3, #92	; 0x5c
 80027f0:	2202      	movs	r2, #2
 80027f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800280a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002812:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	461a      	mov	r2, r3
 8002834:	2302      	movs	r3, #2
 8002836:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	b2d8      	uxtb	r0, r3
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	335c      	adds	r3, #92	; 0x5c
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4601      	mov	r1, r0
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f008 fe1c 	bl	800b490 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	0c5b      	lsrs	r3, r3, #17
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002894:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d003      	beq.n	80028a4 <HCD_RXQLVL_IRQHandler+0x44>
 800289c:	2b05      	cmp	r3, #5
 800289e:	f000 8082 	beq.w	80029a6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028a2:	e083      	b.n	80029ac <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d07f      	beq.n	80029aa <HCD_RXQLVL_IRQHandler+0x14a>
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	3344      	adds	r3, #68	; 0x44
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d074      	beq.n	80029aa <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	3344      	adds	r3, #68	; 0x44
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	b292      	uxth	r2, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f002 f883 	bl	80049e6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3344      	adds	r3, #68	; 0x44
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	18d1      	adds	r1, r2, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4403      	add	r3, r0
 8002904:	3344      	adds	r3, #68	; 0x44
 8002906:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	334c      	adds	r3, #76	; 0x4c
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	18d1      	adds	r1, r2, r3
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4403      	add	r3, r0
 800292c:	334c      	adds	r3, #76	; 0x4c
 800292e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d031      	beq.n	80029aa <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800295c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002964:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	3350      	adds	r3, #80	; 0x50
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f083 0301 	eor.w	r3, r3, #1
 800298e:	b2d8      	uxtb	r0, r3
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	3350      	adds	r3, #80	; 0x50
 80029a0:	4602      	mov	r2, r0
 80029a2:	701a      	strb	r2, [r3, #0]
      break;
 80029a4:	e001      	b.n	80029aa <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80029a6:	bf00      	nop
 80029a8:	e000      	b.n	80029ac <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80029aa:	bf00      	nop
  }
}
 80029ac:	bf00      	nop
 80029ae:	3728      	adds	r7, #40	; 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	1ff80000 	.word	0x1ff80000

080029b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d10b      	bne.n	8002a08 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f008 fd2c 	bl	800b458 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f043 0302 	orr.w	r3, r3, #2
 8002a06:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d132      	bne.n	8002a78 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d126      	bne.n	8002a72 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d113      	bne.n	8002a54 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a36:	d106      	bne.n	8002a46 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 f900 	bl	8004c44 <USB_InitFSLSPClkSel>
 8002a44:	e011      	b.n	8002a6a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 f8f9 	bl	8004c44 <USB_InitFSLSPClkSel>
 8002a52:	e00a      	b.n	8002a6a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d106      	bne.n	8002a6a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a62:	461a      	mov	r2, r3
 8002a64:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a68:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f008 fd22 	bl	800b4b4 <HAL_HCD_PortEnabled_Callback>
 8002a70:	e002      	b.n	8002a78 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f008 fd2c 	bl	800b4d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d103      	bne.n	8002a8a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f043 0320 	orr.w	r3, r3, #32
 8002a88:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6013      	str	r3, [r2, #0]
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0cc      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d90c      	bls.n	8002adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b8      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	494d      	ldr	r1, [pc, #308]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d044      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d119      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e067      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4934      	ldr	r1, [pc, #208]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fd ffda 	bl	8000b48 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fd ffd6 	bl	8000b48 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e04f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d20c      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e032      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4916      	ldr	r1, [pc, #88]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	490e      	ldr	r1, [pc, #56]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c26:	f000 fbb1 	bl	800338c <HAL_RCC_GetSysClockFreq>
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	5cd3      	ldrb	r3, [r2, r3]
 8002c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fe4e 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023c00 	.word	0x40023c00
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	0800bbbc 	.word	0x0800bbbc
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000004 	.word	0x20000004

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c8c:	4601      	mov	r1, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	0800bbcc 	.word	0x0800bbcc

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffdc 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0b5b      	lsrs	r3, r3, #13
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	0800bbcc 	.word	0x0800bbcc

08002cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0203 	and.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_RCC_GetClockConfig+0x60>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40023c00 	.word	0x40023c00

08002d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	; 0x30
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d76:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	496c      	ldr	r1, [pc, #432]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d9e:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	4960      	ldr	r1, [pc, #384]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d017      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dcc:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4955      	ldr	r1, [pc, #340]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dea:	d101      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002dec:	2301      	movs	r3, #1
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d017      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e08:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	4946      	ldr	r1, [pc, #280]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e26:	d101      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002e34:	2301      	movs	r3, #1
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 808a 	beq.w	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e62:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a33      	ldr	r2, [pc, #204]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e6e:	f7fd fe6b 	bl	8000b48 <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fd fe67 	bl	8000b48 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e278      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e94:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ec8:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d114      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002eda:	f7fd fe35 	bl	8000b48 <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fd fe31 	bl	8000b48 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e240      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ee      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f10:	d114      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f26:	4902      	ldr	r1, [pc, #8]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]
 8002f2c:	e00c      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42470e40 	.word	0x42470e40
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a49      	ldr	r2, [pc, #292]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f46:	6093      	str	r3, [r2, #8]
 8002f48:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f54:	4944      	ldr	r1, [pc, #272]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002f6c:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f6e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f7c:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	4937      	ldr	r1, [pc, #220]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f9e:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	492e      	ldr	r1, [pc, #184]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	4926      	ldr	r1, [pc, #152]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	491a      	ldr	r1, [pc, #104]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d011      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003018:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003020:	4911      	ldr	r1, [pc, #68]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003030:	d101      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003032:	2301      	movs	r3, #1
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d005      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003044:	f040 80ff 	bne.w	8003246 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800304e:	f7fd fd7b 	bl	8000b48 <HAL_GetTick>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003054:	e00e      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003056:	f7fd fd77 	bl	8000b48 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d907      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e188      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003068:	40023800 	.word	0x40023800
 800306c:	424711e0 	.word	0x424711e0
 8003070:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003074:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ea      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800309c:	2b00      	cmp	r3, #0
 800309e:	d028      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d124      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030a8:	4b71      	ldr	r3, [pc, #452]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	3301      	adds	r3, #1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030ba:	4b6d      	ldr	r3, [pc, #436]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	0e1b      	lsrs	r3, r3, #24
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	431a      	orrs	r2, r3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	071b      	lsls	r3, r3, #28
 80030ea:	4961      	ldr	r1, [pc, #388]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003110:	2b00      	cmp	r3, #0
 8003112:	d035      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311c:	d130      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800311e:	4b54      	ldr	r3, [pc, #336]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003130:	4b4f      	ldr	r3, [pc, #316]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003136:	0f1b      	lsrs	r3, r3, #28
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	019b      	lsls	r3, r3, #6
 8003148:	431a      	orrs	r2, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	3b01      	subs	r3, #1
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	431a      	orrs	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	071b      	lsls	r3, r3, #28
 8003160:	4943      	ldr	r1, [pc, #268]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800316a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316e:	f023 021f 	bic.w	r2, r3, #31
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	493d      	ldr	r1, [pc, #244]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d029      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003194:	d124      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003196:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	3301      	adds	r3, #1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031a8:	4b31      	ldr	r3, [pc, #196]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ae:	0f1b      	lsrs	r3, r3, #28
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	019b      	lsls	r3, r3, #6
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	431a      	orrs	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	071b      	lsls	r3, r3, #28
 80031d8:	4925      	ldr	r1, [pc, #148]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d016      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	019b      	lsls	r3, r3, #6
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	3b01      	subs	r3, #1
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	071b      	lsls	r3, r3, #28
 8003212:	4917      	ldr	r1, [pc, #92]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003220:	f7fd fc92 	bl	8000b48 <HAL_GetTick>
 8003224:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003228:	f7fd fc8e 	bl	8000b48 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e09f      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	2b01      	cmp	r3, #1
 800324a:	f040 8095 	bne.w	8003378 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003254:	f7fd fc78 	bl	8000b48 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800325a:	e00f      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800325c:	f7fd fc74 	bl	8000b48 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d908      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e085      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	42470068 	.word	0x42470068
 8003278:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800327c:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003288:	d0e8      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d02b      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d127      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	019b      	lsls	r3, r3, #6
 80032ce:	431a      	orrs	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	3b01      	subs	r3, #1
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	4928      	ldr	r1, [pc, #160]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032e8:	4b26      	ldr	r3, [pc, #152]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	3b01      	subs	r3, #1
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	4922      	ldr	r1, [pc, #136]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01d      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003316:	d118      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	0e1b      	lsrs	r3, r3, #24
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	019b      	lsls	r3, r3, #6
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	3b01      	subs	r3, #1
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	4910      	ldr	r1, [pc, #64]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003350:	f7fd fbfa 	bl	8000b48 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003358:	f7fd fbf6 	bl	8000b48 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e007      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003376:	d1ef      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	42470070 	.word	0x42470070

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a6:	4bc6      	ldr	r3, [pc, #792]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	f200 817e 	bhi.w	80036b0 <HAL_RCC_GetSysClockFreq+0x324>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_RCC_GetSysClockFreq+0x30>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033f1 	.word	0x080033f1
 80033c0:	080036b1 	.word	0x080036b1
 80033c4:	080036b1 	.word	0x080036b1
 80033c8:	080036b1 	.word	0x080036b1
 80033cc:	080033f7 	.word	0x080033f7
 80033d0:	080036b1 	.word	0x080036b1
 80033d4:	080036b1 	.word	0x080036b1
 80033d8:	080036b1 	.word	0x080036b1
 80033dc:	080033fd 	.word	0x080033fd
 80033e0:	080036b1 	.word	0x080036b1
 80033e4:	080036b1 	.word	0x080036b1
 80033e8:	080036b1 	.word	0x080036b1
 80033ec:	08003559 	.word	0x08003559
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f0:	4bb4      	ldr	r3, [pc, #720]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80033f2:	613b      	str	r3, [r7, #16]
       break;
 80033f4:	e15f      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f6:	4bb4      	ldr	r3, [pc, #720]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80033f8:	613b      	str	r3, [r7, #16]
      break;
 80033fa:	e15c      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fc:	4bb0      	ldr	r3, [pc, #704]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003404:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003406:	4bae      	ldr	r3, [pc, #696]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04a      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003412:	4bab      	ldr	r3, [pc, #684]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	ea03 0501 	and.w	r5, r3, r1
 8003428:	ea04 0602 	and.w	r6, r4, r2
 800342c:	4629      	mov	r1, r5
 800342e:	4632      	mov	r2, r6
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	f04f 0400 	mov.w	r4, #0
 8003438:	0154      	lsls	r4, r2, #5
 800343a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800343e:	014b      	lsls	r3, r1, #5
 8003440:	4619      	mov	r1, r3
 8003442:	4622      	mov	r2, r4
 8003444:	1b49      	subs	r1, r1, r5
 8003446:	eb62 0206 	sbc.w	r2, r2, r6
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	f04f 0400 	mov.w	r4, #0
 8003452:	0194      	lsls	r4, r2, #6
 8003454:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003458:	018b      	lsls	r3, r1, #6
 800345a:	1a5b      	subs	r3, r3, r1
 800345c:	eb64 0402 	sbc.w	r4, r4, r2
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	00e2      	lsls	r2, r4, #3
 800346a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	460b      	mov	r3, r1
 8003472:	4614      	mov	r4, r2
 8003474:	195b      	adds	r3, r3, r5
 8003476:	eb44 0406 	adc.w	r4, r4, r6
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	0262      	lsls	r2, r4, #9
 8003484:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003488:	0259      	lsls	r1, r3, #9
 800348a:	460b      	mov	r3, r1
 800348c:	4614      	mov	r4, r2
 800348e:	4618      	mov	r0, r3
 8003490:	4621      	mov	r1, r4
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f04f 0400 	mov.w	r4, #0
 8003498:	461a      	mov	r2, r3
 800349a:	4623      	mov	r3, r4
 800349c:	f7fc feb8 	bl	8000210 <__aeabi_uldivmod>
 80034a0:	4603      	mov	r3, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e049      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a8:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	f04f 0400 	mov.w	r4, #0
 80034b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	ea03 0501 	and.w	r5, r3, r1
 80034be:	ea04 0602 	and.w	r6, r4, r2
 80034c2:	4629      	mov	r1, r5
 80034c4:	4632      	mov	r2, r6
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	f04f 0400 	mov.w	r4, #0
 80034ce:	0154      	lsls	r4, r2, #5
 80034d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034d4:	014b      	lsls	r3, r1, #5
 80034d6:	4619      	mov	r1, r3
 80034d8:	4622      	mov	r2, r4
 80034da:	1b49      	subs	r1, r1, r5
 80034dc:	eb62 0206 	sbc.w	r2, r2, r6
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	f04f 0400 	mov.w	r4, #0
 80034e8:	0194      	lsls	r4, r2, #6
 80034ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	1a5b      	subs	r3, r3, r1
 80034f2:	eb64 0402 	sbc.w	r4, r4, r2
 80034f6:	f04f 0100 	mov.w	r1, #0
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003504:	00d9      	lsls	r1, r3, #3
 8003506:	460b      	mov	r3, r1
 8003508:	4614      	mov	r4, r2
 800350a:	195b      	adds	r3, r3, r5
 800350c:	eb44 0406 	adc.w	r4, r4, r6
 8003510:	f04f 0100 	mov.w	r1, #0
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	02a2      	lsls	r2, r4, #10
 800351a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800351e:	0299      	lsls	r1, r3, #10
 8003520:	460b      	mov	r3, r1
 8003522:	4614      	mov	r4, r2
 8003524:	4618      	mov	r0, r3
 8003526:	4621      	mov	r1, r4
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f04f 0400 	mov.w	r4, #0
 800352e:	461a      	mov	r2, r3
 8003530:	4623      	mov	r3, r4
 8003532:	f7fc fe6d 	bl	8000210 <__aeabi_uldivmod>
 8003536:	4603      	mov	r3, r0
 8003538:	460c      	mov	r4, r1
 800353a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800353c:	4b60      	ldr	r3, [pc, #384]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	3301      	adds	r3, #1
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	613b      	str	r3, [r7, #16]
      break;
 8003556:	e0ae      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003558:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003560:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003562:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d04a      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	f04f 0400 	mov.w	r4, #0
 8003578:	f240 11ff 	movw	r1, #511	; 0x1ff
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	ea03 0501 	and.w	r5, r3, r1
 8003584:	ea04 0602 	and.w	r6, r4, r2
 8003588:	4629      	mov	r1, r5
 800358a:	4632      	mov	r2, r6
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	f04f 0400 	mov.w	r4, #0
 8003594:	0154      	lsls	r4, r2, #5
 8003596:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800359a:	014b      	lsls	r3, r1, #5
 800359c:	4619      	mov	r1, r3
 800359e:	4622      	mov	r2, r4
 80035a0:	1b49      	subs	r1, r1, r5
 80035a2:	eb62 0206 	sbc.w	r2, r2, r6
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	f04f 0400 	mov.w	r4, #0
 80035ae:	0194      	lsls	r4, r2, #6
 80035b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035b4:	018b      	lsls	r3, r1, #6
 80035b6:	1a5b      	subs	r3, r3, r1
 80035b8:	eb64 0402 	sbc.w	r4, r4, r2
 80035bc:	f04f 0100 	mov.w	r1, #0
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	00e2      	lsls	r2, r4, #3
 80035c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035ca:	00d9      	lsls	r1, r3, #3
 80035cc:	460b      	mov	r3, r1
 80035ce:	4614      	mov	r4, r2
 80035d0:	195b      	adds	r3, r3, r5
 80035d2:	eb44 0406 	adc.w	r4, r4, r6
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	0262      	lsls	r2, r4, #9
 80035e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80035e4:	0259      	lsls	r1, r3, #9
 80035e6:	460b      	mov	r3, r1
 80035e8:	4614      	mov	r4, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	4621      	mov	r1, r4
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f04f 0400 	mov.w	r4, #0
 80035f4:	461a      	mov	r2, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	f7fc fe0a 	bl	8000210 <__aeabi_uldivmod>
 80035fc:	4603      	mov	r3, r0
 80035fe:	460c      	mov	r4, r1
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e049      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	f04f 0400 	mov.w	r4, #0
 800360e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	ea03 0501 	and.w	r5, r3, r1
 800361a:	ea04 0602 	and.w	r6, r4, r2
 800361e:	4629      	mov	r1, r5
 8003620:	4632      	mov	r2, r6
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	f04f 0400 	mov.w	r4, #0
 800362a:	0154      	lsls	r4, r2, #5
 800362c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003630:	014b      	lsls	r3, r1, #5
 8003632:	4619      	mov	r1, r3
 8003634:	4622      	mov	r2, r4
 8003636:	1b49      	subs	r1, r1, r5
 8003638:	eb62 0206 	sbc.w	r2, r2, r6
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	f04f 0400 	mov.w	r4, #0
 8003644:	0194      	lsls	r4, r2, #6
 8003646:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800364a:	018b      	lsls	r3, r1, #6
 800364c:	1a5b      	subs	r3, r3, r1
 800364e:	eb64 0402 	sbc.w	r4, r4, r2
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	00e2      	lsls	r2, r4, #3
 800365c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003660:	00d9      	lsls	r1, r3, #3
 8003662:	460b      	mov	r3, r1
 8003664:	4614      	mov	r4, r2
 8003666:	195b      	adds	r3, r3, r5
 8003668:	eb44 0406 	adc.w	r4, r4, r6
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	02a2      	lsls	r2, r4, #10
 8003676:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800367a:	0299      	lsls	r1, r3, #10
 800367c:	460b      	mov	r3, r1
 800367e:	4614      	mov	r4, r2
 8003680:	4618      	mov	r0, r3
 8003682:	4621      	mov	r1, r4
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f04f 0400 	mov.w	r4, #0
 800368a:	461a      	mov	r2, r3
 800368c:	4623      	mov	r3, r4
 800368e:	f7fc fdbf 	bl	8000210 <__aeabi_uldivmod>
 8003692:	4603      	mov	r3, r0
 8003694:	460c      	mov	r4, r1
 8003696:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0f1b      	lsrs	r3, r3, #28
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	613b      	str	r3, [r7, #16]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80036b2:	613b      	str	r3, [r7, #16]
      break;
 80036b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b6:	693b      	ldr	r3, [r7, #16]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	007a1200 	.word	0x007a1200

080036cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8083 	beq.w	80037ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036e6:	4b95      	ldr	r3, [pc, #596]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d019      	beq.n	8003726 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036f2:	4b92      	ldr	r3, [pc, #584]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d106      	bne.n	800370c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036fe:	4b8f      	ldr	r3, [pc, #572]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370a:	d00c      	beq.n	8003726 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370c:	4b8b      	ldr	r3, [pc, #556]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d112      	bne.n	800373e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003718:	4b88      	ldr	r3, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003724:	d10b      	bne.n	800373e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003726:	4b85      	ldr	r3, [pc, #532]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d05b      	beq.n	80037ea <HAL_RCC_OscConfig+0x11e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d157      	bne.n	80037ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e216      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x8a>
 8003748:	4b7c      	ldr	r3, [pc, #496]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a7b      	ldr	r2, [pc, #492]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800374e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e01d      	b.n	8003792 <HAL_RCC_OscConfig+0xc6>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800375e:	d10c      	bne.n	800377a <HAL_RCC_OscConfig+0xae>
 8003760:	4b76      	ldr	r3, [pc, #472]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a75      	ldr	r2, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a72      	ldr	r2, [pc, #456]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	e00b      	b.n	8003792 <HAL_RCC_OscConfig+0xc6>
 800377a:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6f      	ldr	r2, [pc, #444]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b6d      	ldr	r3, [pc, #436]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6c      	ldr	r2, [pc, #432]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800378c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d013      	beq.n	80037c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fd f9d5 	bl	8000b48 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a2:	f7fd f9d1 	bl	8000b48 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b64      	cmp	r3, #100	; 0x64
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1db      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b4:	4b61      	ldr	r3, [pc, #388]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0xd6>
 80037c0:	e014      	b.n	80037ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fd f9c1 	bl	8000b48 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ca:	f7fd f9bd 	bl	8000b48 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b64      	cmp	r3, #100	; 0x64
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1c7      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037dc:	4b57      	ldr	r3, [pc, #348]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCC_OscConfig+0xfe>
 80037e8:	e000      	b.n	80037ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d06f      	beq.n	80038d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037f8:	4b50      	ldr	r3, [pc, #320]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b00      	cmp	r3, #0
 8003802:	d017      	beq.n	8003834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003804:	4b4d      	ldr	r3, [pc, #308]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800380c:	2b08      	cmp	r3, #8
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003810:	4b4a      	ldr	r3, [pc, #296]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381c:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d11c      	bne.n	8003862 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003828:	4b44      	ldr	r3, [pc, #272]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d116      	bne.n	8003862 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003834:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x180>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e18f      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4938      	ldr	r1, [pc, #224]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003860:	e03a      	b.n	80038d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386a:	4b35      	ldr	r3, [pc, #212]	; (8003940 <HAL_RCC_OscConfig+0x274>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd f96a 	bl	8000b48 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003878:	f7fd f966 	bl	8000b48 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e170      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b2c      	ldr	r3, [pc, #176]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4925      	ldr	r1, [pc, #148]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
 80038aa:	e015      	b.n	80038d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_OscConfig+0x274>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd f949 	bl	8000b48 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fd f945 	bl	8000b48 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e14f      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038cc:	4b1b      	ldr	r3, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d037      	beq.n	8003954 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d016      	beq.n	800391a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ec:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x278>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd f929 	bl	8000b48 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fd f925 	bl	8000b48 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e12f      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_OscConfig+0x270>)
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x22e>
 8003918:	e01c      	b.n	8003954 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_RCC_OscConfig+0x278>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fd f912 	bl	8000b48 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003926:	e00f      	b.n	8003948 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fd f90e 	bl	8000b48 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d908      	bls.n	8003948 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e118      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	42470000 	.word	0x42470000
 8003944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	4b8a      	ldr	r3, [pc, #552]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e9      	bne.n	8003928 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8097 	beq.w	8003a90 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003966:	4b83      	ldr	r3, [pc, #524]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b7f      	ldr	r3, [pc, #508]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a7e      	ldr	r2, [pc, #504]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b7c      	ldr	r3, [pc, #496]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a75      	ldr	r2, [pc, #468]	; (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fd f8cd 	bl	8000b48 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fd f8c9 	bl	8000b48 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0d3      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x31a>
 80039d8:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a65      	ldr	r2, [pc, #404]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	e01c      	b.n	8003a20 <HAL_RCC_OscConfig+0x354>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x33c>
 80039ee:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a60      	ldr	r2, [pc, #384]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
 80039fa:	4b5e      	ldr	r3, [pc, #376]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a5d      	ldr	r2, [pc, #372]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0x354>
 8003a08:	4b5a      	ldr	r3, [pc, #360]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	4a59      	ldr	r2, [pc, #356]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	; 0x70
 8003a14:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a56      	ldr	r2, [pc, #344]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d015      	beq.n	8003a54 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fd f88e 	bl	8000b48 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fd f88a 	bl	8000b48 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e092      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a46:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ee      	beq.n	8003a30 <HAL_RCC_OscConfig+0x364>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fd f878 	bl	8000b48 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fd f874 	bl	8000b48 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e07c      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a72:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ee      	bne.n	8003a5c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a84:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d068      	beq.n	8003b6a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d060      	beq.n	8003b66 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d145      	bne.n	8003b38 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fd f849 	bl	8000b48 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fd f845 	bl	8000b48 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e04f      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	019b      	lsls	r3, r3, #6
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	071b      	lsls	r3, r3, #28
 8003b04:	491b      	ldr	r1, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd f81a 	bl	8000b48 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd f816 	bl	8000b48 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e020      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x44c>
 8003b36:	e018      	b.n	8003b6a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fd f803 	bl	8000b48 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fc ffff 	bl	8000b48 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e009      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_OscConfig+0x4a8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x47a>
 8003b64:	e001      	b.n	8003b6a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42470060 	.word	0x42470060

08003b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e01d      	b.n	8003bce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f815 	bl	8003bd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 f968 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d007      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d122      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d11b      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f06f 0202 	mvn.w	r2, #2
 8003c5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f8ee 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003c7a:	e005      	b.n	8003c88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8e0 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8f1 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d122      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d11b      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f06f 0204 	mvn.w	r2, #4
 8003cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f8c4 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003cce:	e005      	b.n	8003cdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f8b6 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8c7 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d122      	bne.n	8003d36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11b      	bne.n	8003d36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0208 	mvn.w	r2, #8
 8003d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f89a 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003d22:	e005      	b.n	8003d30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f88c 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f89d 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d122      	bne.n	8003d8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d11b      	bne.n	8003d8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f06f 0210 	mvn.w	r2, #16
 8003d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2208      	movs	r2, #8
 8003d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f870 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003d76:	e005      	b.n	8003d84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f862 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f873 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d10e      	bne.n	8003db6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d107      	bne.n	8003db6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f06f 0201 	mvn.w	r2, #1
 8003dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fc fd0f 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d10e      	bne.n	8003de2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d107      	bne.n	8003de2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f903 	bl	8003fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d10e      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d107      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f838 	bl	8003e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d10e      	bne.n	8003e3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d107      	bne.n	8003e3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f06f 0220 	mvn.w	r2, #32
 8003e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8cd 	bl	8003fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d00f      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3d      	ldr	r2, [pc, #244]	; (8003fac <TIM_Base_SetConfig+0x118>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3c      	ldr	r2, [pc, #240]	; (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <TIM_Base_SetConfig+0x120>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3a      	ldr	r2, [pc, #232]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d027      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <TIM_Base_SetConfig+0x118>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d023      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2b      	ldr	r2, [pc, #172]	; (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01f      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <TIM_Base_SetConfig+0x120>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d017      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <TIM_Base_SetConfig+0x128>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00f      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <TIM_Base_SetConfig+0x130>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <TIM_Base_SetConfig+0x134>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a24      	ldr	r2, [pc, #144]	; (8003fcc <TIM_Base_SetConfig+0x138>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a23      	ldr	r2, [pc, #140]	; (8003fd0 <TIM_Base_SetConfig+0x13c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d108      	bne.n	8003f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0xf8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d103      	bne.n	8003f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	615a      	str	r2, [r3, #20]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800
 8003fb4:	40000c00 	.word	0x40000c00
 8003fb8:	40010400 	.word	0x40010400
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800
 8003fc8:	40001800 	.word	0x40001800
 8003fcc:	40001c00 	.word	0x40001c00
 8003fd0:	40002000 	.word	0x40002000

08003fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e03f      	b.n	800408e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc fc18 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f829 	bl	8004098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040da:	f023 030c 	bic.w	r3, r3, #12
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	68f9      	ldr	r1, [r7, #12]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004106:	f040 818b 	bne.w	8004420 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4ac1      	ldr	r2, [pc, #772]	; (8004414 <UART_SetConfig+0x37c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d005      	beq.n	8004120 <UART_SetConfig+0x88>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4abf      	ldr	r2, [pc, #764]	; (8004418 <UART_SetConfig+0x380>)
 800411a:	4293      	cmp	r3, r2
 800411c:	f040 80bd 	bne.w	800429a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fe fdc4 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8004124:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	461d      	mov	r5, r3
 800412a:	f04f 0600 	mov.w	r6, #0
 800412e:	46a8      	mov	r8, r5
 8004130:	46b1      	mov	r9, r6
 8004132:	eb18 0308 	adds.w	r3, r8, r8
 8004136:	eb49 0409 	adc.w	r4, r9, r9
 800413a:	4698      	mov	r8, r3
 800413c:	46a1      	mov	r9, r4
 800413e:	eb18 0805 	adds.w	r8, r8, r5
 8004142:	eb49 0906 	adc.w	r9, r9, r6
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004152:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004156:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800415a:	4688      	mov	r8, r1
 800415c:	4691      	mov	r9, r2
 800415e:	eb18 0005 	adds.w	r0, r8, r5
 8004162:	eb49 0106 	adc.w	r1, r9, r6
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	461d      	mov	r5, r3
 800416c:	f04f 0600 	mov.w	r6, #0
 8004170:	196b      	adds	r3, r5, r5
 8004172:	eb46 0406 	adc.w	r4, r6, r6
 8004176:	461a      	mov	r2, r3
 8004178:	4623      	mov	r3, r4
 800417a:	f7fc f849 	bl	8000210 <__aeabi_uldivmod>
 800417e:	4603      	mov	r3, r0
 8004180:	460c      	mov	r4, r1
 8004182:	461a      	mov	r2, r3
 8004184:	4ba5      	ldr	r3, [pc, #660]	; (800441c <UART_SetConfig+0x384>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	461d      	mov	r5, r3
 8004194:	f04f 0600 	mov.w	r6, #0
 8004198:	46a9      	mov	r9, r5
 800419a:	46b2      	mov	sl, r6
 800419c:	eb19 0309 	adds.w	r3, r9, r9
 80041a0:	eb4a 040a 	adc.w	r4, sl, sl
 80041a4:	4699      	mov	r9, r3
 80041a6:	46a2      	mov	sl, r4
 80041a8:	eb19 0905 	adds.w	r9, r9, r5
 80041ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c4:	4689      	mov	r9, r1
 80041c6:	4692      	mov	sl, r2
 80041c8:	eb19 0005 	adds.w	r0, r9, r5
 80041cc:	eb4a 0106 	adc.w	r1, sl, r6
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	461d      	mov	r5, r3
 80041d6:	f04f 0600 	mov.w	r6, #0
 80041da:	196b      	adds	r3, r5, r5
 80041dc:	eb46 0406 	adc.w	r4, r6, r6
 80041e0:	461a      	mov	r2, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	f7fc f814 	bl	8000210 <__aeabi_uldivmod>
 80041e8:	4603      	mov	r3, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b8b      	ldr	r3, [pc, #556]	; (800441c <UART_SetConfig+0x384>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	; 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a86      	ldr	r2, [pc, #536]	; (800441c <UART_SetConfig+0x384>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004210:	4498      	add	r8, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	461d      	mov	r5, r3
 8004216:	f04f 0600 	mov.w	r6, #0
 800421a:	46a9      	mov	r9, r5
 800421c:	46b2      	mov	sl, r6
 800421e:	eb19 0309 	adds.w	r3, r9, r9
 8004222:	eb4a 040a 	adc.w	r4, sl, sl
 8004226:	4699      	mov	r9, r3
 8004228:	46a2      	mov	sl, r4
 800422a:	eb19 0905 	adds.w	r9, r9, r5
 800422e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004246:	4689      	mov	r9, r1
 8004248:	4692      	mov	sl, r2
 800424a:	eb19 0005 	adds.w	r0, r9, r5
 800424e:	eb4a 0106 	adc.w	r1, sl, r6
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	461d      	mov	r5, r3
 8004258:	f04f 0600 	mov.w	r6, #0
 800425c:	196b      	adds	r3, r5, r5
 800425e:	eb46 0406 	adc.w	r4, r6, r6
 8004262:	461a      	mov	r2, r3
 8004264:	4623      	mov	r3, r4
 8004266:	f7fb ffd3 	bl	8000210 <__aeabi_uldivmod>
 800426a:	4603      	mov	r3, r0
 800426c:	460c      	mov	r4, r1
 800426e:	461a      	mov	r2, r3
 8004270:	4b6a      	ldr	r3, [pc, #424]	; (800441c <UART_SetConfig+0x384>)
 8004272:	fba3 1302 	umull	r1, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	2164      	movs	r1, #100	; 0x64
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	3332      	adds	r3, #50	; 0x32
 8004284:	4a65      	ldr	r2, [pc, #404]	; (800441c <UART_SetConfig+0x384>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	f003 0207 	and.w	r2, r3, #7
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4442      	add	r2, r8
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	e26f      	b.n	800477a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800429a:	f7fe fcf3 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 800429e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	461d      	mov	r5, r3
 80042a4:	f04f 0600 	mov.w	r6, #0
 80042a8:	46a8      	mov	r8, r5
 80042aa:	46b1      	mov	r9, r6
 80042ac:	eb18 0308 	adds.w	r3, r8, r8
 80042b0:	eb49 0409 	adc.w	r4, r9, r9
 80042b4:	4698      	mov	r8, r3
 80042b6:	46a1      	mov	r9, r4
 80042b8:	eb18 0805 	adds.w	r8, r8, r5
 80042bc:	eb49 0906 	adc.w	r9, r9, r6
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042d4:	4688      	mov	r8, r1
 80042d6:	4691      	mov	r9, r2
 80042d8:	eb18 0005 	adds.w	r0, r8, r5
 80042dc:	eb49 0106 	adc.w	r1, r9, r6
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	461d      	mov	r5, r3
 80042e6:	f04f 0600 	mov.w	r6, #0
 80042ea:	196b      	adds	r3, r5, r5
 80042ec:	eb46 0406 	adc.w	r4, r6, r6
 80042f0:	461a      	mov	r2, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	f7fb ff8c 	bl	8000210 <__aeabi_uldivmod>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	461a      	mov	r2, r3
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <UART_SetConfig+0x384>)
 8004300:	fba3 2302 	umull	r2, r3, r3, r2
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	461d      	mov	r5, r3
 800430e:	f04f 0600 	mov.w	r6, #0
 8004312:	46a9      	mov	r9, r5
 8004314:	46b2      	mov	sl, r6
 8004316:	eb19 0309 	adds.w	r3, r9, r9
 800431a:	eb4a 040a 	adc.w	r4, sl, sl
 800431e:	4699      	mov	r9, r3
 8004320:	46a2      	mov	sl, r4
 8004322:	eb19 0905 	adds.w	r9, r9, r5
 8004326:	eb4a 0a06 	adc.w	sl, sl, r6
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800433a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800433e:	4689      	mov	r9, r1
 8004340:	4692      	mov	sl, r2
 8004342:	eb19 0005 	adds.w	r0, r9, r5
 8004346:	eb4a 0106 	adc.w	r1, sl, r6
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	461d      	mov	r5, r3
 8004350:	f04f 0600 	mov.w	r6, #0
 8004354:	196b      	adds	r3, r5, r5
 8004356:	eb46 0406 	adc.w	r4, r6, r6
 800435a:	461a      	mov	r2, r3
 800435c:	4623      	mov	r3, r4
 800435e:	f7fb ff57 	bl	8000210 <__aeabi_uldivmod>
 8004362:	4603      	mov	r3, r0
 8004364:	460c      	mov	r4, r1
 8004366:	461a      	mov	r2, r3
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <UART_SetConfig+0x384>)
 800436a:	fba3 1302 	umull	r1, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2164      	movs	r1, #100	; 0x64
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	3332      	adds	r3, #50	; 0x32
 800437c:	4a27      	ldr	r2, [pc, #156]	; (800441c <UART_SetConfig+0x384>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800438a:	4498      	add	r8, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	461d      	mov	r5, r3
 8004390:	f04f 0600 	mov.w	r6, #0
 8004394:	46a9      	mov	r9, r5
 8004396:	46b2      	mov	sl, r6
 8004398:	eb19 0309 	adds.w	r3, r9, r9
 800439c:	eb4a 040a 	adc.w	r4, sl, sl
 80043a0:	4699      	mov	r9, r3
 80043a2:	46a2      	mov	sl, r4
 80043a4:	eb19 0905 	adds.w	r9, r9, r5
 80043a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c0:	4689      	mov	r9, r1
 80043c2:	4692      	mov	sl, r2
 80043c4:	eb19 0005 	adds.w	r0, r9, r5
 80043c8:	eb4a 0106 	adc.w	r1, sl, r6
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	461d      	mov	r5, r3
 80043d2:	f04f 0600 	mov.w	r6, #0
 80043d6:	196b      	adds	r3, r5, r5
 80043d8:	eb46 0406 	adc.w	r4, r6, r6
 80043dc:	461a      	mov	r2, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	f7fb ff16 	bl	8000210 <__aeabi_uldivmod>
 80043e4:	4603      	mov	r3, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <UART_SetConfig+0x384>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a07      	ldr	r2, [pc, #28]	; (800441c <UART_SetConfig+0x384>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 0207 	and.w	r2, r3, #7
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4442      	add	r2, r8
 8004410:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004412:	e1b2      	b.n	800477a <UART_SetConfig+0x6e2>
 8004414:	40011000 	.word	0x40011000
 8004418:	40011400 	.word	0x40011400
 800441c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4ad7      	ldr	r2, [pc, #860]	; (8004784 <UART_SetConfig+0x6ec>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d005      	beq.n	8004436 <UART_SetConfig+0x39e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4ad6      	ldr	r2, [pc, #856]	; (8004788 <UART_SetConfig+0x6f0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	f040 80d1 	bne.w	80045d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004436:	f7fe fc39 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 800443a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	469a      	mov	sl, r3
 8004440:	f04f 0b00 	mov.w	fp, #0
 8004444:	46d0      	mov	r8, sl
 8004446:	46d9      	mov	r9, fp
 8004448:	eb18 0308 	adds.w	r3, r8, r8
 800444c:	eb49 0409 	adc.w	r4, r9, r9
 8004450:	4698      	mov	r8, r3
 8004452:	46a1      	mov	r9, r4
 8004454:	eb18 080a 	adds.w	r8, r8, sl
 8004458:	eb49 090b 	adc.w	r9, r9, fp
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004468:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800446c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004470:	4688      	mov	r8, r1
 8004472:	4691      	mov	r9, r2
 8004474:	eb1a 0508 	adds.w	r5, sl, r8
 8004478:	eb4b 0609 	adc.w	r6, fp, r9
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4619      	mov	r1, r3
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	f04f 0400 	mov.w	r4, #0
 800448e:	0094      	lsls	r4, r2, #2
 8004490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004494:	008b      	lsls	r3, r1, #2
 8004496:	461a      	mov	r2, r3
 8004498:	4623      	mov	r3, r4
 800449a:	4628      	mov	r0, r5
 800449c:	4631      	mov	r1, r6
 800449e:	f7fb feb7 	bl	8000210 <__aeabi_uldivmod>
 80044a2:	4603      	mov	r3, r0
 80044a4:	460c      	mov	r4, r1
 80044a6:	461a      	mov	r2, r3
 80044a8:	4bb8      	ldr	r3, [pc, #736]	; (800478c <UART_SetConfig+0x6f4>)
 80044aa:	fba3 2302 	umull	r2, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	469b      	mov	fp, r3
 80044b8:	f04f 0c00 	mov.w	ip, #0
 80044bc:	46d9      	mov	r9, fp
 80044be:	46e2      	mov	sl, ip
 80044c0:	eb19 0309 	adds.w	r3, r9, r9
 80044c4:	eb4a 040a 	adc.w	r4, sl, sl
 80044c8:	4699      	mov	r9, r3
 80044ca:	46a2      	mov	sl, r4
 80044cc:	eb19 090b 	adds.w	r9, r9, fp
 80044d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e8:	4689      	mov	r9, r1
 80044ea:	4692      	mov	sl, r2
 80044ec:	eb1b 0509 	adds.w	r5, fp, r9
 80044f0:	eb4c 060a 	adc.w	r6, ip, sl
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	0094      	lsls	r4, r2, #2
 8004508:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800450c:	008b      	lsls	r3, r1, #2
 800450e:	461a      	mov	r2, r3
 8004510:	4623      	mov	r3, r4
 8004512:	4628      	mov	r0, r5
 8004514:	4631      	mov	r1, r6
 8004516:	f7fb fe7b 	bl	8000210 <__aeabi_uldivmod>
 800451a:	4603      	mov	r3, r0
 800451c:	460c      	mov	r4, r1
 800451e:	461a      	mov	r2, r3
 8004520:	4b9a      	ldr	r3, [pc, #616]	; (800478c <UART_SetConfig+0x6f4>)
 8004522:	fba3 1302 	umull	r1, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2164      	movs	r1, #100	; 0x64
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	3332      	adds	r3, #50	; 0x32
 8004534:	4a95      	ldr	r2, [pc, #596]	; (800478c <UART_SetConfig+0x6f4>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004540:	4498      	add	r8, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	469b      	mov	fp, r3
 8004546:	f04f 0c00 	mov.w	ip, #0
 800454a:	46d9      	mov	r9, fp
 800454c:	46e2      	mov	sl, ip
 800454e:	eb19 0309 	adds.w	r3, r9, r9
 8004552:	eb4a 040a 	adc.w	r4, sl, sl
 8004556:	4699      	mov	r9, r3
 8004558:	46a2      	mov	sl, r4
 800455a:	eb19 090b 	adds.w	r9, r9, fp
 800455e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800456e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004572:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004576:	4689      	mov	r9, r1
 8004578:	4692      	mov	sl, r2
 800457a:	eb1b 0509 	adds.w	r5, fp, r9
 800457e:	eb4c 060a 	adc.w	r6, ip, sl
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4619      	mov	r1, r3
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	f04f 0400 	mov.w	r4, #0
 8004594:	0094      	lsls	r4, r2, #2
 8004596:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800459a:	008b      	lsls	r3, r1, #2
 800459c:	461a      	mov	r2, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	4628      	mov	r0, r5
 80045a2:	4631      	mov	r1, r6
 80045a4:	f7fb fe34 	bl	8000210 <__aeabi_uldivmod>
 80045a8:	4603      	mov	r3, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b77      	ldr	r3, [pc, #476]	; (800478c <UART_SetConfig+0x6f4>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	2164      	movs	r1, #100	; 0x64
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	3332      	adds	r3, #50	; 0x32
 80045c2:	4a72      	ldr	r2, [pc, #456]	; (800478c <UART_SetConfig+0x6f4>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	f003 020f 	and.w	r2, r3, #15
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4442      	add	r2, r8
 80045d4:	609a      	str	r2, [r3, #8]
 80045d6:	e0d0      	b.n	800477a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7fe fb54 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80045dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	469a      	mov	sl, r3
 80045e2:	f04f 0b00 	mov.w	fp, #0
 80045e6:	46d0      	mov	r8, sl
 80045e8:	46d9      	mov	r9, fp
 80045ea:	eb18 0308 	adds.w	r3, r8, r8
 80045ee:	eb49 0409 	adc.w	r4, r9, r9
 80045f2:	4698      	mov	r8, r3
 80045f4:	46a1      	mov	r9, r4
 80045f6:	eb18 080a 	adds.w	r8, r8, sl
 80045fa:	eb49 090b 	adc.w	r9, r9, fp
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800460a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800460e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004612:	4688      	mov	r8, r1
 8004614:	4691      	mov	r9, r2
 8004616:	eb1a 0508 	adds.w	r5, sl, r8
 800461a:	eb4b 0609 	adc.w	r6, fp, r9
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4619      	mov	r1, r3
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	0094      	lsls	r4, r2, #2
 8004632:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004636:	008b      	lsls	r3, r1, #2
 8004638:	461a      	mov	r2, r3
 800463a:	4623      	mov	r3, r4
 800463c:	4628      	mov	r0, r5
 800463e:	4631      	mov	r1, r6
 8004640:	f7fb fde6 	bl	8000210 <__aeabi_uldivmod>
 8004644:	4603      	mov	r3, r0
 8004646:	460c      	mov	r4, r1
 8004648:	461a      	mov	r2, r3
 800464a:	4b50      	ldr	r3, [pc, #320]	; (800478c <UART_SetConfig+0x6f4>)
 800464c:	fba3 2302 	umull	r2, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	469b      	mov	fp, r3
 800465a:	f04f 0c00 	mov.w	ip, #0
 800465e:	46d9      	mov	r9, fp
 8004660:	46e2      	mov	sl, ip
 8004662:	eb19 0309 	adds.w	r3, r9, r9
 8004666:	eb4a 040a 	adc.w	r4, sl, sl
 800466a:	4699      	mov	r9, r3
 800466c:	46a2      	mov	sl, r4
 800466e:	eb19 090b 	adds.w	r9, r9, fp
 8004672:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004682:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004686:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800468a:	4689      	mov	r9, r1
 800468c:	4692      	mov	sl, r2
 800468e:	eb1b 0509 	adds.w	r5, fp, r9
 8004692:	eb4c 060a 	adc.w	r6, ip, sl
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4619      	mov	r1, r3
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	f04f 0400 	mov.w	r4, #0
 80046a8:	0094      	lsls	r4, r2, #2
 80046aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046ae:	008b      	lsls	r3, r1, #2
 80046b0:	461a      	mov	r2, r3
 80046b2:	4623      	mov	r3, r4
 80046b4:	4628      	mov	r0, r5
 80046b6:	4631      	mov	r1, r6
 80046b8:	f7fb fdaa 	bl	8000210 <__aeabi_uldivmod>
 80046bc:	4603      	mov	r3, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b32      	ldr	r3, [pc, #200]	; (800478c <UART_SetConfig+0x6f4>)
 80046c4:	fba3 1302 	umull	r1, r3, r3, r2
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	2164      	movs	r1, #100	; 0x64
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	3332      	adds	r3, #50	; 0x32
 80046d6:	4a2d      	ldr	r2, [pc, #180]	; (800478c <UART_SetConfig+0x6f4>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e2:	4498      	add	r8, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	469b      	mov	fp, r3
 80046e8:	f04f 0c00 	mov.w	ip, #0
 80046ec:	46d9      	mov	r9, fp
 80046ee:	46e2      	mov	sl, ip
 80046f0:	eb19 0309 	adds.w	r3, r9, r9
 80046f4:	eb4a 040a 	adc.w	r4, sl, sl
 80046f8:	4699      	mov	r9, r3
 80046fa:	46a2      	mov	sl, r4
 80046fc:	eb19 090b 	adds.w	r9, r9, fp
 8004700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004704:	f04f 0100 	mov.w	r1, #0
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004718:	4689      	mov	r9, r1
 800471a:	4692      	mov	sl, r2
 800471c:	eb1b 0509 	adds.w	r5, fp, r9
 8004720:	eb4c 060a 	adc.w	r6, ip, sl
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4619      	mov	r1, r3
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	f04f 0400 	mov.w	r4, #0
 8004736:	0094      	lsls	r4, r2, #2
 8004738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800473c:	008b      	lsls	r3, r1, #2
 800473e:	461a      	mov	r2, r3
 8004740:	4623      	mov	r3, r4
 8004742:	4628      	mov	r0, r5
 8004744:	4631      	mov	r1, r6
 8004746:	f7fb fd63 	bl	8000210 <__aeabi_uldivmod>
 800474a:	4603      	mov	r3, r0
 800474c:	460c      	mov	r4, r1
 800474e:	461a      	mov	r2, r3
 8004750:	4b0e      	ldr	r3, [pc, #56]	; (800478c <UART_SetConfig+0x6f4>)
 8004752:	fba3 1302 	umull	r1, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2164      	movs	r1, #100	; 0x64
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	3332      	adds	r3, #50	; 0x32
 8004764:	4a09      	ldr	r2, [pc, #36]	; (800478c <UART_SetConfig+0x6f4>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4442      	add	r2, r8
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	e7ff      	b.n	800477a <UART_SetConfig+0x6e2>
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004784:	40011000 	.word	0x40011000
 8004788:	40011400 	.word	0x40011400
 800478c:	51eb851f 	.word	0x51eb851f

08004790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004790:	b084      	sub	sp, #16
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	f107 001c 	add.w	r0, r7, #28
 800479e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d122      	bne.n	80047ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f94a 	bl	8004a7c <USB_CoreReset>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e01a      	b.n	8004824 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f93e 	bl	8004a7c <USB_CoreReset>
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
 8004816:	e005      	b.n	8004824 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10b      	bne.n	8004842 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f043 0206 	orr.w	r2, r3, #6
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800484e:	b004      	add	sp, #16
 8004850:	4770      	bx	lr

08004852 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f043 0201 	orr.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 0201 	bic.w	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d106      	bne.n	80048c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
 80048c0:	e00b      	b.n	80048da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	e001      	b.n	80048da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e003      	b.n	80048e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80048da:	2032      	movs	r0, #50	; 0x32
 80048dc:	f7fc f940 	bl	8000b60 <HAL_Delay>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3301      	adds	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <USB_FlushTxFifo+0x48>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e006      	b.n	8004926 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b20      	cmp	r3, #32
 8004922:	d0f0      	beq.n	8004906 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	00030d40 	.word	0x00030d40

08004938 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2210      	movs	r2, #16
 8004948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <USB_FlushRxFifo+0x40>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e006      	b.n	800496a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d0f0      	beq.n	800494a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	00030d40 	.word	0x00030d40

0800497c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4611      	mov	r1, r2
 8004988:	461a      	mov	r2, r3
 800498a:	460b      	mov	r3, r1
 800498c:	71fb      	strb	r3, [r7, #7]
 800498e:	4613      	mov	r3, r2
 8004990:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800499a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d11a      	bne.n	80049d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049a2:	88bb      	ldrh	r3, [r7, #4]
 80049a4:	3303      	adds	r3, #3
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e00f      	b.n	80049d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	031a      	lsls	r2, r3, #12
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	461a      	mov	r2, r3
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	3304      	adds	r3, #4
 80049c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	3301      	adds	r3, #1
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d3eb      	bcc.n	80049b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3724      	adds	r7, #36	; 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b089      	sub	sp, #36	; 0x24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	4613      	mov	r3, r2
 80049f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	3303      	adds	r3, #3
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e00b      	b.n	8004a22 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3ef      	bcc.n	8004a0a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3724      	adds	r7, #36	; 0x24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a50:	68fb      	ldr	r3, [r7, #12]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <USB_CoreReset+0x64>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e01b      	b.n	8004ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	daf2      	bge.n	8004a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f043 0201 	orr.w	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <USB_CoreReset+0x64>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e006      	b.n	8004ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d0f0      	beq.n	8004ab2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	00030d40 	.word	0x00030d40

08004ae4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	f107 001c 	add.w	r0, r7, #28
 8004af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b00:	461a      	mov	r2, r3
 8004b02:	2300      	movs	r3, #0
 8004b04:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10a      	bne.n	8004b3a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b32:	f043 0304 	orr.w	r3, r3, #4
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e014      	b.n	8004b64 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e009      	b.n	8004b64 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b5e:	f023 0304 	bic.w	r3, r3, #4
 8004b62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004b64:	2110      	movs	r1, #16
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fec0 	bl	80048ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fee3 	bl	8004938 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e015      	b.n	8004ba4 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b84:	461a      	mov	r2, r3
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d3e5      	bcc.n	8004b78 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004bac:	2101      	movs	r1, #1
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8ac 	bl	8004d0c <USB_DriveVbus>

  HAL_Delay(200U);
 8004bb4:	20c8      	movs	r0, #200	; 0xc8
 8004bb6:	f7fb ffd3 	bl	8000b60 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <USB_HostInit+0x14c>)
 8004be0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <USB_HostInit+0x150>)
 8004be6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004bea:	e009      	b.n	8004c00 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <USB_HostInit+0x154>)
 8004bf6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <USB_HostInit+0x158>)
 8004bfc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f043 0210 	orr.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <USB_HostInit+0x15c>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c2a:	b004      	add	sp, #16
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	01000200 	.word	0x01000200
 8004c34:	00e00300 	.word	0x00e00300
 8004c38:	00600080 	.word	0x00600080
 8004c3c:	004000e0 	.word	0x004000e0
 8004c40:	a3200008 	.word	0xa3200008

08004c44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d107      	bne.n	8004c96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c92:	6053      	str	r3, [r2, #4]
 8004c94:	e009      	b.n	8004caa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d106      	bne.n	8004caa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ca8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ce8:	2064      	movs	r0, #100	; 0x64
 8004cea:	f7fb ff39 	bl	8000b60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004cfc:	200a      	movs	r0, #10
 8004cfe:	f7fb ff2f 	bl	8000b60 <HAL_Delay>

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <USB_DriveVbus+0x44>
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d106      	bne.n	8004d50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d109      	bne.n	8004d70 <USB_DriveVbus+0x64>
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	0c5b      	lsrs	r3, r3, #17
 8004d9c:	f003 0303 	and.w	r3, r3, #3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	b29b      	uxth	r3, r3
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	70fb      	strb	r3, [r7, #3]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70bb      	strb	r3, [r7, #2]
 8004de6:	4613      	mov	r3, r2
 8004de8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295
 8004e04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d87e      	bhi.n	8004f0c <USB_HC_Init+0x13c>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <USB_HC_Init+0x44>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004ecf 	.word	0x08004ecf
 8004e1c:	08004e25 	.word	0x08004e25
 8004e20:	08004e91 	.word	0x08004e91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	461a      	mov	r2, r3
 8004e32:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da10      	bge.n	8004e62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004e60:	e057      	b.n	8004f12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d051      	beq.n	8004f12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e8c:	60d3      	str	r3, [r2, #12]
      break;
 8004e8e:	e040      	b.n	8004f12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ea2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ea4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da34      	bge.n	8004f16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	0151      	lsls	r1, r2, #5
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	440a      	add	r2, r1
 8004ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004ecc:	e023      	b.n	8004f16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eda:	461a      	mov	r2, r3
 8004edc:	f240 2325 	movw	r3, #549	; 0x225
 8004ee0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ee2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da17      	bge.n	8004f1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f0a:	e006      	b.n	8004f1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f10:	e004      	b.n	8004f1c <USB_HC_Init+0x14c>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <USB_HC_Init+0x14c>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <USB_HC_Init+0x14c>
      break;
 8004f1a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f36:	4313      	orrs	r3, r2
 8004f38:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da03      	bge.n	8004f56 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	e001      	b.n	8004f5a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004f5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d103      	bne.n	8004f6a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e001      	b.n	8004f6e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f6e:	787b      	ldrb	r3, [r7, #1]
 8004f70:	059b      	lsls	r3, r3, #22
 8004f72:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f76:	78bb      	ldrb	r3, [r7, #2]
 8004f78:	02db      	lsls	r3, r3, #11
 8004f7a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f7e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f84:	049b      	lsls	r3, r3, #18
 8004f86:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f8a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f92:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	0159      	lsls	r1, r3, #5
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004faa:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004fac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d10f      	bne.n	8004fd4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fd2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop

08004fe4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	; 0x30
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005000:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d028      	beq.n	8005060 <USB_HC_StartXfer+0x7c>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d124      	bne.n	8005060 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <USB_HC_StartXfer+0x50>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	795b      	ldrb	r3, [r3, #5]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d107      	bne.n	8005034 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	785b      	ldrb	r3, [r3, #1]
 8005028:	4619      	mov	r1, r3
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fa30 	bl	8005490 <USB_DoPing>
      return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e114      	b.n	800525e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d112      	bne.n	8005060 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	440a      	add	r2, r1
 8005050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005054:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005058:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2200      	movs	r2, #0
 800505e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d018      	beq.n	800509a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	8912      	ldrh	r2, [r2, #8]
 8005070:	4413      	add	r3, r2
 8005072:	3b01      	subs	r3, #1
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	8912      	ldrh	r2, [r2, #8]
 8005078:	fbb3 f3f2 	udiv	r3, r3, r2
 800507c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800507e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005080:	8b7b      	ldrh	r3, [r7, #26]
 8005082:	429a      	cmp	r2, r3
 8005084:	d90b      	bls.n	800509e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005086:	8b7b      	ldrh	r3, [r7, #26]
 8005088:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800508a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	8912      	ldrh	r2, [r2, #8]
 8005090:	fb02 f203 	mul.w	r2, r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	611a      	str	r2, [r3, #16]
 8005098:	e001      	b.n	800509e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800509a:	2301      	movs	r3, #1
 800509c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	78db      	ldrb	r3, [r3, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80050a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	8912      	ldrh	r2, [r2, #8]
 80050ac:	fb02 f203 	mul.w	r2, r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050be:	04d9      	lsls	r1, r3, #19
 80050c0:	4b69      	ldr	r3, [pc, #420]	; (8005268 <USB_HC_StartXfer+0x284>)
 80050c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80050c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	7a9b      	ldrb	r3, [r3, #10]
 80050ca:	075b      	lsls	r3, r3, #29
 80050cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80050d0:	69f9      	ldr	r1, [r7, #28]
 80050d2:	0148      	lsls	r0, r1, #5
 80050d4:	6a39      	ldr	r1, [r7, #32]
 80050d6:	4401      	add	r1, r0
 80050d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80050de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	68d9      	ldr	r1, [r3, #12]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f6:	460a      	mov	r2, r1
 80050f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	bf0c      	ite	eq
 800510a:	2301      	moveq	r3, #1
 800510c:	2300      	movne	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	440a      	add	r2, r1
 8005128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800512c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005130:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	7e7b      	ldrb	r3, [r7, #25]
 8005142:	075b      	lsls	r3, r3, #29
 8005144:	69f9      	ldr	r1, [r7, #28]
 8005146:	0148      	lsls	r0, r1, #5
 8005148:	6a39      	ldr	r1, [r7, #32]
 800514a:	4401      	add	r1, r0
 800514c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a42      	ldr	r2, [pc, #264]	; (800526c <USB_HC_StartXfer+0x288>)
 8005164:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005166:	4b41      	ldr	r3, [pc, #260]	; (800526c <USB_HC_StartXfer+0x288>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800516e:	4a3f      	ldr	r2, [pc, #252]	; (800526c <USB_HC_StartXfer+0x288>)
 8005170:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	78db      	ldrb	r3, [r3, #3]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800517a:	4b3c      	ldr	r3, [pc, #240]	; (800526c <USB_HC_StartXfer+0x288>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005182:	4a3a      	ldr	r2, [pc, #232]	; (800526c <USB_HC_StartXfer+0x288>)
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e005      	b.n	8005194 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005188:	4b38      	ldr	r3, [pc, #224]	; (800526c <USB_HC_StartXfer+0x288>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005190:	4a36      	ldr	r2, [pc, #216]	; (800526c <USB_HC_StartXfer+0x288>)
 8005192:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005194:	4b35      	ldr	r3, [pc, #212]	; (800526c <USB_HC_StartXfer+0x288>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800519c:	4a33      	ldr	r2, [pc, #204]	; (800526c <USB_HC_StartXfer+0x288>)
 800519e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b2f      	ldr	r3, [pc, #188]	; (800526c <USB_HC_StartXfer+0x288>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e04f      	b.n	800525e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	78db      	ldrb	r3, [r3, #3]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d14a      	bne.n	800525c <USB_HC_StartXfer+0x278>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d046      	beq.n	800525c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	79db      	ldrb	r3, [r3, #7]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d830      	bhi.n	8005238 <USB_HC_StartXfer+0x254>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <USB_HC_StartXfer+0x1f8>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	08005211 	.word	0x08005211
 80051e4:	080051ed 	.word	0x080051ed
 80051e8:	08005211 	.word	0x08005211
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	3303      	adds	r3, #3
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80051f6:	8afa      	ldrh	r2, [r7, #22]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	429a      	cmp	r2, r3
 8005200:	d91c      	bls.n	800523c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	619a      	str	r2, [r3, #24]
        }
        break;
 800520e:	e015      	b.n	800523c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	3303      	adds	r3, #3
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800521a:	8afa      	ldrh	r2, [r7, #22]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	b29b      	uxth	r3, r3
 8005226:	429a      	cmp	r2, r3
 8005228:	d90a      	bls.n	8005240 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	619a      	str	r2, [r3, #24]
        }
        break;
 8005236:	e003      	b.n	8005240 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005238:	bf00      	nop
 800523a:	e002      	b.n	8005242 <USB_HC_StartXfer+0x25e>
        break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <USB_HC_StartXfer+0x25e>
        break;
 8005240:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	68d9      	ldr	r1, [r3, #12]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	785a      	ldrb	r2, [r3, #1]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	b298      	uxth	r0, r3
 8005250:	2300      	movs	r3, #0
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	4603      	mov	r3, r0
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff fb90 	bl	800497c <USB_WritePacket>
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3728      	adds	r7, #40	; 0x28
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	1ff80000 	.word	0x1ff80000
 800526c:	200000b4 	.word	0x200000b4

08005270 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	b29b      	uxth	r3, r3
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	0c9b      	lsrs	r3, r3, #18
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <USB_HC_Halt+0x3a>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d16c      	bne.n	80053a6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ea:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d143      	bne.n	8005380 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	440a      	add	r2, r1
 800530e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005316:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	440a      	add	r2, r1
 800532e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005336:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	440a      	add	r2, r1
 800534e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005352:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005356:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3301      	adds	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005364:	d81d      	bhi.n	80053a2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537c:	d0ec      	beq.n	8005358 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800537e:	e080      	b.n	8005482 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	440a      	add	r2, r1
 8005396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800539a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800539e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053a0:	e06f      	b.n	8005482 <USB_HC_Halt+0x1f0>
          break;
 80053a2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053a4:	e06d      	b.n	8005482 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d143      	bne.n	800545e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	440a      	add	r2, r1
 800540c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005414:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	440a      	add	r2, r1
 800542c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005430:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005434:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005442:	d81d      	bhi.n	8005480 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545a:	d0ec      	beq.n	8005436 <USB_HC_Halt+0x1a4>
 800545c:	e011      	b.n	8005482 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	440a      	add	r2, r1
 8005474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e000      	b.n	8005482 <USB_HC_Halt+0x1f0>
          break;
 8005480:	bf00      	nop
    }
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80054a4:	2301      	movs	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	04da      	lsls	r2, r3, #19
 80054ac:	4b15      	ldr	r3, [pc, #84]	; (8005504 <USB_DoPing+0x74>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	1ff80000 	.word	0x1ff80000

08005508 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff f9ab 	bl	8004874 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800551e:	2110      	movs	r1, #16
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff f9e3 	bl	80048ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff fa06 	bl	8004938 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	e01f      	b.n	8005572 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005548:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005550:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005558:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	461a      	mov	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	3301      	adds	r3, #1
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b0f      	cmp	r3, #15
 8005576:	d9dc      	bls.n	8005532 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	e034      	b.n	80055e8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005594:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800559c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	461a      	mov	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	3301      	adds	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055c4:	d80c      	bhi.n	80055e0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055dc:	d0ec      	beq.n	80055b8 <USB_StopHost+0xb0>
 80055de:	e000      	b.n	80055e2 <USB_StopHost+0xda>
        break;
 80055e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	3301      	adds	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b0f      	cmp	r3, #15
 80055ec:	d9c7      	bls.n	800557e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f4:	461a      	mov	r2, r3
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005602:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff f924 	bl	8004852 <USB_EnableGlobalInt>

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af04      	add	r7, sp, #16
 800561a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005622:	7919      	ldrb	r1, [r3, #4]
 8005624:	2350      	movs	r3, #80	; 0x50
 8005626:	2206      	movs	r2, #6
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 fa5d 	bl	8006ae8 <USBH_FindInterface>
 800562e:	4603      	mov	r3, r0
 8005630:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2bff      	cmp	r3, #255	; 0xff
 8005636:	d002      	beq.n	800563e <USBH_MSC_InterfaceInit+0x2a>
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d901      	bls.n	8005642 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800563e:	2302      	movs	r3, #2
 8005640:	e0ef      	b.n	8005822 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fa32 	bl	8006ab0 <USBH_SelectInterface>
 800564c:	4603      	mov	r3, r0
 800564e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005656:	2302      	movs	r3, #2
 8005658:	e0e3      	b.n	8005822 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005660:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005664:	f006 f994 	bl	800b990 <malloc>
 8005668:	4603      	mov	r3, r0
 800566a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800567c:	2302      	movs	r3, #2
 800567e:	e0d0      	b.n	8005822 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005684:	2100      	movs	r1, #0
 8005686:	68b8      	ldr	r0, [r7, #8]
 8005688:	f006 f99d 	bl	800b9c6 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	211a      	movs	r1, #26
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da16      	bge.n	80056d2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	211a      	movs	r1, #26
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	211a      	movs	r1, #26
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	815a      	strh	r2, [r3, #10]
 80056d0:	e015      	b.n	80056fe <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	211a      	movs	r1, #26
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056e2:	781a      	ldrb	r2, [r3, #0]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	211a      	movs	r1, #26
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	211a      	movs	r1, #26
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b25b      	sxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	da16      	bge.n	8005744 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	211a      	movs	r1, #26
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	211a      	movs	r1, #26
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800573c:	881a      	ldrh	r2, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	815a      	strh	r2, [r3, #10]
 8005742:	e015      	b.n	8005770 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	211a      	movs	r1, #26
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	211a      	movs	r1, #26
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	4413      	add	r3, r2
 8005766:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800576a:	881a      	ldrh	r2, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	799b      	ldrb	r3, [r3, #6]
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f002 fdde 	bl	800834a <USBH_AllocPipe>
 800578e:	4603      	mov	r3, r0
 8005790:	461a      	mov	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	79db      	ldrb	r3, [r3, #7]
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f002 fdd4 	bl	800834a <USBH_AllocPipe>
 80057a2:	4603      	mov	r3, r0
 80057a4:	461a      	mov	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fbda 	bl	8005f64 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	7959      	ldrb	r1, [r3, #5]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	7998      	ldrb	r0, [r3, #6]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	8912      	ldrh	r2, [r2, #8]
 80057c8:	9202      	str	r2, [sp, #8]
 80057ca:	2202      	movs	r2, #2
 80057cc:	9201      	str	r2, [sp, #4]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4623      	mov	r3, r4
 80057d2:	4602      	mov	r2, r0
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f002 fd89 	bl	80082ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	7919      	ldrb	r1, [r3, #4]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	79d8      	ldrb	r0, [r3, #7]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	8952      	ldrh	r2, [r2, #10]
 80057f2:	9202      	str	r2, [sp, #8]
 80057f4:	2202      	movs	r2, #2
 80057f6:	9201      	str	r2, [sp, #4]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	4623      	mov	r3, r4
 80057fc:	4602      	mov	r2, r0
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f002 fd74 	bl	80082ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	791b      	ldrb	r3, [r3, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f005 ffdb 	bl	800b7c8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	795b      	ldrb	r3, [r3, #5]
 8005816:	2200      	movs	r2, #0
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f005 ffd4 	bl	800b7c8 <USBH_LL_SetToggle>

  return USBH_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bd90      	pop	{r4, r7, pc}

0800582a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	795b      	ldrb	r3, [r3, #5]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	795b      	ldrb	r3, [r3, #5]
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f002 fd6d 	bl	800832a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	795b      	ldrb	r3, [r3, #5]
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f002 fd98 	bl	800838c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	791b      	ldrb	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00e      	beq.n	8005888 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	791b      	ldrb	r3, [r3, #4]
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f002 fd5a 	bl	800832a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	791b      	ldrb	r3, [r3, #4]
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f002 fd85 	bl	800838c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4618      	mov	r0, r3
 800589e:	f006 f87f 	bl	800b9a0 <free>
    phost->pActiveClass->pData = 0U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058a8:	2200      	movs	r2, #0
 80058aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	7b9b      	ldrb	r3, [r3, #14]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d004      	beq.n	80058de <USBH_MSC_ClassRequest+0x28>
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d03e      	beq.n	8005956 <USBH_MSC_ClassRequest+0xa0>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d000      	beq.n	80058de <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80058dc:	e04a      	b.n	8005974 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fb20 	bl	8005f28 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80058e8:	4603      	mov	r3, r0
 80058ea:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d104      	bne.n	80058fc <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d135      	bne.n	800596e <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d804      	bhi.n	8005914 <USBH_MSC_ClassRequest+0x5e>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	b2da      	uxtb	r2, r3
 8005912:	e000      	b.n	8005916 <USBH_MSC_ClassRequest+0x60>
 8005914:	2202      	movs	r2, #2
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800591a:	2300      	movs	r3, #0
 800591c:	73bb      	strb	r3, [r7, #14]
 800591e:	e014      	b.n	800594a <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	2134      	movs	r1, #52	; 0x34
 8005926:	fb01 f303 	mul.w	r3, r1, r3
 800592a:	4413      	add	r3, r2
 800592c:	3392      	adds	r3, #146	; 0x92
 800592e:	2202      	movs	r2, #2
 8005930:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	2134      	movs	r1, #52	; 0x34
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	4413      	add	r3, r2
 800593e:	33c1      	adds	r3, #193	; 0xc1
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	3301      	adds	r3, #1
 8005948:	73bb      	strb	r3, [r7, #14]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	7bba      	ldrb	r2, [r7, #14]
 8005950:	429a      	cmp	r2, r3
 8005952:	d3e5      	bcc.n	8005920 <USBH_MSC_ClassRequest+0x6a>
      break;
 8005954:	e00b      	b.n	800596e <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005956:	2100      	movs	r1, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 ffa4 	bl	80078a6 <USBH_ClrFeature>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	7bda      	ldrb	r2, [r3, #15]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	739a      	strb	r2, [r3, #14]
      break;
 800596c:	e001      	b.n	8005972 <USBH_MSC_ClassRequest+0xbc>
      break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <USBH_MSC_ClassRequest+0xbe>
      break;
 8005972:	bf00      	nop
  }

  return status;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005996:	2301      	movs	r3, #1
 8005998:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800599a:	2301      	movs	r3, #1
 800599c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	7b1b      	ldrb	r3, [r3, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <USBH_MSC_Process+0x2e>
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	f000 828d 	beq.w	8005ec6 <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80059ac:	e28e      	b.n	8005ecc <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	429a      	cmp	r2, r3
 80059bc:	f080 8267 	bcs.w	8005e8e <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059c6:	4619      	mov	r1, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	2334      	movs	r3, #52	; 0x34
 80059cc:	fb03 f301 	mul.w	r3, r3, r1
 80059d0:	4413      	add	r3, r2
 80059d2:	3391      	adds	r3, #145	; 0x91
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059de:	4619      	mov	r1, r3
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	2334      	movs	r3, #52	; 0x34
 80059e4:	fb03 f301 	mul.w	r3, r3, r1
 80059e8:	4413      	add	r3, r2
 80059ea:	3390      	adds	r3, #144	; 0x90
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	f200 8235 	bhi.w	8005e5e <USBH_MSC_Process+0x4de>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <USBH_MSC_Process+0x7c>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005a21 	.word	0x08005a21
 8005a00:	08005e5f 	.word	0x08005e5f
 8005a04:	08005ae9 	.word	0x08005ae9
 8005a08:	08005c6d 	.word	0x08005c6d
 8005a0c:	08005a47 	.word	0x08005a47
 8005a10:	08005d39 	.word	0x08005d39
 8005a14:	08005e5f 	.word	0x08005e5f
 8005a18:	08005e5f 	.word	0x08005e5f
 8005a1c:	08005e4d 	.word	0x08005e4d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a26:	4619      	mov	r1, r3
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	2334      	movs	r3, #52	; 0x34
 8005a2c:	fb03 f301 	mul.w	r3, r3, r1
 8005a30:	4413      	add	r3, r2
 8005a32:	3390      	adds	r3, #144	; 0x90
 8005a34:	2204      	movs	r2, #4
 8005a36:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005a44:	e214      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a4c:	b2d9      	uxtb	r1, r3
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a54:	461a      	mov	r2, r3
 8005a56:	2334      	movs	r3, #52	; 0x34
 8005a58:	fb03 f302 	mul.w	r3, r3, r2
 8005a5c:	3398      	adds	r3, #152	; 0x98
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4413      	add	r3, r2
 8005a62:	3307      	adds	r3, #7
 8005a64:	461a      	mov	r2, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fe2a 	bl	80066c0 <USBH_MSC_SCSI_Inquiry>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	2334      	movs	r3, #52	; 0x34
 8005a82:	fb03 f301 	mul.w	r3, r3, r1
 8005a86:	4413      	add	r3, r2
 8005a88:	3390      	adds	r3, #144	; 0x90
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d10c      	bne.n	8005aae <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	2334      	movs	r3, #52	; 0x34
 8005aa0:	fb03 f301 	mul.w	r3, r3, r1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3390      	adds	r3, #144	; 0x90
 8005aa8:	2205      	movs	r2, #5
 8005aaa:	701a      	strb	r2, [r3, #0]
            break;
 8005aac:	e1d9      	b.n	8005e62 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	f040 81d6 	bne.w	8005e62 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005abc:	4619      	mov	r1, r3
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	2334      	movs	r3, #52	; 0x34
 8005ac2:	fb03 f301 	mul.w	r3, r3, r1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3390      	adds	r3, #144	; 0x90
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	2334      	movs	r3, #52	; 0x34
 8005ada:	fb03 f301 	mul.w	r3, r3, r1
 8005ade:	4413      	add	r3, r2
 8005ae0:	3391      	adds	r3, #145	; 0x91
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	701a      	strb	r2, [r3, #0]
            break;
 8005ae6:	e1bc      	b.n	8005e62 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fd26 	bl	8006544 <USBH_MSC_SCSI_TestUnitReady>
 8005af8:	4603      	mov	r3, r0
 8005afa:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005afc:	7bbb      	ldrb	r3, [r7, #14]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d149      	bne.n	8005b96 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b08:	4619      	mov	r1, r3
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	2334      	movs	r3, #52	; 0x34
 8005b0e:	fb03 f301 	mul.w	r3, r3, r1
 8005b12:	4413      	add	r3, r2
 8005b14:	3392      	adds	r3, #146	; 0x92
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b22:	4619      	mov	r1, r3
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	2334      	movs	r3, #52	; 0x34
 8005b28:	fb03 f301 	mul.w	r3, r3, r1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	33c1      	adds	r3, #193	; 0xc1
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e00b      	b.n	8005b4e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	2334      	movs	r3, #52	; 0x34
 8005b42:	fb03 f301 	mul.w	r3, r3, r1
 8005b46:	4413      	add	r3, r2
 8005b48:	33c1      	adds	r3, #193	; 0xc1
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b54:	4619      	mov	r1, r3
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	2334      	movs	r3, #52	; 0x34
 8005b5a:	fb03 f301 	mul.w	r3, r3, r1
 8005b5e:	4413      	add	r3, r2
 8005b60:	3390      	adds	r3, #144	; 0x90
 8005b62:	2203      	movs	r2, #3
 8005b64:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	2334      	movs	r3, #52	; 0x34
 8005b72:	fb03 f301 	mul.w	r3, r3, r1
 8005b76:	4413      	add	r3, r2
 8005b78:	3391      	adds	r3, #145	; 0x91
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b84:	4619      	mov	r1, r3
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	2334      	movs	r3, #52	; 0x34
 8005b8a:	fb03 f301 	mul.w	r3, r3, r1
 8005b8e:	4413      	add	r3, r2
 8005b90:	3392      	adds	r3, #146	; 0x92
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d14a      	bne.n	8005c32 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	2334      	movs	r3, #52	; 0x34
 8005ba8:	fb03 f301 	mul.w	r3, r3, r1
 8005bac:	4413      	add	r3, r2
 8005bae:	3392      	adds	r3, #146	; 0x92
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d00c      	beq.n	8005bd0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	2334      	movs	r3, #52	; 0x34
 8005bc2:	fb03 f301 	mul.w	r3, r3, r1
 8005bc6:	4413      	add	r3, r2
 8005bc8:	33c1      	adds	r3, #193	; 0xc1
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e00b      	b.n	8005be8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	2334      	movs	r3, #52	; 0x34
 8005bdc:	fb03 f301 	mul.w	r3, r3, r1
 8005be0:	4413      	add	r3, r2
 8005be2:	33c1      	adds	r3, #193	; 0xc1
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bee:	4619      	mov	r1, r3
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	2334      	movs	r3, #52	; 0x34
 8005bf4:	fb03 f301 	mul.w	r3, r3, r1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3390      	adds	r3, #144	; 0x90
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c06:	4619      	mov	r1, r3
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	2334      	movs	r3, #52	; 0x34
 8005c0c:	fb03 f301 	mul.w	r3, r3, r1
 8005c10:	4413      	add	r3, r2
 8005c12:	3391      	adds	r3, #145	; 0x91
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c1e:	4619      	mov	r1, r3
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	2334      	movs	r3, #52	; 0x34
 8005c24:	fb03 f301 	mul.w	r3, r3, r1
 8005c28:	4413      	add	r3, r2
 8005c2a:	3392      	adds	r3, #146	; 0x92
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	701a      	strb	r2, [r3, #0]
            break;
 8005c30:	e119      	b.n	8005e66 <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	f040 8116 	bne.w	8005e66 <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c40:	4619      	mov	r1, r3
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	2334      	movs	r3, #52	; 0x34
 8005c46:	fb03 f301 	mul.w	r3, r3, r1
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3390      	adds	r3, #144	; 0x90
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c58:	4619      	mov	r1, r3
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	2334      	movs	r3, #52	; 0x34
 8005c5e:	fb03 f301 	mul.w	r3, r3, r1
 8005c62:	4413      	add	r3, r2
 8005c64:	3391      	adds	r3, #145	; 0x91
 8005c66:	2202      	movs	r2, #2
 8005c68:	701a      	strb	r2, [r3, #0]
            break;
 8005c6a:	e0fc      	b.n	8005e66 <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c72:	b2d9      	uxtb	r1, r3
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2334      	movs	r3, #52	; 0x34
 8005c7e:	fb03 f302 	mul.w	r3, r3, r2
 8005c82:	3390      	adds	r3, #144	; 0x90
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	3304      	adds	r3, #4
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fc9c 	bl	80065ca <USBH_MSC_SCSI_ReadCapacity>
 8005c92:	4603      	mov	r3, r0
 8005c94:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d120      	bne.n	8005cde <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	2334      	movs	r3, #52	; 0x34
 8005ca8:	fb03 f301 	mul.w	r3, r3, r1
 8005cac:	4413      	add	r3, r2
 8005cae:	3390      	adds	r3, #144	; 0x90
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cba:	4619      	mov	r1, r3
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	2334      	movs	r3, #52	; 0x34
 8005cc0:	fb03 f301 	mul.w	r3, r3, r1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3391      	adds	r3, #145	; 0x91
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005cdc:	e0c5      	b.n	8005e6a <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d10c      	bne.n	8005cfe <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cea:	4619      	mov	r1, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	2334      	movs	r3, #52	; 0x34
 8005cf0:	fb03 f301 	mul.w	r3, r3, r1
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3390      	adds	r3, #144	; 0x90
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	701a      	strb	r2, [r3, #0]
            break;
 8005cfc:	e0b5      	b.n	8005e6a <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	f040 80b2 	bne.w	8005e6a <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	2334      	movs	r3, #52	; 0x34
 8005d12:	fb03 f301 	mul.w	r3, r3, r1
 8005d16:	4413      	add	r3, r2
 8005d18:	3390      	adds	r3, #144	; 0x90
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d24:	4619      	mov	r1, r3
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	2334      	movs	r3, #52	; 0x34
 8005d2a:	fb03 f301 	mul.w	r3, r3, r1
 8005d2e:	4413      	add	r3, r2
 8005d30:	3391      	adds	r3, #145	; 0x91
 8005d32:	2202      	movs	r2, #2
 8005d34:	701a      	strb	r2, [r3, #0]
            break;
 8005d36:	e098      	b.n	8005e6a <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d3e:	b2d9      	uxtb	r1, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d46:	461a      	mov	r2, r3
 8005d48:	2334      	movs	r3, #52	; 0x34
 8005d4a:	fb03 f302 	mul.w	r3, r3, r2
 8005d4e:	3398      	adds	r3, #152	; 0x98
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4413      	add	r3, r2
 8005d54:	3304      	adds	r3, #4
 8005d56:	461a      	mov	r2, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fd56 	bl	800680a <USBH_MSC_SCSI_RequestSense>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d145      	bne.n	8005df4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d6e:	4619      	mov	r1, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	2334      	movs	r3, #52	; 0x34
 8005d74:	fb03 f301 	mul.w	r3, r3, r1
 8005d78:	4413      	add	r3, r2
 8005d7a:	339c      	adds	r3, #156	; 0x9c
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d00c      	beq.n	8005d9c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d88:	4619      	mov	r1, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	2334      	movs	r3, #52	; 0x34
 8005d8e:	fb03 f301 	mul.w	r3, r3, r1
 8005d92:	4413      	add	r3, r2
 8005d94:	339c      	adds	r3, #156	; 0x9c
 8005d96:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d117      	bne.n	8005dcc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f242 720f 	movw	r2, #9999	; 0x270f
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d80c      	bhi.n	8005dcc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005db8:	4619      	mov	r1, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	2334      	movs	r3, #52	; 0x34
 8005dbe:	fb03 f301 	mul.w	r3, r3, r1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3390      	adds	r3, #144	; 0x90
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	701a      	strb	r2, [r3, #0]
                  break;
 8005dca:	e051      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	2334      	movs	r3, #52	; 0x34
 8005dd8:	fb03 f301 	mul.w	r3, r3, r1
 8005ddc:	4413      	add	r3, r2
 8005dde:	3390      	adds	r3, #144	; 0x90
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dea:	3301      	adds	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d10c      	bne.n	8005e14 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e00:	4619      	mov	r1, r3
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	2334      	movs	r3, #52	; 0x34
 8005e06:	fb03 f301 	mul.w	r3, r3, r1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3390      	adds	r3, #144	; 0x90
 8005e0e:	2208      	movs	r2, #8
 8005e10:	701a      	strb	r2, [r3, #0]
            break;
 8005e12:	e02c      	b.n	8005e6e <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d129      	bne.n	8005e6e <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e20:	4619      	mov	r1, r3
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	2334      	movs	r3, #52	; 0x34
 8005e26:	fb03 f301 	mul.w	r3, r3, r1
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3390      	adds	r3, #144	; 0x90
 8005e2e:	2201      	movs	r2, #1
 8005e30:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e38:	4619      	mov	r1, r3
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	2334      	movs	r3, #52	; 0x34
 8005e3e:	fb03 f301 	mul.w	r3, r3, r1
 8005e42:	4413      	add	r3, r2
 8005e44:	3391      	adds	r3, #145	; 0x91
 8005e46:	2202      	movs	r2, #2
 8005e48:	701a      	strb	r2, [r3, #0]
            break;
 8005e4a:	e010      	b.n	8005e6e <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e52:	3301      	adds	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005e5c:	e008      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e5e:	bf00      	nop
 8005e60:	e006      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e6e:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005e84:	2300      	movs	r3, #0
 8005e86:	2200      	movs	r2, #0
 8005e88:	f002 fc8e 	bl	80087a8 <osMessageQueuePut>
      break;
 8005e8c:	e01e      	b.n	8005ecc <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f002 fc78 	bl	80087a8 <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
      break;
 8005ec4:	e002      	b.n	8005ecc <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eca:	bf00      	nop
  }
  return error;
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop

08005ed8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2221      	movs	r2, #33	; 0x21
 8005efa:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	22ff      	movs	r2, #255	; 0xff
 8005f00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005f14:	2200      	movs	r2, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 fea4 	bl	8007c66 <USBH_CtlReq>
 8005f1e:	4603      	mov	r3, r0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	22a1      	movs	r2, #161	; 0xa1
 8005f36:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	22fe      	movs	r2, #254	; 0xfe
 8005f3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8005f50:	2201      	movs	r2, #1
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 fe86 	bl	8007c66 <USBH_CtlReq>
 8005f5a:	4603      	mov	r3, r0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <USBH_MSC_BOT_Init+0x3c>)
 8005f7a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <USBH_MSC_BOT_Init+0x40>)
 8005f80:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	43425355 	.word	0x43425355
 8005fa4:	20304050 	.word	0x20304050

08005fa8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	2b0a      	cmp	r3, #10
 8005fdc:	f200 822d 	bhi.w	800643a <USBH_MSC_BOT_Process+0x492>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <USBH_MSC_BOT_Process+0x40>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	0800603f 	.word	0x0800603f
 8005ff0:	080060fd 	.word	0x080060fd
 8005ff4:	0800611b 	.word	0x0800611b
 8005ff8:	080061d7 	.word	0x080061d7
 8005ffc:	080061fb 	.word	0x080061fb
 8006000:	080062e9 	.word	0x080062e9
 8006004:	08006305 	.word	0x08006305
 8006008:	0800638f 	.word	0x0800638f
 800600c:	080063bf 	.word	0x080063bf
 8006010:	08006421 	.word	0x08006421
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	795a      	ldrb	r2, [r3, #5]
 800602e:	2301      	movs	r3, #1
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	221f      	movs	r2, #31
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f002 f915 	bl	8008266 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800603c:	e20c      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	795b      	ldrb	r3, [r3, #5]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f005 fb95 	bl	800b774 <USBH_LL_GetURBState>
 800604a:	4603      	mov	r3, r0
 800604c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800604e:	7d3b      	ldrb	r3, [r7, #20]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d126      	bne.n	80060a2 <USBH_MSC_BOT_Process+0xfa>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00f      	beq.n	800607c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006062:	b25b      	sxtb	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	da04      	bge.n	8006072 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2203      	movs	r2, #3
 800606c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006070:	e008      	b.n	8006084 <USBH_MSC_BOT_Process+0xdc>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2205      	movs	r2, #5
 8006076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800607a:	e003      	b.n	8006084 <USBH_MSC_BOT_Process+0xdc>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2207      	movs	r2, #7
 8006080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006098:	2300      	movs	r3, #0
 800609a:	2200      	movs	r2, #0
 800609c:	f002 fb84 	bl	80087a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80060a0:	e1cd      	b.n	800643e <USBH_MSC_BOT_Process+0x496>
      else if (URB_Status == USBH_URB_NOTREADY)
 80060a2:	7d3b      	ldrb	r3, [r7, #20]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d112      	bne.n	80060ce <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80060c4:	2300      	movs	r3, #0
 80060c6:	2200      	movs	r2, #0
 80060c8:	f002 fb6e 	bl	80087a8 <osMessageQueuePut>
      break;
 80060cc:	e1b7      	b.n	800643e <USBH_MSC_BOT_Process+0x496>
        if (URB_Status == USBH_URB_STALL)
 80060ce:	7d3b      	ldrb	r3, [r7, #20]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	f040 81b4 	bne.w	800643e <USBH_MSC_BOT_Process+0x496>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	220a      	movs	r2, #10
 80060da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80060f2:	2300      	movs	r3, #0
 80060f4:	2200      	movs	r2, #0
 80060f6:	f002 fb57 	bl	80087a8 <osMessageQueuePut>
      break;
 80060fa:	e1a0      	b.n	800643e <USBH_MSC_BOT_Process+0x496>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	895a      	ldrh	r2, [r3, #10]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	791b      	ldrb	r3, [r3, #4]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f002 f8d0 	bl	80082b0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2204      	movs	r2, #4
 8006114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006118:	e19e      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f005 fb27 	bl	800b774 <USBH_LL_GetURBState>
 8006126:	4603      	mov	r3, r0
 8006128:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800612a:	7d3b      	ldrb	r3, [r7, #20]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d13b      	bne.n	80061a8 <USBH_MSC_BOT_Process+0x200>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	8952      	ldrh	r2, [r2, #10]
 8006138:	4293      	cmp	r3, r2
 800613a:	d910      	bls.n	800615e <USBH_MSC_BOT_Process+0x1b6>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	8952      	ldrh	r2, [r2, #10]
 8006146:	441a      	add	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	8952      	ldrh	r2, [r2, #10]
 8006156:	1a9a      	subs	r2, r3, r2
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	65da      	str	r2, [r3, #92]	; 0x5c
 800615c:	e002      	b.n	8006164 <USBH_MSC_BOT_Process+0x1bc>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2200      	movs	r2, #0
 8006162:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <USBH_MSC_BOT_Process+0x1da>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	895a      	ldrh	r2, [r3, #10]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	791b      	ldrb	r3, [r3, #4]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f002 f898 	bl	80082b0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006180:	e15f      	b.n	8006442 <USBH_MSC_BOT_Process+0x49a>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2207      	movs	r2, #7
 8006186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800619e:	2300      	movs	r3, #0
 80061a0:	2200      	movs	r2, #0
 80061a2:	f002 fb01 	bl	80087a8 <osMessageQueuePut>
      break;
 80061a6:	e14c      	b.n	8006442 <USBH_MSC_BOT_Process+0x49a>
      else if (URB_Status == USBH_URB_STALL)
 80061a8:	7d3b      	ldrb	r3, [r7, #20]
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	f040 8149 	bne.w	8006442 <USBH_MSC_BOT_Process+0x49a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2209      	movs	r2, #9
 80061b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80061cc:	2300      	movs	r3, #0
 80061ce:	2200      	movs	r2, #0
 80061d0:	f002 faea 	bl	80087a8 <osMessageQueuePut>
      break;
 80061d4:	e135      	b.n	8006442 <USBH_MSC_BOT_Process+0x49a>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	891a      	ldrh	r2, [r3, #8]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	7958      	ldrb	r0, [r3, #5]
 80061e4:	2301      	movs	r3, #1
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4603      	mov	r3, r0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f002 f83b 	bl	8008266 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2206      	movs	r2, #6
 80061f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80061f8:	e12e      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	795b      	ldrb	r3, [r3, #5]
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f005 fab7 	bl	800b774 <USBH_LL_GetURBState>
 8006206:	4603      	mov	r3, r0
 8006208:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800620a:	7d3b      	ldrb	r3, [r7, #20]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d13e      	bne.n	800628e <USBH_MSC_BOT_Process+0x2e6>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	8912      	ldrh	r2, [r2, #8]
 8006218:	4293      	cmp	r3, r2
 800621a:	d910      	bls.n	800623e <USBH_MSC_BOT_Process+0x296>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	8912      	ldrh	r2, [r2, #8]
 8006226:	441a      	add	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	8912      	ldrh	r2, [r2, #8]
 8006236:	1a9a      	subs	r2, r3, r2
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	65da      	str	r2, [r3, #92]	; 0x5c
 800623c:	e002      	b.n	8006244 <USBH_MSC_BOT_Process+0x29c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2200      	movs	r2, #0
 8006242:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <USBH_MSC_BOT_Process+0x2c0>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	891a      	ldrh	r2, [r3, #8]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	7958      	ldrb	r0, [r3, #5]
 800625a:	2301      	movs	r3, #1
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	4603      	mov	r3, r0
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f002 f800 	bl	8008266 <USBH_BulkSendData>
 8006266:	e003      	b.n	8006270 <USBH_MSC_BOT_Process+0x2c8>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2207      	movs	r2, #7
 800626c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006284:	2300      	movs	r3, #0
 8006286:	2200      	movs	r2, #0
 8006288:	f002 fa8e 	bl	80087a8 <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 800628c:	e0db      	b.n	8006446 <USBH_MSC_BOT_Process+0x49e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800628e:	7d3b      	ldrb	r3, [r7, #20]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d112      	bne.n	80062ba <USBH_MSC_BOT_Process+0x312>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2205      	movs	r2, #5
 8006298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80062b0:	2300      	movs	r3, #0
 80062b2:	2200      	movs	r2, #0
 80062b4:	f002 fa78 	bl	80087a8 <osMessageQueuePut>
      break;
 80062b8:	e0c5      	b.n	8006446 <USBH_MSC_BOT_Process+0x49e>
      else if (URB_Status == USBH_URB_STALL)
 80062ba:	7d3b      	ldrb	r3, [r7, #20]
 80062bc:	2b05      	cmp	r3, #5
 80062be:	f040 80c2 	bne.w	8006446 <USBH_MSC_BOT_Process+0x49e>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	220a      	movs	r2, #10
 80062c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2202      	movs	r2, #2
 80062ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80062de:	2300      	movs	r3, #0
 80062e0:	2200      	movs	r2, #0
 80062e2:	f002 fa61 	bl	80087a8 <osMessageQueuePut>
      break;
 80062e6:	e0ae      	b.n	8006446 <USBH_MSC_BOT_Process+0x49e>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	791b      	ldrb	r3, [r3, #4]
 80062f2:	220d      	movs	r2, #13
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 ffdb 	bl	80082b0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2208      	movs	r2, #8
 80062fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006302:	e0a9      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	791b      	ldrb	r3, [r3, #4]
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f005 fa32 	bl	800b774 <USBH_LL_GetURBState>
 8006310:	4603      	mov	r3, r0
 8006312:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006314:	7d3b      	ldrb	r3, [r7, #20]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d123      	bne.n	8006362 <USBH_MSC_BOT_Process+0x3ba>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f8c6 	bl	80064bc <USBH_MSC_DecodeCSW>
 8006330:	4603      	mov	r3, r0
 8006332:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006334:	7d7b      	ldrb	r3, [r7, #21]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <USBH_MSC_BOT_Process+0x398>
        {
          status = USBH_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	75fb      	strb	r3, [r7, #23]
 800633e:	e001      	b.n	8006344 <USBH_MSC_BOT_Process+0x39c>
        }
        else
        {
          status = USBH_FAIL;
 8006340:	2302      	movs	r3, #2
 8006342:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006358:	2300      	movs	r3, #0
 800635a:	2200      	movs	r2, #0
 800635c:	f002 fa24 	bl	80087a8 <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 8006360:	e073      	b.n	800644a <USBH_MSC_BOT_Process+0x4a2>
      else if (URB_Status == USBH_URB_STALL)
 8006362:	7d3b      	ldrb	r3, [r7, #20]
 8006364:	2b05      	cmp	r3, #5
 8006366:	d170      	bne.n	800644a <USBH_MSC_BOT_Process+0x4a2>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2209      	movs	r2, #9
 800636c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006384:	2300      	movs	r3, #0
 8006386:	2200      	movs	r2, #0
 8006388:	f002 fa0e 	bl	80087a8 <osMessageQueuePut>
      break;
 800638c:	e05d      	b.n	800644a <USBH_MSC_BOT_Process+0x4a2>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	2200      	movs	r2, #0
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f865 	bl	8006464 <USBH_MSC_BOT_Abort>
 800639a:	4603      	mov	r3, r0
 800639c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800639e:	7dbb      	ldrb	r3, [r7, #22]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <USBH_MSC_BOT_Process+0x406>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2207      	movs	r2, #7
 80063a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80063ac:	e04f      	b.n	800644e <USBH_MSC_BOT_Process+0x4a6>
      else if (error == USBH_UNRECOVERED_ERROR)
 80063ae:	7dbb      	ldrb	r3, [r7, #22]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d14c      	bne.n	800644e <USBH_MSC_BOT_Process+0x4a6>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	220b      	movs	r2, #11
 80063b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80063bc:	e047      	b.n	800644e <USBH_MSC_BOT_Process+0x4a6>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	2201      	movs	r2, #1
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f84d 	bl	8006464 <USBH_MSC_BOT_Abort>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80063ce:	7dbb      	ldrb	r3, [r7, #22]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11d      	bne.n	8006410 <USBH_MSC_BOT_Process+0x468>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	795b      	ldrb	r3, [r3, #5]
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f005 fa27 	bl	800b82e <USBH_LL_GetToggle>
 80063e0:	4603      	mov	r3, r0
 80063e2:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	7959      	ldrb	r1, [r3, #5]
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	f1c3 0301 	rsb	r3, r3, #1
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f005 f9e8 	bl	800b7c8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	791b      	ldrb	r3, [r3, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f005 f9e1 	bl	800b7c8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2209      	movs	r2, #9
 800640a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800640e:	e020      	b.n	8006452 <USBH_MSC_BOT_Process+0x4aa>
        if (error == USBH_UNRECOVERED_ERROR)
 8006410:	7dbb      	ldrb	r3, [r7, #22]
 8006412:	2b04      	cmp	r3, #4
 8006414:	d11d      	bne.n	8006452 <USBH_MSC_BOT_Process+0x4aa>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	220b      	movs	r2, #11
 800641a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800641e:	e018      	b.n	8006452 <USBH_MSC_BOT_Process+0x4aa>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fd64 	bl	8005eee <USBH_MSC_BOT_REQ_Reset>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d112      	bne.n	8006456 <USBH_MSC_BOT_Process+0x4ae>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006438:	e00d      	b.n	8006456 <USBH_MSC_BOT_Process+0x4ae>

    default:
      break;
 800643a:	bf00      	nop
 800643c:	e00c      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800643e:	bf00      	nop
 8006440:	e00a      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>
      break;
 8006442:	bf00      	nop
 8006444:	e008      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>
      break;
 8006446:	bf00      	nop
 8006448:	e006      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800644a:	bf00      	nop
 800644c:	e004      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <USBH_MSC_BOT_Process+0x4b0>
      break;
 8006456:	bf00      	nop
  }
  return status;
 8006458:	7dfb      	ldrb	r3, [r7, #23]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop

08006464 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
 8006470:	4613      	mov	r3, r2
 8006472:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006474:	2302      	movs	r3, #2
 8006476:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006482:	78bb      	ldrb	r3, [r7, #2]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <USBH_MSC_BOT_Abort+0x2a>
 8006488:	2b01      	cmp	r3, #1
 800648a:	d009      	beq.n	80064a0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800648c:	e011      	b.n	80064b2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	79db      	ldrb	r3, [r3, #7]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fa06 	bl	80078a6 <USBH_ClrFeature>
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]
      break;
 800649e:	e008      	b.n	80064b2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	799b      	ldrb	r3, [r3, #6]
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 f9fd 	bl	80078a6 <USBH_ClrFeature>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]
      break;
 80064b0:	bf00      	nop
  }
  return status;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80064ce:	2301      	movs	r3, #1
 80064d0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	791b      	ldrb	r3, [r3, #4]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f005 f8b9 	bl	800b650 <USBH_LL_GetLastXferSize>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b0d      	cmp	r3, #13
 80064e2:	d002      	beq.n	80064ea <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80064e4:	2302      	movs	r3, #2
 80064e6:	73fb      	strb	r3, [r7, #15]
 80064e8:	e024      	b.n	8006534 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ee:	4a14      	ldr	r2, [pc, #80]	; (8006540 <USBH_MSC_DecodeCSW+0x84>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d11d      	bne.n	8006530 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d119      	bne.n	8006534 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006506:	2b00      	cmp	r3, #0
 8006508:	d102      	bne.n	8006510 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
 800650e:	e011      	b.n	8006534 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006516:	2b01      	cmp	r3, #1
 8006518:	d102      	bne.n	8006520 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800651a:	2301      	movs	r3, #1
 800651c:	73fb      	strb	r3, [r7, #15]
 800651e:	e009      	b.n	8006534 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006526:	2b02      	cmp	r3, #2
 8006528:	d104      	bne.n	8006534 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800652a:	2302      	movs	r3, #2
 800652c:	73fb      	strb	r3, [r7, #15]
 800652e:	e001      	b.n	8006534 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006530:	2302      	movs	r3, #2
 8006532:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	53425355 	.word	0x53425355

08006544 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006550:	2302      	movs	r3, #2
 8006552:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006564:	2b01      	cmp	r3, #1
 8006566:	d002      	beq.n	800656e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006568:	2b02      	cmp	r3, #2
 800656a:	d021      	beq.n	80065b0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800656c:	e028      	b.n	80065c0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	220a      	movs	r2, #10
 8006580:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	3363      	adds	r3, #99	; 0x63
 8006588:	2210      	movs	r2, #16
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f005 fa1a 	bl	800b9c6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80065aa:	2301      	movs	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
      break;
 80065ae:	e007      	b.n	80065c0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff fcf7 	bl	8005fa8 <USBH_MSC_BOT_Process>
 80065ba:	4603      	mov	r3, r0
 80065bc:	73fb      	strb	r3, [r7, #15]
      break;
 80065be:	bf00      	nop
  }

  return error;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b086      	sub	sp, #24
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	460b      	mov	r3, r1
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80065d8:	2301      	movs	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d002      	beq.n	80065f6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d027      	beq.n	8006644 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80065f4:	e05f      	b.n	80066b6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2208      	movs	r2, #8
 80065fa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2280      	movs	r2, #128	; 0x80
 8006600:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	220a      	movs	r2, #10
 8006608:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	3363      	adds	r3, #99	; 0x63
 8006610:	2210      	movs	r2, #16
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f005 f9d6 	bl	800b9c6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2225      	movs	r2, #37	; 0x25
 800661e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2202      	movs	r2, #2
 800662e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f103 0210 	add.w	r2, r3, #16
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800663e:	2301      	movs	r3, #1
 8006640:	75fb      	strb	r3, [r7, #23]
      break;
 8006642:	e038      	b.n	80066b6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	4619      	mov	r1, r3
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f7ff fcad 	bl	8005fa8 <USBH_MSC_BOT_Process>
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d12d      	bne.n	80066b4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800665e:	3303      	adds	r3, #3
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666a:	3302      	adds	r3, #2
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006678:	3301      	adds	r3, #1
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800667e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	061b      	lsls	r3, r3, #24
 800668a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006696:	3307      	adds	r3, #7
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b29a      	uxth	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a2:	3306      	adds	r3, #6
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	809a      	strh	r2, [r3, #4]
      break;
 80066b4:	bf00      	nop
  }

  return error;
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	460b      	mov	r3, r1
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80066ce:	2302      	movs	r3, #2
 80066d0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d002      	beq.n	80066ec <USBH_MSC_SCSI_Inquiry+0x2c>
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d03d      	beq.n	8006766 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80066ea:	e089      	b.n	8006800 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2224      	movs	r2, #36	; 0x24
 80066f0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2280      	movs	r2, #128	; 0x80
 80066f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	220a      	movs	r2, #10
 80066fe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3363      	adds	r3, #99	; 0x63
 8006706:	220a      	movs	r2, #10
 8006708:	2100      	movs	r1, #0
 800670a:	4618      	mov	r0, r3
 800670c:	f005 f95b 	bl	800b9c6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2212      	movs	r2, #18
 8006714:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	015b      	lsls	r3, r3, #5
 800671c:	b2da      	uxtb	r2, r3
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2224      	movs	r2, #36	; 0x24
 8006738:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f103 0210 	add.w	r2, r3, #16
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
      break;
 8006764:	e04c      	b.n	8006800 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	4619      	mov	r1, r3
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fc1c 	bl	8005fa8 <USBH_MSC_BOT_Process>
 8006770:	4603      	mov	r3, r0
 8006772:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d141      	bne.n	80067fe <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800677a:	2222      	movs	r2, #34	; 0x22
 800677c:	2100      	movs	r1, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f005 f921 	bl	800b9c6 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 031f 	and.w	r3, r3, #31
 8006790:	b2da      	uxtb	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ac:	3301      	adds	r3, #1
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da03      	bge.n	80067be <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	709a      	strb	r2, [r3, #2]
 80067bc:	e002      	b.n	80067c4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	1cd8      	adds	r0, r3, #3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ce:	3308      	adds	r3, #8
 80067d0:	2208      	movs	r2, #8
 80067d2:	4619      	mov	r1, r3
 80067d4:	f005 f8ec 	bl	800b9b0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f103 000c 	add.w	r0, r3, #12
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e4:	3310      	adds	r3, #16
 80067e6:	2210      	movs	r2, #16
 80067e8:	4619      	mov	r1, r3
 80067ea:	f005 f8e1 	bl	800b9b0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	331d      	adds	r3, #29
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80067f8:	3220      	adds	r2, #32
 80067fa:	6812      	ldr	r2, [r2, #0]
 80067fc:	601a      	str	r2, [r3, #0]
      break;
 80067fe:	bf00      	nop
  }

  return error;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b086      	sub	sp, #24
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	460b      	mov	r3, r1
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006818:	2302      	movs	r3, #2
 800681a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800682c:	2b01      	cmp	r3, #1
 800682e:	d002      	beq.n	8006836 <USBH_MSC_SCSI_RequestSense+0x2c>
 8006830:	2b02      	cmp	r3, #2
 8006832:	d03d      	beq.n	80068b0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006834:	e05d      	b.n	80068f2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	220e      	movs	r2, #14
 800683a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	220a      	movs	r2, #10
 8006848:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	3363      	adds	r3, #99	; 0x63
 8006850:	2210      	movs	r2, #16
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f005 f8b6 	bl	800b9c6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2203      	movs	r2, #3
 800685e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006862:	7afb      	ldrb	r3, [r7, #11]
 8006864:	015b      	lsls	r3, r3, #5
 8006866:	b2da      	uxtb	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	220e      	movs	r2, #14
 8006882:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2202      	movs	r2, #2
 800689a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f103 0210 	add.w	r2, r3, #16
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
      break;
 80068ae:	e020      	b.n	80068f2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80068b0:	7afb      	ldrb	r3, [r7, #11]
 80068b2:	4619      	mov	r1, r3
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fb77 	bl	8005fa8 <USBH_MSC_BOT_Process>
 80068ba:	4603      	mov	r3, r0
 80068bc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d115      	bne.n	80068f0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ca:	3302      	adds	r3, #2
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068de:	7b1a      	ldrb	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ea:	7b5a      	ldrb	r2, [r3, #13]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	709a      	strb	r2, [r3, #2]
      break;
 80068f0:	bf00      	nop
  }

  return error;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006910:	2302      	movs	r3, #2
 8006912:	e044      	b.n	800699e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	79fa      	ldrb	r2, [r7, #7]
 8006918:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f841 	bl	80069b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006960:	2200      	movs	r2, #0
 8006962:	2104      	movs	r1, #4
 8006964:	2010      	movs	r0, #16
 8006966:	f001 fe99 	bl	800869c <osMessageQueueNew>
 800696a:	4602      	mov	r2, r0
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006972:	4b0d      	ldr	r3, [pc, #52]	; (80069a8 <USBH_Init+0xac>)
 8006974:	4a0d      	ldr	r2, [pc, #52]	; (80069ac <USBH_Init+0xb0>)
 8006976:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <USBH_Init+0xac>)
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <USBH_Init+0xac>)
 8006980:	2218      	movs	r2, #24
 8006982:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006984:	4a08      	ldr	r2, [pc, #32]	; (80069a8 <USBH_Init+0xac>)
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	4809      	ldr	r0, [pc, #36]	; (80069b0 <USBH_Init+0xb4>)
 800698a:	f001 fdb3 	bl	80084f4 <osThreadNew>
 800698e:	4602      	mov	r2, r0
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f004 fda8 	bl	800b4ec <USBH_LL_Init>

  return USBH_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20004a54 	.word	0x20004a54
 80069ac:	0800bb74 	.word	0x0800bb74
 80069b0:	0800761d 	.word	0x0800761d

080069b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e009      	b.n	80069da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	33e0      	adds	r3, #224	; 0xe0
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	2200      	movs	r2, #0
 80069d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b0e      	cmp	r3, #14
 80069de:	d9f2      	bls.n	80069c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e009      	b.n	80069fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3301      	adds	r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a00:	d3f1      	bcc.n	80069e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2240      	movs	r2, #64	; 0x40
 8006a26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d016      	beq.n	8006a9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10e      	bne.n	8006a98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a80:	1c59      	adds	r1, r3, #1
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	33de      	adds	r3, #222	; 0xde
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
 8006a96:	e004      	b.n	8006aa2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	73fb      	strb	r3, [r7, #15]
 8006a9c:	e001      	b.n	8006aa2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ac6:	78fa      	ldrb	r2, [r7, #3]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d204      	bcs.n	8006ad6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ad4:	e001      	b.n	8006ada <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	4608      	mov	r0, r1
 8006af2:	4611      	mov	r1, r2
 8006af4:	461a      	mov	r2, r3
 8006af6:	4603      	mov	r3, r0
 8006af8:	70fb      	strb	r3, [r7, #3]
 8006afa:	460b      	mov	r3, r1
 8006afc:	70bb      	strb	r3, [r7, #2]
 8006afe:	4613      	mov	r3, r2
 8006b00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b12:	e025      	b.n	8006b60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	221a      	movs	r2, #26
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	3302      	adds	r3, #2
 8006b24:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	795b      	ldrb	r3, [r3, #5]
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d002      	beq.n	8006b36 <USBH_FindInterface+0x4e>
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	2bff      	cmp	r3, #255	; 0xff
 8006b34:	d111      	bne.n	8006b5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b3a:	78ba      	ldrb	r2, [r7, #2]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d002      	beq.n	8006b46 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b40:	78bb      	ldrb	r3, [r7, #2]
 8006b42:	2bff      	cmp	r3, #255	; 0xff
 8006b44:	d109      	bne.n	8006b5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b4a:	787a      	ldrb	r2, [r7, #1]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d002      	beq.n	8006b56 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b50:	787b      	ldrb	r3, [r7, #1]
 8006b52:	2bff      	cmp	r3, #255	; 0xff
 8006b54:	d101      	bne.n	8006b5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	e006      	b.n	8006b68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d9d6      	bls.n	8006b14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b66:	23ff      	movs	r3, #255	; 0xff
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f004 fcf1 	bl	800b564 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006b82:	2101      	movs	r1, #1
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f004 fe08 	bl	800b79a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af04      	add	r7, sp, #16
 8006b9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d102      	bne.n	8006bb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b0b      	cmp	r3, #11
 8006bbe:	f200 823c 	bhi.w	800703a <USBH_Process+0x4a6>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <USBH_Process+0x34>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006bf9 	.word	0x08006bf9
 8006bcc:	08006c47 	.word	0x08006c47
 8006bd0:	08006ccb 	.word	0x08006ccb
 8006bd4:	08006fb9 	.word	0x08006fb9
 8006bd8:	0800703b 	.word	0x0800703b
 8006bdc:	08006d8b 	.word	0x08006d8b
 8006be0:	08006f43 	.word	0x08006f43
 8006be4:	08006ddd 	.word	0x08006ddd
 8006be8:	08006e19 	.word	0x08006e19
 8006bec:	08006e53 	.word	0x08006e53
 8006bf0:	08006e9b 	.word	0x08006e9b
 8006bf4:	08006fa1 	.word	0x08006fa1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 821c 	beq.w	800703e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c0c:	20c8      	movs	r0, #200	; 0xc8
 8006c0e:	f004 fe41 	bl	800b894 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f004 fd01 	bl	800b61a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f001 fdb2 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006c44:	e1fb      	b.n	800703e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d107      	bne.n	8006c60 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e025      	b.n	8006cac <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c6a:	d914      	bls.n	8006c96 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c72:	3301      	adds	r3, #1
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d903      	bls.n	8006c8e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	220d      	movs	r2, #13
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	e00e      	b.n	8006cac <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e00a      	b.n	8006cac <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c9c:	f103 020a 	add.w	r2, r3, #10
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ca6:	200a      	movs	r0, #10
 8006ca8:	f004 fdf4 	bl	800b894 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f001 fd70 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      break;
 8006cc8:	e1c0      	b.n	800704c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cda:	2104      	movs	r1, #4
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ce0:	2064      	movs	r0, #100	; 0x64
 8006ce2:	f004 fdd7 	bl	800b894 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f004 fc72 	bl	800b5d0 <USBH_LL_GetSpeed>
 8006cec:	4603      	mov	r3, r0
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2205      	movs	r2, #5
 8006cfa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fb23 	bl	800834a <USBH_AllocPipe>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d0c:	2180      	movs	r1, #128	; 0x80
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fb1b 	bl	800834a <USBH_AllocPipe>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7919      	ldrb	r1, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d30:	b292      	uxth	r2, r2
 8006d32:	9202      	str	r2, [sp, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	9201      	str	r2, [sp, #4]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2280      	movs	r2, #128	; 0x80
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 fad4 	bl	80082ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	7959      	ldrb	r1, [r3, #5]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d58:	b292      	uxth	r2, r2
 8006d5a:	9202      	str	r2, [sp, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	9201      	str	r2, [sp, #4]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4603      	mov	r3, r0
 8006d64:	2200      	movs	r2, #0
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fac0 	bl	80082ec <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d80:	2300      	movs	r3, #0
 8006d82:	2200      	movs	r2, #0
 8006d84:	f001 fd10 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      break;
 8006d88:	e160      	b.n	800704c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f964 	bl	8007058 <USBH_HandleEnum>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 8152 	bne.w	8007042 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d103      	bne.n	8006db8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2208      	movs	r2, #8
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	e002      	b.n	8006dbe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2207      	movs	r2, #7
 8006dbc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2205      	movs	r2, #5
 8006dc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f001 fce7 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006dda:	e132      	b.n	8007042 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 812f 	beq.w	8007046 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dee:	2101      	movs	r1, #1
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2208      	movs	r2, #8
 8006df8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2200      	movs	r2, #0
 8006e12:	f001 fcc9 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8006e16:	e116      	b.n	8007046 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fcf8 	bl	8007818 <USBH_SetCfg>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2209      	movs	r2, #9
 8006e32:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f001 fcac 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      break;
 8006e50:	e0fc      	b.n	800704c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006e60:	2101      	movs	r1, #1
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fcfb 	bl	800785e <USBH_SetFeature>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	220a      	movs	r2, #10
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e002      	b.n	8006e7c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	220a      	movs	r2, #10
 8006e7a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e90:	2300      	movs	r3, #0
 8006e92:	2200      	movs	r2, #0
 8006e94:	f001 fc88 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      break;
 8006e98:	e0d8      	b.n	800704c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d03f      	beq.n	8006f24 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	e016      	b.n	8006ee0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006eb2:	7bfa      	ldrb	r2, [r7, #15]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	32de      	adds	r2, #222	; 0xde
 8006eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebc:	791a      	ldrb	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d108      	bne.n	8006eda <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006ec8:	7bfa      	ldrb	r2, [r7, #15]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32de      	adds	r2, #222	; 0xde
 8006ece:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006ed8:	e005      	b.n	8006ee6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	3301      	adds	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0e5      	beq.n	8006eb2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2206      	movs	r2, #6
 8006f06:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f0e:	2103      	movs	r1, #3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	e006      	b.n	8006f24 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	220d      	movs	r2, #13
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	e002      	b.n	8006f24 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	220d      	movs	r2, #13
 8006f22:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2205      	movs	r2, #5
 8006f28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f001 fc34 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      break;
 8006f40:	e084      	b.n	800704c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d017      	beq.n	8006f7c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d103      	bne.n	8006f6c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	220b      	movs	r2, #11
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	e00a      	b.n	8006f82 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d106      	bne.n	8006f82 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	220d      	movs	r2, #13
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	e002      	b.n	8006f82 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	220d      	movs	r2, #13
 8006f80:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2205      	movs	r2, #5
 8006f86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f96:	2300      	movs	r3, #0
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f001 fc05 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      break;
 8006f9e:	e055      	b.n	800704c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d04f      	beq.n	800704a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	4798      	blx	r3
      }
      break;
 8006fb6:	e048      	b.n	800704a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fcf7 	bl	80069b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d009      	beq.n	8006fe4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ff4:	2105      	movs	r1, #5
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	d107      	bne.n	8007016 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fdb0 	bl	8006b74 <USBH_Start>
 8007014:	e002      	b.n	800701c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f004 faa4 	bl	800b564 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007030:	2300      	movs	r3, #0
 8007032:	2200      	movs	r2, #0
 8007034:	f001 fbb8 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      break;
 8007038:	e008      	b.n	800704c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800703a:	bf00      	nop
 800703c:	e006      	b.n	800704c <USBH_Process+0x4b8>
      break;
 800703e:	bf00      	nop
 8007040:	e004      	b.n	800704c <USBH_Process+0x4b8>
      break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <USBH_Process+0x4b8>
    break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <USBH_Process+0x4b8>
      break;
 800704a:	bf00      	nop
  }
  return USBH_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop

08007058 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af04      	add	r7, sp, #16
 800705e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007064:	2301      	movs	r3, #1
 8007066:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b07      	cmp	r3, #7
 800706e:	f200 8208 	bhi.w	8007482 <USBH_HandleEnum+0x42a>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <USBH_HandleEnum+0x20>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007099 	.word	0x08007099
 800707c:	08007157 	.word	0x08007157
 8007080:	080071c1 	.word	0x080071c1
 8007084:	0800724f 	.word	0x0800724f
 8007088:	080072b9 	.word	0x080072b9
 800708c:	08007329 	.word	0x08007329
 8007090:	080073c5 	.word	0x080073c5
 8007094:	08007443 	.word	0x08007443
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007098:	2108      	movs	r1, #8
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 faec 	bl	8007678 <USBH_Get_DevDesc>
 80070a0:	4603      	mov	r3, r0
 80070a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d130      	bne.n	800710c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7919      	ldrb	r1, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070ce:	b292      	uxth	r2, r2
 80070d0:	9202      	str	r2, [sp, #8]
 80070d2:	2200      	movs	r2, #0
 80070d4:	9201      	str	r2, [sp, #4]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	4603      	mov	r3, r0
 80070da:	2280      	movs	r2, #128	; 0x80
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f905 	bl	80082ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7959      	ldrb	r1, [r3, #5]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070f6:	b292      	uxth	r2, r2
 80070f8:	9202      	str	r2, [sp, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	9201      	str	r2, [sp, #4]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4603      	mov	r3, r0
 8007102:	2200      	movs	r2, #0
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f8f1 	bl	80082ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800710a:	e1bc      	b.n	8007486 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	2b03      	cmp	r3, #3
 8007110:	f040 81b9 	bne.w	8007486 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800711a:	3301      	adds	r3, #1
 800711c:	b2da      	uxtb	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800712a:	2b03      	cmp	r3, #3
 800712c:	d903      	bls.n	8007136 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	220d      	movs	r2, #13
 8007132:	701a      	strb	r2, [r3, #0]
      break;
 8007134:	e1a7      	b.n	8007486 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	795b      	ldrb	r3, [r3, #5]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f925 	bl	800838c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	791b      	ldrb	r3, [r3, #4]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 f91f 	bl	800838c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	701a      	strb	r2, [r3, #0]
      break;
 8007154:	e197      	b.n	8007486 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007156:	2112      	movs	r1, #18
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa8d 	bl	8007678 <USBH_Get_DevDesc>
 800715e:	4603      	mov	r3, r0
 8007160:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800716e:	e18c      	b.n	800748a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	2b03      	cmp	r3, #3
 8007174:	f040 8189 	bne.w	800748a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800717e:	3301      	adds	r3, #1
 8007180:	b2da      	uxtb	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800718e:	2b03      	cmp	r3, #3
 8007190:	d903      	bls.n	800719a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	220d      	movs	r2, #13
 8007196:	701a      	strb	r2, [r3, #0]
      break;
 8007198:	e177      	b.n	800748a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	795b      	ldrb	r3, [r3, #5]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f8f3 	bl	800838c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	791b      	ldrb	r3, [r3, #4]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f8ed 	bl	800838c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
      break;
 80071be:	e164      	b.n	800748a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80071c0:	2101      	movs	r1, #1
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fb04 	bl	80077d0 <USBH_SetAddress>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d132      	bne.n	8007238 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80071d2:	2002      	movs	r0, #2
 80071d4:	f004 fb5e 	bl	800b894 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2203      	movs	r2, #3
 80071e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7919      	ldrb	r1, [r3, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071fa:	b292      	uxth	r2, r2
 80071fc:	9202      	str	r2, [sp, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	9201      	str	r2, [sp, #4]
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	4603      	mov	r3, r0
 8007206:	2280      	movs	r2, #128	; 0x80
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f86f 	bl	80082ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7959      	ldrb	r1, [r3, #5]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007222:	b292      	uxth	r2, r2
 8007224:	9202      	str	r2, [sp, #8]
 8007226:	2200      	movs	r2, #0
 8007228:	9201      	str	r2, [sp, #4]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	4603      	mov	r3, r0
 800722e:	2200      	movs	r2, #0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f85b 	bl	80082ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007236:	e12a      	b.n	800748e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b03      	cmp	r3, #3
 800723c:	f040 8127 	bne.w	800748e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	220d      	movs	r2, #13
 8007244:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	705a      	strb	r2, [r3, #1]
      break;
 800724c:	e11f      	b.n	800748e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800724e:	2109      	movs	r1, #9
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa39 	bl	80076c8 <USBH_Get_CfgDesc>
 8007256:	4603      	mov	r3, r0
 8007258:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d103      	bne.n	8007268 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2204      	movs	r2, #4
 8007264:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007266:	e114      	b.n	8007492 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b03      	cmp	r3, #3
 800726c:	f040 8111 	bne.w	8007492 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007276:	3301      	adds	r3, #1
 8007278:	b2da      	uxtb	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007286:	2b03      	cmp	r3, #3
 8007288:	d903      	bls.n	8007292 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	220d      	movs	r2, #13
 800728e:	701a      	strb	r2, [r3, #0]
      break;
 8007290:	e0ff      	b.n	8007492 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	795b      	ldrb	r3, [r3, #5]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f877 	bl	800838c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	791b      	ldrb	r3, [r3, #4]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 f871 	bl	800838c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	701a      	strb	r2, [r3, #0]
      break;
 80072b6:	e0ec      	b.n	8007492 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa01 	bl	80076c8 <USBH_Get_CfgDesc>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d103      	bne.n	80072d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2205      	movs	r2, #5
 80072d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072d6:	e0de      	b.n	8007496 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	f040 80db 	bne.w	8007496 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072e6:	3301      	adds	r3, #1
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d903      	bls.n	8007302 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	220d      	movs	r2, #13
 80072fe:	701a      	strb	r2, [r3, #0]
      break;
 8007300:	e0c9      	b.n	8007496 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	795b      	ldrb	r3, [r3, #5]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f83f 	bl	800838c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	791b      	ldrb	r3, [r3, #4]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 f839 	bl	800838c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
      break;
 8007326:	e0b6      	b.n	8007496 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800732e:	2b00      	cmp	r3, #0
 8007330:	d036      	beq.n	80073a0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800733e:	23ff      	movs	r3, #255	; 0xff
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f9e5 	bl	8007710 <USBH_Get_StringDesc>
 8007346:	4603      	mov	r3, r0
 8007348:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d111      	bne.n	8007374 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2206      	movs	r2, #6
 8007354:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2205      	movs	r2, #5
 800735a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800736a:	2300      	movs	r3, #0
 800736c:	2200      	movs	r2, #0
 800736e:	f001 fa1b 	bl	80087a8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007372:	e092      	b.n	800749a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	2b03      	cmp	r3, #3
 8007378:	f040 808f 	bne.w	800749a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2206      	movs	r2, #6
 8007380:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2205      	movs	r2, #5
 8007386:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007396:	2300      	movs	r3, #0
 8007398:	2200      	movs	r2, #0
 800739a:	f001 fa05 	bl	80087a8 <osMessageQueuePut>
      break;
 800739e:	e07c      	b.n	800749a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2206      	movs	r2, #6
 80073a4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2205      	movs	r2, #5
 80073aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80073ba:	2300      	movs	r3, #0
 80073bc:	2200      	movs	r2, #0
 80073be:	f001 f9f3 	bl	80087a8 <osMessageQueuePut>
      break;
 80073c2:	e06a      	b.n	800749a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d027      	beq.n	800741e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073da:	23ff      	movs	r3, #255	; 0xff
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f997 	bl	8007710 <USBH_Get_StringDesc>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2207      	movs	r2, #7
 80073f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073f2:	e054      	b.n	800749e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d151      	bne.n	800749e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2207      	movs	r2, #7
 80073fe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2205      	movs	r2, #5
 8007404:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007414:	2300      	movs	r3, #0
 8007416:	2200      	movs	r2, #0
 8007418:	f001 f9c6 	bl	80087a8 <osMessageQueuePut>
      break;
 800741c:	e03f      	b.n	800749e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2207      	movs	r2, #7
 8007422:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2205      	movs	r2, #5
 8007428:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007438:	2300      	movs	r3, #0
 800743a:	2200      	movs	r2, #0
 800743c:	f001 f9b4 	bl	80087a8 <osMessageQueuePut>
      break;
 8007440:	e02d      	b.n	800749e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007448:	2b00      	cmp	r3, #0
 800744a:	d017      	beq.n	800747c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007458:	23ff      	movs	r3, #255	; 0xff
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f958 	bl	8007710 <USBH_Get_StringDesc>
 8007460:	4603      	mov	r3, r0
 8007462:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d102      	bne.n	8007470 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800746e:	e018      	b.n	80074a2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b03      	cmp	r3, #3
 8007474:	d115      	bne.n	80074a2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
      break;
 800747a:	e012      	b.n	80074a2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	73fb      	strb	r3, [r7, #15]
      break;
 8007480:	e00f      	b.n	80074a2 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007482:	bf00      	nop
 8007484:	e00e      	b.n	80074a4 <USBH_HandleEnum+0x44c>
      break;
 8007486:	bf00      	nop
 8007488:	e00c      	b.n	80074a4 <USBH_HandleEnum+0x44c>
      break;
 800748a:	bf00      	nop
 800748c:	e00a      	b.n	80074a4 <USBH_HandleEnum+0x44c>
      break;
 800748e:	bf00      	nop
 8007490:	e008      	b.n	80074a4 <USBH_HandleEnum+0x44c>
      break;
 8007492:	bf00      	nop
 8007494:	e006      	b.n	80074a4 <USBH_HandleEnum+0x44c>
      break;
 8007496:	bf00      	nop
 8007498:	e004      	b.n	80074a4 <USBH_HandleEnum+0x44c>
      break;
 800749a:	bf00      	nop
 800749c:	e002      	b.n	80074a4 <USBH_HandleEnum+0x44c>
      break;
 800749e:	bf00      	nop
 80074a0:	e000      	b.n	80074a4 <USBH_HandleEnum+0x44c>
      break;
 80074a2:	bf00      	nop
  }
  return Status;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop

080074b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f804 	bl	80074f2 <USBH_HandleSof>
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b0b      	cmp	r3, #11
 8007502:	d10a      	bne.n	800751a <USBH_HandleSof+0x28>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
  }
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007546:	2300      	movs	r3, #0
 8007548:	2200      	movs	r2, #0
 800754a:	f001 f92d 	bl	80087a8 <osMessageQueuePut>
#endif
#endif

  return;
 800754e:	bf00      	nop
}
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007566:	bf00      	nop
}
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075a6:	2300      	movs	r3, #0
 80075a8:	2200      	movs	r2, #0
 80075aa:	f001 f8fd 	bl	80087a8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f003 ffde 	bl	800b59a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fed1 	bl	800838c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	795b      	ldrb	r3, [r3, #5]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fecb 	bl	800838c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800760a:	2300      	movs	r3, #0
 800760c:	2200      	movs	r2, #0
 800760e:	f001 f8cb 	bl	80087a8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007630:	f04f 33ff 	mov.w	r3, #4294967295
 8007634:	2200      	movs	r2, #0
 8007636:	f001 f92b 	bl	8008890 <osMessageQueueGet>
 800763a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f0      	bne.n	8007624 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff faa6 	bl	8006b94 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007648:	e7ec      	b.n	8007624 <USBH_Process_OS+0x8>

0800764a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007666:	2300      	movs	r3, #0
 8007668:	2200      	movs	r2, #0
 800766a:	f001 f89d 	bl	80087a8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af02      	add	r7, sp, #8
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	b29b      	uxth	r3, r3
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007696:	2100      	movs	r1, #0
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f864 	bl	8007766 <USBH_GetDescriptor>
 800769e:	4603      	mov	r3, r0
 80076a0:	73fb      	strb	r3, [r7, #15]
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076b4:	78fa      	ldrb	r2, [r7, #3]
 80076b6:	b292      	uxth	r2, r2
 80076b8:	4619      	mov	r1, r3
 80076ba:	f000 f918 	bl	80078ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	331c      	adds	r3, #28
 80076d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e4:	2100      	movs	r1, #0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f83d 	bl	8007766 <USBH_GetDescriptor>
 80076ec:	4603      	mov	r3, r0
 80076ee:	72fb      	strb	r3, [r7, #11]
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d107      	bne.n	8007706 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076fc:	887a      	ldrh	r2, [r7, #2]
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f964 	bl	80079ce <USBH_ParseCfgDesc>
  }

  return status;
 8007706:	7afb      	ldrb	r3, [r7, #11]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af02      	add	r7, sp, #8
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	461a      	mov	r2, r3
 800771c:	460b      	mov	r3, r1
 800771e:	72fb      	strb	r3, [r7, #11]
 8007720:	4613      	mov	r3, r2
 8007722:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800772c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007734:	893b      	ldrh	r3, [r7, #8]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	460b      	mov	r3, r1
 800773a:	2100      	movs	r1, #0
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f812 	bl	8007766 <USBH_GetDescriptor>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007752:	893a      	ldrh	r2, [r7, #8]
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fa37 	bl	8007bca <USBH_ParseStringDesc>
  }

  return status;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	607b      	str	r3, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	72fb      	strb	r3, [r7, #11]
 8007774:	4613      	mov	r3, r2
 8007776:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	789b      	ldrb	r3, [r3, #2]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d11c      	bne.n	80077ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007786:	b2da      	uxtb	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2206      	movs	r2, #6
 8007790:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	893a      	ldrh	r2, [r7, #8]
 8007796:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007798:	893b      	ldrh	r3, [r7, #8]
 800779a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800779e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a2:	d104      	bne.n	80077ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f240 4209 	movw	r2, #1033	; 0x409
 80077aa:	829a      	strh	r2, [r3, #20]
 80077ac:	e002      	b.n	80077b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8b3a      	ldrh	r2, [r7, #24]
 80077b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80077ba:	8b3b      	ldrh	r3, [r7, #24]
 80077bc:	461a      	mov	r2, r3
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fa50 	bl	8007c66 <USBH_CtlReq>
 80077c6:	4603      	mov	r3, r0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	789b      	ldrb	r3, [r3, #2]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d10f      	bne.n	8007804 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2205      	movs	r2, #5
 80077ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007804:	2200      	movs	r2, #0
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fa2c 	bl	8007c66 <USBH_CtlReq>
 800780e:	4603      	mov	r3, r0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	789b      	ldrb	r3, [r3, #2]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d10e      	bne.n	800784a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2209      	movs	r2, #9
 8007836:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	887a      	ldrh	r2, [r7, #2]
 800783c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa09 	bl	8007c66 <USBH_CtlReq>
 8007854:	4603      	mov	r3, r0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	789b      	ldrb	r3, [r3, #2]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d10f      	bne.n	8007892 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2203      	movs	r2, #3
 800787c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	b29a      	uxth	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007892:	2200      	movs	r2, #0
 8007894:	2100      	movs	r1, #0
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f9e5 	bl	8007c66 <USBH_CtlReq>
 800789c:	4603      	mov	r3, r0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	789b      	ldrb	r3, [r3, #2]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10f      	bne.n	80078da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9c1 	bl	8007c66 <USBH_CtlReq>
 80078e4:	4603      	mov	r3, r0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	4613      	mov	r3, r2
 80078fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	785a      	ldrb	r2, [r3, #1]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3302      	adds	r3, #2
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	b29a      	uxth	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	3303      	adds	r3, #3
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	b29b      	uxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	791a      	ldrb	r2, [r3, #4]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	795a      	ldrb	r2, [r3, #5]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	799a      	ldrb	r2, [r3, #6]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	79da      	ldrb	r2, [r3, #7]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	2b08      	cmp	r3, #8
 800794c:	d939      	bls.n	80079c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3308      	adds	r3, #8
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	b29a      	uxth	r2, r3
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	3309      	adds	r3, #9
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	4313      	orrs	r3, r2
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	330a      	adds	r3, #10
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	b29a      	uxth	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	330b      	adds	r3, #11
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	b29b      	uxth	r3, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	330c      	adds	r3, #12
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b29a      	uxth	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	330d      	adds	r3, #13
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	b29b      	uxth	r3, r3
 800799a:	4313      	orrs	r3, r2
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	7b9a      	ldrb	r2, [r3, #14]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	7bda      	ldrb	r2, [r3, #15]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	7c1a      	ldrb	r2, [r3, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	7c5a      	ldrb	r2, [r3, #17]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	745a      	strb	r2, [r3, #17]
  }
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b08a      	sub	sp, #40	; 0x28
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	4613      	mov	r3, r2
 80079da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	785a      	ldrb	r2, [r3, #1]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3302      	adds	r3, #2
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	3303      	adds	r3, #3
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	791a      	ldrb	r2, [r3, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	795a      	ldrb	r2, [r3, #5]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	799a      	ldrb	r2, [r3, #6]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	79da      	ldrb	r2, [r3, #7]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	7a1a      	ldrb	r2, [r3, #8]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	2b09      	cmp	r3, #9
 8007a48:	d95f      	bls.n	8007b0a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a4a:	2309      	movs	r3, #9
 8007a4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a52:	e051      	b.n	8007af8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a54:	f107 0316 	add.w	r3, r7, #22
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a5c:	f000 f8e8 	bl	8007c30 <USBH_GetNextDesc>
 8007a60:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d146      	bne.n	8007af8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a6e:	221a      	movs	r2, #26
 8007a70:	fb02 f303 	mul.w	r3, r2, r3
 8007a74:	3308      	adds	r3, #8
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	3302      	adds	r3, #2
 8007a7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a80:	69f8      	ldr	r0, [r7, #28]
 8007a82:	f000 f846 	bl	8007b12 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a90:	e022      	b.n	8007ad8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a92:	f107 0316 	add.w	r3, r7, #22
 8007a96:	4619      	mov	r1, r3
 8007a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a9a:	f000 f8c9 	bl	8007c30 <USBH_GetNextDesc>
 8007a9e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b05      	cmp	r3, #5
 8007aa6:	d117      	bne.n	8007ad8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	00d2      	lsls	r2, r2, #3
 8007ab4:	211a      	movs	r1, #26
 8007ab6:	fb01 f303 	mul.w	r3, r1, r3
 8007aba:	4413      	add	r3, r2
 8007abc:	3308      	adds	r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ac8:	69b8      	ldr	r0, [r7, #24]
 8007aca:	f000 f851 	bl	8007b70 <USBH_ParseEPDesc>
            ep_ix++;
 8007ace:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	791b      	ldrb	r3, [r3, #4]
 8007adc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d204      	bcs.n	8007aee <USBH_ParseCfgDesc+0x120>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	885a      	ldrh	r2, [r3, #2]
 8007ae8:	8afb      	ldrh	r3, [r7, #22]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d8d1      	bhi.n	8007a92 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007af2:	3301      	adds	r3, #1
 8007af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d804      	bhi.n	8007b0a <USBH_ParseCfgDesc+0x13c>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	885a      	ldrh	r2, [r3, #2]
 8007b04:	8afb      	ldrh	r3, [r7, #22]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d8a4      	bhi.n	8007a54 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	3728      	adds	r7, #40	; 0x28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785a      	ldrb	r2, [r3, #1]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	789a      	ldrb	r2, [r3, #2]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	78da      	ldrb	r2, [r3, #3]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	791a      	ldrb	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	795a      	ldrb	r2, [r3, #5]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	799a      	ldrb	r2, [r3, #6]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	79da      	ldrb	r2, [r3, #7]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	7a1a      	ldrb	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	721a      	strb	r2, [r3, #8]
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781a      	ldrb	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	785a      	ldrb	r2, [r3, #1]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	789a      	ldrb	r2, [r3, #2]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	78da      	ldrb	r2, [r3, #3]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	3305      	adds	r3, #5
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	799a      	ldrb	r2, [r3, #6]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	719a      	strb	r2, [r3, #6]
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d120      	bne.n	8007c24 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	1e9a      	subs	r2, r3, #2
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bf28      	it	cs
 8007bee:	4613      	movcs	r3, r2
 8007bf0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	82fb      	strh	r3, [r7, #22]
 8007bfc:	e00b      	b.n	8007c16 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007bfe:	8afb      	ldrh	r3, [r7, #22]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c10:	8afb      	ldrh	r3, [r7, #22]
 8007c12:	3302      	adds	r3, #2
 8007c14:	82fb      	strh	r3, [r7, #22]
 8007c16:	8afa      	ldrh	r2, [r7, #22]
 8007c18:	8abb      	ldrh	r3, [r7, #20]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d3ef      	bcc.n	8007bfe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]
  }
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	881a      	ldrh	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	4413      	add	r3, r2
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c58:	68fb      	ldr	r3, [r7, #12]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b086      	sub	sp, #24
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	4613      	mov	r3, r2
 8007c72:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c74:	2301      	movs	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	789b      	ldrb	r3, [r3, #2]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d002      	beq.n	8007c86 <USBH_CtlReq+0x20>
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d01d      	beq.n	8007cc0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007c84:	e043      	b.n	8007d0e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	88fa      	ldrh	r2, [r7, #6]
 8007c90:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2203      	movs	r2, #3
 8007ca6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f000 fd75 	bl	80087a8 <osMessageQueuePut>
      break;
 8007cbe:	e026      	b.n	8007d0e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f829 	bl	8007d18 <USBH_HandleControl>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <USBH_CtlReq+0x70>
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d106      	bne.n	8007ce4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	761a      	strb	r2, [r3, #24]
 8007ce2:	e005      	b.n	8007cf0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d102      	bne.n	8007cf0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d04:	2300      	movs	r3, #0
 8007d06:	2200      	movs	r2, #0
 8007d08:	f000 fd4e 	bl	80087a8 <osMessageQueuePut>
      break;
 8007d0c:	bf00      	nop
  }
  return status;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d20:	2301      	movs	r3, #1
 8007d22:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7e1b      	ldrb	r3, [r3, #24]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	2b0a      	cmp	r3, #10
 8007d30:	f200 822b 	bhi.w	800818a <USBH_HandleControl+0x472>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <USBH_HandleControl+0x24>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	08007d83 	.word	0x08007d83
 8007d44:	08007e25 	.word	0x08007e25
 8007d48:	08007e4b 	.word	0x08007e4b
 8007d4c:	08007ed7 	.word	0x08007ed7
 8007d50:	08007f03 	.word	0x08007f03
 8007d54:	08007fc5 	.word	0x08007fc5
 8007d58:	08007fe7 	.word	0x08007fe7
 8007d5c:	08008079 	.word	0x08008079
 8007d60:	080080a1 	.word	0x080080a1
 8007d64:	08008133 	.word	0x08008133
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f103 0110 	add.w	r1, r3, #16
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	795b      	ldrb	r3, [r3, #5]
 8007d72:	461a      	mov	r2, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fa19 	bl	80081ac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	761a      	strb	r2, [r3, #24]
      break;
 8007d80:	e20e      	b.n	80081a0 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	795b      	ldrb	r3, [r3, #5]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f003 fcf3 	bl	800b774 <USBH_LL_GetURBState>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d12c      	bne.n	8007df2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7c1b      	ldrb	r3, [r3, #16]
 8007d9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007da0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8adb      	ldrh	r3, [r3, #22]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007daa:	7b7b      	ldrb	r3, [r7, #13]
 8007dac:	2b80      	cmp	r3, #128	; 0x80
 8007dae:	d103      	bne.n	8007db8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2203      	movs	r2, #3
 8007db4:	761a      	strb	r2, [r3, #24]
 8007db6:	e00d      	b.n	8007dd4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2205      	movs	r2, #5
 8007dbc:	761a      	strb	r2, [r3, #24]
 8007dbe:	e009      	b.n	8007dd4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007dc0:	7b7b      	ldrb	r3, [r7, #13]
 8007dc2:	2b80      	cmp	r3, #128	; 0x80
 8007dc4:	d103      	bne.n	8007dce <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2209      	movs	r2, #9
 8007dca:	761a      	strb	r2, [r3, #24]
 8007dcc:	e002      	b.n	8007dd4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007de8:	2300      	movs	r3, #0
 8007dea:	2200      	movs	r2, #0
 8007dec:	f000 fcdc 	bl	80087a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007df0:	e1cd      	b.n	800818e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d003      	beq.n	8007e00 <USBH_HandleControl+0xe8>
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	f040 81c7 	bne.w	800818e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	220b      	movs	r2, #11
 8007e04:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2203      	movs	r2, #3
 8007e0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f000 fcc3 	bl	80087a8 <osMessageQueuePut>
      break;
 8007e22:	e1b4      	b.n	800818e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6899      	ldr	r1, [r3, #8]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	899a      	ldrh	r2, [r3, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	791b      	ldrb	r3, [r3, #4]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f9f4 	bl	800822a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2204      	movs	r2, #4
 8007e46:	761a      	strb	r2, [r3, #24]
      break;
 8007e48:	e1aa      	b.n	80081a0 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f003 fc8f 	bl	800b774 <USBH_LL_GetURBState>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d110      	bne.n	8007e82 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2209      	movs	r2, #9
 8007e64:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2203      	movs	r2, #3
 8007e6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f000 fc93 	bl	80087a8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b05      	cmp	r3, #5
 8007e86:	d110      	bne.n	8007eaa <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2203      	movs	r2, #3
 8007e90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f000 fc80 	bl	80087a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ea8:	e173      	b.n	8008192 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	f040 8170 	bne.w	8008192 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	220b      	movs	r2, #11
 8007eb6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2203      	movs	r2, #3
 8007ebc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f000 fc6a 	bl	80087a8 <osMessageQueuePut>
      break;
 8007ed4:	e15d      	b.n	8008192 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6899      	ldr	r1, [r3, #8]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	899a      	ldrh	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	7958      	ldrb	r0, [r3, #5]
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f979 	bl	80081e0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2206      	movs	r2, #6
 8007efe:	761a      	strb	r2, [r3, #24]
      break;
 8007f00:	e14e      	b.n	80081a0 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	795b      	ldrb	r3, [r3, #5]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f003 fc33 	bl	800b774 <USBH_LL_GetURBState>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d111      	bne.n	8007f3c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2207      	movs	r2, #7
 8007f1c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2203      	movs	r2, #3
 8007f22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f32:	2300      	movs	r3, #0
 8007f34:	2200      	movs	r2, #0
 8007f36:	f000 fc37 	bl	80087a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f3a:	e12c      	b.n	8008196 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	2b05      	cmp	r3, #5
 8007f40:	d113      	bne.n	8007f6a <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	220c      	movs	r2, #12
 8007f46:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f60:	2300      	movs	r3, #0
 8007f62:	2200      	movs	r2, #0
 8007f64:	f000 fc20 	bl	80087a8 <osMessageQueuePut>
      break;
 8007f68:	e115      	b.n	8008196 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d111      	bne.n	8007f94 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2205      	movs	r2, #5
 8007f74:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2203      	movs	r2, #3
 8007f7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f000 fc0b 	bl	80087a8 <osMessageQueuePut>
      break;
 8007f92:	e100      	b.n	8008196 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	f040 80fd 	bne.w	8008196 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	220b      	movs	r2, #11
 8007fa0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2203      	movs	r2, #3
 8007faa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f000 fbf3 	bl	80087a8 <osMessageQueuePut>
      break;
 8007fc2:	e0e8      	b.n	8008196 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	791b      	ldrb	r3, [r3, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f92c 	bl	800822a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	761a      	strb	r2, [r3, #24]

      break;
 8007fe4:	e0dc      	b.n	80081a0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	791b      	ldrb	r3, [r3, #4]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f003 fbc1 	bl	800b774 <USBH_LL_GetURBState>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d113      	bne.n	8008024 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	220d      	movs	r2, #13
 8008000:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2203      	movs	r2, #3
 800800a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800801a:	2300      	movs	r3, #0
 800801c:	2200      	movs	r2, #0
 800801e:	f000 fbc3 	bl	80087a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008022:	e0ba      	b.n	800819a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b04      	cmp	r3, #4
 8008028:	d111      	bne.n	800804e <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	220b      	movs	r2, #11
 800802e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2203      	movs	r2, #3
 8008034:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008044:	2300      	movs	r3, #0
 8008046:	2200      	movs	r2, #0
 8008048:	f000 fbae 	bl	80087a8 <osMessageQueuePut>
      break;
 800804c:	e0a5      	b.n	800819a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b05      	cmp	r3, #5
 8008052:	f040 80a2 	bne.w	800819a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8008056:	2303      	movs	r3, #3
 8008058:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2203      	movs	r2, #3
 800805e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800806e:	2300      	movs	r3, #0
 8008070:	2200      	movs	r2, #0
 8008072:	f000 fb99 	bl	80087a8 <osMessageQueuePut>
      break;
 8008076:	e090      	b.n	800819a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	795a      	ldrb	r2, [r3, #5]
 800807c:	2301      	movs	r3, #1
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8aa 	bl	80081e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	220a      	movs	r2, #10
 800809c:	761a      	strb	r2, [r3, #24]
      break;
 800809e:	e07f      	b.n	80081a0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	795b      	ldrb	r3, [r3, #5]
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f003 fb64 	bl	800b774 <USBH_LL_GetURBState>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d113      	bne.n	80080de <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	220d      	movs	r2, #13
 80080be:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2203      	movs	r2, #3
 80080c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080d4:	2300      	movs	r3, #0
 80080d6:	2200      	movs	r2, #0
 80080d8:	f000 fb66 	bl	80087a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080dc:	e05f      	b.n	800819e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d111      	bne.n	8008108 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2209      	movs	r2, #9
 80080e8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2203      	movs	r2, #3
 80080ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080fe:	2300      	movs	r3, #0
 8008100:	2200      	movs	r2, #0
 8008102:	f000 fb51 	bl	80087a8 <osMessageQueuePut>
      break;
 8008106:	e04a      	b.n	800819e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	2b04      	cmp	r3, #4
 800810c:	d147      	bne.n	800819e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	220b      	movs	r2, #11
 8008112:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2203      	movs	r2, #3
 8008118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008128:	2300      	movs	r3, #0
 800812a:	2200      	movs	r2, #0
 800812c:	f000 fb3c 	bl	80087a8 <osMessageQueuePut>
      break;
 8008130:	e035      	b.n	800819e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	7e5b      	ldrb	r3, [r3, #25]
 8008136:	3301      	adds	r3, #1
 8008138:	b2da      	uxtb	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	765a      	strb	r2, [r3, #25]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7e5b      	ldrb	r3, [r3, #25]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d806      	bhi.n	8008154 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008152:	e025      	b.n	80081a0 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800815a:	2106      	movs	r1, #6
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	795b      	ldrb	r3, [r3, #5]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f90d 	bl	800838c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	791b      	ldrb	r3, [r3, #4]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f907 	bl	800838c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008184:	2302      	movs	r3, #2
 8008186:	73fb      	strb	r3, [r7, #15]
      break;
 8008188:	e00a      	b.n	80081a0 <USBH_HandleControl+0x488>

    default:
      break;
 800818a:	bf00      	nop
 800818c:	e008      	b.n	80081a0 <USBH_HandleControl+0x488>
      break;
 800818e:	bf00      	nop
 8008190:	e006      	b.n	80081a0 <USBH_HandleControl+0x488>
      break;
 8008192:	bf00      	nop
 8008194:	e004      	b.n	80081a0 <USBH_HandleControl+0x488>
      break;
 8008196:	bf00      	nop
 8008198:	e002      	b.n	80081a0 <USBH_HandleControl+0x488>
      break;
 800819a:	bf00      	nop
 800819c:	e000      	b.n	80081a0 <USBH_HandleControl+0x488>
      break;
 800819e:	bf00      	nop
  }

  return status;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop

080081ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af04      	add	r7, sp, #16
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80081ba:	79f9      	ldrb	r1, [r7, #7]
 80081bc:	2300      	movs	r3, #0
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	2308      	movs	r3, #8
 80081c2:	9302      	str	r3, [sp, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	2300      	movs	r3, #0
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	2300      	movs	r3, #0
 80081ce:	2200      	movs	r2, #0
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f003 fa9e 	bl	800b712 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af04      	add	r7, sp, #16
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	460b      	mov	r3, r1
 80081f0:	80fb      	strh	r3, [r7, #6]
 80081f2:	4613      	mov	r3, r2
 80081f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008204:	7979      	ldrb	r1, [r7, #5]
 8008206:	7e3b      	ldrb	r3, [r7, #24]
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	2301      	movs	r3, #1
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	2300      	movs	r3, #0
 8008218:	2200      	movs	r2, #0
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f003 fa79 	bl	800b712 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b088      	sub	sp, #32
 800822e:	af04      	add	r7, sp, #16
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	4611      	mov	r1, r2
 8008236:	461a      	mov	r2, r3
 8008238:	460b      	mov	r3, r1
 800823a:	80fb      	strh	r3, [r7, #6]
 800823c:	4613      	mov	r3, r2
 800823e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008240:	7979      	ldrb	r1, [r7, #5]
 8008242:	2300      	movs	r3, #0
 8008244:	9303      	str	r3, [sp, #12]
 8008246:	88fb      	ldrh	r3, [r7, #6]
 8008248:	9302      	str	r3, [sp, #8]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	2301      	movs	r3, #1
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	2201      	movs	r2, #1
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f003 fa5b 	bl	800b712 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800825c:	2300      	movs	r3, #0

}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b088      	sub	sp, #32
 800826a:	af04      	add	r7, sp, #16
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	4611      	mov	r1, r2
 8008272:	461a      	mov	r2, r3
 8008274:	460b      	mov	r3, r1
 8008276:	80fb      	strh	r3, [r7, #6]
 8008278:	4613      	mov	r3, r2
 800827a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800828a:	7979      	ldrb	r1, [r7, #5]
 800828c:	7e3b      	ldrb	r3, [r7, #24]
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	9302      	str	r3, [sp, #8]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	2301      	movs	r3, #1
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2302      	movs	r3, #2
 800829e:	2200      	movs	r2, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f003 fa36 	bl	800b712 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	460b      	mov	r3, r1
 80082c0:	80fb      	strh	r3, [r7, #6]
 80082c2:	4613      	mov	r3, r2
 80082c4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082c6:	7979      	ldrb	r1, [r7, #5]
 80082c8:	2300      	movs	r3, #0
 80082ca:	9303      	str	r3, [sp, #12]
 80082cc:	88fb      	ldrh	r3, [r7, #6]
 80082ce:	9302      	str	r3, [sp, #8]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	2301      	movs	r3, #1
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	2302      	movs	r3, #2
 80082da:	2201      	movs	r2, #1
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f003 fa18 	bl	800b712 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af04      	add	r7, sp, #16
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	4608      	mov	r0, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	461a      	mov	r2, r3
 80082fa:	4603      	mov	r3, r0
 80082fc:	70fb      	strb	r3, [r7, #3]
 80082fe:	460b      	mov	r3, r1
 8008300:	70bb      	strb	r3, [r7, #2]
 8008302:	4613      	mov	r3, r2
 8008304:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008306:	7878      	ldrb	r0, [r7, #1]
 8008308:	78ba      	ldrb	r2, [r7, #2]
 800830a:	78f9      	ldrb	r1, [r7, #3]
 800830c:	8b3b      	ldrh	r3, [r7, #24]
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	7d3b      	ldrb	r3, [r7, #20]
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	7c3b      	ldrb	r3, [r7, #16]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4603      	mov	r3, r0
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f003 f9ab 	bl	800b676 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f003 f9ca 	bl	800b6d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f836 	bl	80083c8 <USBH_GetFreePipe>
 800835c:	4603      	mov	r3, r0
 800835e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008360:	89fb      	ldrh	r3, [r7, #14]
 8008362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008366:	4293      	cmp	r3, r2
 8008368:	d00a      	beq.n	8008380 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800836a:	78fa      	ldrb	r2, [r7, #3]
 800836c:	89fb      	ldrh	r3, [r7, #14]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	33e0      	adds	r3, #224	; 0xe0
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008380:	89fb      	ldrh	r3, [r7, #14]
 8008382:	b2db      	uxtb	r3, r3
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	2b0a      	cmp	r3, #10
 800839c:	d80d      	bhi.n	80083ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	33e0      	adds	r3, #224	; 0xe0
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	33e0      	adds	r3, #224	; 0xe0
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
 80083d8:	e00f      	b.n	80083fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	33e0      	adds	r3, #224	; 0xe0
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	e007      	b.n	8008404 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	3301      	adds	r3, #1
 80083f8:	73fb      	strb	r3, [r7, #15]
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b0a      	cmp	r3, #10
 80083fe:	d9ec      	bls.n	80083da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008400:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008414:	bf00      	nop
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
	...

08008420 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008426:	f3ef 8305 	mrs	r3, IPSR
 800842a:	60bb      	str	r3, [r7, #8]
  return(result);
 800842c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10f      	bne.n	8008452 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008432:	f3ef 8310 	mrs	r3, PRIMASK
 8008436:	607b      	str	r3, [r7, #4]
  return(result);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800843e:	f3ef 8311 	mrs	r3, BASEPRI
 8008442:	603b      	str	r3, [r7, #0]
  return(result);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <osKernelInitialize+0x3a>
 800844a:	4b0e      	ldr	r3, [pc, #56]	; (8008484 <osKernelInitialize+0x64>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d103      	bne.n	800845a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008452:	f06f 0305 	mvn.w	r3, #5
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e00c      	b.n	8008474 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800845a:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <osKernelInitialize+0x64>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d105      	bne.n	800846e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008462:	4b08      	ldr	r3, [pc, #32]	; (8008484 <osKernelInitialize+0x64>)
 8008464:	2201      	movs	r2, #1
 8008466:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e002      	b.n	8008474 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800846e:	f04f 33ff 	mov.w	r3, #4294967295
 8008472:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	200000b8 	.word	0x200000b8

08008488 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800848e:	f3ef 8305 	mrs	r3, IPSR
 8008492:	60bb      	str	r3, [r7, #8]
  return(result);
 8008494:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800849a:	f3ef 8310 	mrs	r3, PRIMASK
 800849e:	607b      	str	r3, [r7, #4]
  return(result);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084a6:	f3ef 8311 	mrs	r3, BASEPRI
 80084aa:	603b      	str	r3, [r7, #0]
  return(result);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <osKernelStart+0x3a>
 80084b2:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <osKernelStart+0x68>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d103      	bne.n	80084c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80084ba:	f06f 0305 	mvn.w	r3, #5
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	e010      	b.n	80084e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <osKernelStart+0x68>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d109      	bne.n	80084de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084ca:	f7ff ffa1 	bl	8008410 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084ce:	4b08      	ldr	r3, [pc, #32]	; (80084f0 <osKernelStart+0x68>)
 80084d0:	2202      	movs	r2, #2
 80084d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084d4:	f001 fa9a 	bl	8009a0c <vTaskStartScheduler>
      stat = osOK;
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	e002      	b.n	80084e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80084de:	f04f 33ff 	mov.w	r3, #4294967295
 80084e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80084e4:	68fb      	ldr	r3, [r7, #12]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	200000b8 	.word	0x200000b8

080084f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b090      	sub	sp, #64	; 0x40
 80084f8:	af04      	add	r7, sp, #16
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008500:	2300      	movs	r3, #0
 8008502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008504:	f3ef 8305 	mrs	r3, IPSR
 8008508:	61fb      	str	r3, [r7, #28]
  return(result);
 800850a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800850c:	2b00      	cmp	r3, #0
 800850e:	f040 808f 	bne.w	8008630 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008512:	f3ef 8310 	mrs	r3, PRIMASK
 8008516:	61bb      	str	r3, [r7, #24]
  return(result);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d105      	bne.n	800852a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800851e:	f3ef 8311 	mrs	r3, BASEPRI
 8008522:	617b      	str	r3, [r7, #20]
  return(result);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <osThreadNew+0x3e>
 800852a:	4b44      	ldr	r3, [pc, #272]	; (800863c <osThreadNew+0x148>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d07e      	beq.n	8008630 <osThreadNew+0x13c>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d07b      	beq.n	8008630 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800853c:	2318      	movs	r3, #24
 800853e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008540:	2300      	movs	r3, #0
 8008542:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008544:	f04f 33ff 	mov.w	r3, #4294967295
 8008548:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d045      	beq.n	80085dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <osThreadNew+0x6a>
        name = attr->name;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	2b00      	cmp	r3, #0
 8008570:	d008      	beq.n	8008584 <osThreadNew+0x90>
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	2b38      	cmp	r3, #56	; 0x38
 8008576:	d805      	bhi.n	8008584 <osThreadNew+0x90>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <osThreadNew+0x94>
        return (NULL);
 8008584:	2300      	movs	r3, #0
 8008586:	e054      	b.n	8008632 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	089b      	lsrs	r3, r3, #2
 8008596:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00e      	beq.n	80085be <osThreadNew+0xca>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	2b5b      	cmp	r3, #91	; 0x5b
 80085a6:	d90a      	bls.n	80085be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <osThreadNew+0xca>
        mem = 1;
 80085b8:	2301      	movs	r3, #1
 80085ba:	623b      	str	r3, [r7, #32]
 80085bc:	e010      	b.n	80085e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10c      	bne.n	80085e0 <osThreadNew+0xec>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d108      	bne.n	80085e0 <osThreadNew+0xec>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d104      	bne.n	80085e0 <osThreadNew+0xec>
          mem = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	623b      	str	r3, [r7, #32]
 80085da:	e001      	b.n	80085e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d110      	bne.n	8008608 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085ee:	9202      	str	r2, [sp, #8]
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f001 f833 	bl	8009668 <xTaskCreateStatic>
 8008602:	4603      	mov	r3, r0
 8008604:	613b      	str	r3, [r7, #16]
 8008606:	e013      	b.n	8008630 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d110      	bne.n	8008630 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	b29a      	uxth	r2, r3
 8008612:	f107 0310 	add.w	r3, r7, #16
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f001 f87b 	bl	800971c <xTaskCreate>
 8008626:	4603      	mov	r3, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d001      	beq.n	8008630 <osThreadNew+0x13c>
          hTask = NULL;
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008630:	693b      	ldr	r3, [r7, #16]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3730      	adds	r7, #48	; 0x30
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	200000b8 	.word	0x200000b8

08008640 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008648:	f3ef 8305 	mrs	r3, IPSR
 800864c:	613b      	str	r3, [r7, #16]
  return(result);
 800864e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10f      	bne.n	8008674 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008654:	f3ef 8310 	mrs	r3, PRIMASK
 8008658:	60fb      	str	r3, [r7, #12]
  return(result);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d105      	bne.n	800866c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008660:	f3ef 8311 	mrs	r3, BASEPRI
 8008664:	60bb      	str	r3, [r7, #8]
  return(result);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <osDelay+0x3c>
 800866c:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <osDelay+0x58>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d103      	bne.n	800867c <osDelay+0x3c>
    stat = osErrorISR;
 8008674:	f06f 0305 	mvn.w	r3, #5
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	e007      	b.n	800868c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800867c:	2300      	movs	r3, #0
 800867e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f98c 	bl	80099a4 <vTaskDelay>
    }
  }

  return (stat);
 800868c:	697b      	ldr	r3, [r7, #20]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200000b8 	.word	0x200000b8

0800869c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b08c      	sub	sp, #48	; 0x30
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ac:	f3ef 8305 	mrs	r3, IPSR
 80086b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80086b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d170      	bne.n	800879a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b8:	f3ef 8310 	mrs	r3, PRIMASK
 80086bc:	617b      	str	r3, [r7, #20]
  return(result);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d105      	bne.n	80086d0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086c4:	f3ef 8311 	mrs	r3, BASEPRI
 80086c8:	613b      	str	r3, [r7, #16]
  return(result);
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <osMessageQueueNew+0x3c>
 80086d0:	4b34      	ldr	r3, [pc, #208]	; (80087a4 <osMessageQueueNew+0x108>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d060      	beq.n	800879a <osMessageQueueNew+0xfe>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d05d      	beq.n	800879a <osMessageQueueNew+0xfe>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d05a      	beq.n	800879a <osMessageQueueNew+0xfe>
    mem = -1;
 80086e4:	f04f 33ff 	mov.w	r3, #4294967295
 80086e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d029      	beq.n	8008744 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d012      	beq.n	800871e <osMessageQueueNew+0x82>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	2b4f      	cmp	r3, #79	; 0x4f
 80086fe:	d90e      	bls.n	800871e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695a      	ldr	r2, [r3, #20]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68b9      	ldr	r1, [r7, #8]
 8008710:	fb01 f303 	mul.w	r3, r1, r3
 8008714:	429a      	cmp	r2, r3
 8008716:	d302      	bcc.n	800871e <osMessageQueueNew+0x82>
        mem = 1;
 8008718:	2301      	movs	r3, #1
 800871a:	623b      	str	r3, [r7, #32]
 800871c:	e014      	b.n	8008748 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d110      	bne.n	8008748 <osMessageQueueNew+0xac>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10c      	bne.n	8008748 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008732:	2b00      	cmp	r3, #0
 8008734:	d108      	bne.n	8008748 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d104      	bne.n	8008748 <osMessageQueueNew+0xac>
          mem = 0;
 800873e:	2300      	movs	r3, #0
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	e001      	b.n	8008748 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d10c      	bne.n	8008768 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691a      	ldr	r2, [r3, #16]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6899      	ldr	r1, [r3, #8]
 8008756:	2300      	movs	r3, #0
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	460b      	mov	r3, r1
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 fa58 	bl	8008c14 <xQueueGenericCreateStatic>
 8008764:	6278      	str	r0, [r7, #36]	; 0x24
 8008766:	e008      	b.n	800877a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d105      	bne.n	800877a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800876e:	2200      	movs	r2, #0
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 fac1 	bl	8008cfa <xQueueGenericCreate>
 8008778:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00c      	beq.n	800879a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <osMessageQueueNew+0xf2>
        name = attr->name;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	e001      	b.n	8008792 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008792:	69f9      	ldr	r1, [r7, #28]
 8008794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008796:	f000 ff0b 	bl	80095b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800879c:	4618      	mov	r0, r3
 800879e:	3728      	adds	r7, #40	; 0x28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200000b8 	.word	0x200000b8

080087a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08a      	sub	sp, #40	; 0x28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	4613      	mov	r3, r2
 80087b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80087bc:	2300      	movs	r3, #0
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087c0:	f3ef 8305 	mrs	r3, IPSR
 80087c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80087c6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10f      	bne.n	80087ec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087cc:	f3ef 8310 	mrs	r3, PRIMASK
 80087d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087d8:	f3ef 8311 	mrs	r3, BASEPRI
 80087dc:	617b      	str	r3, [r7, #20]
  return(result);
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d02c      	beq.n	800883e <osMessageQueuePut+0x96>
 80087e4:	4b28      	ldr	r3, [pc, #160]	; (8008888 <osMessageQueuePut+0xe0>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d128      	bne.n	800883e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d005      	beq.n	80087fe <osMessageQueuePut+0x56>
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <osMessageQueuePut+0x56>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80087fe:	f06f 0303 	mvn.w	r3, #3
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008804:	e039      	b.n	800887a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800880a:	f107 0210 	add.w	r2, r7, #16
 800880e:	2300      	movs	r3, #0
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	6a38      	ldr	r0, [r7, #32]
 8008814:	f000 fbce 	bl	8008fb4 <xQueueGenericSendFromISR>
 8008818:	4603      	mov	r3, r0
 800881a:	2b01      	cmp	r3, #1
 800881c:	d003      	beq.n	8008826 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800881e:	f06f 0302 	mvn.w	r3, #2
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008824:	e029      	b.n	800887a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d026      	beq.n	800887a <osMessageQueuePut+0xd2>
 800882c:	4b17      	ldr	r3, [pc, #92]	; (800888c <osMessageQueuePut+0xe4>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800883c:	e01d      	b.n	800887a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <osMessageQueuePut+0xa2>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d103      	bne.n	8008852 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800884a:	f06f 0303 	mvn.w	r3, #3
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
 8008850:	e014      	b.n	800887c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008852:	2300      	movs	r3, #0
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	6a38      	ldr	r0, [r7, #32]
 800885a:	f000 fab1 	bl	8008dc0 <xQueueGenericSend>
 800885e:	4603      	mov	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d00b      	beq.n	800887c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800886a:	f06f 0301 	mvn.w	r3, #1
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
 8008870:	e004      	b.n	800887c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008872:	f06f 0302 	mvn.w	r3, #2
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
 8008878:	e000      	b.n	800887c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800887a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200000b8 	.word	0x200000b8
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008890:	b580      	push	{r7, lr}
 8008892:	b08a      	sub	sp, #40	; 0x28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a6:	f3ef 8305 	mrs	r3, IPSR
 80088aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80088ac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10f      	bne.n	80088d2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b2:	f3ef 8310 	mrs	r3, PRIMASK
 80088b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d105      	bne.n	80088ca <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088be:	f3ef 8311 	mrs	r3, BASEPRI
 80088c2:	617b      	str	r3, [r7, #20]
  return(result);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d02c      	beq.n	8008924 <osMessageQueueGet+0x94>
 80088ca:	4b28      	ldr	r3, [pc, #160]	; (800896c <osMessageQueueGet+0xdc>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d128      	bne.n	8008924 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <osMessageQueueGet+0x54>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <osMessageQueueGet+0x54>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80088e4:	f06f 0303 	mvn.w	r3, #3
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088ea:	e038      	b.n	800895e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80088f0:	f107 0310 	add.w	r3, r7, #16
 80088f4:	461a      	mov	r2, r3
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	6a38      	ldr	r0, [r7, #32]
 80088fa:	f000 fccb 	bl	8009294 <xQueueReceiveFromISR>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b01      	cmp	r3, #1
 8008902:	d003      	beq.n	800890c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008904:	f06f 0302 	mvn.w	r3, #2
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800890a:	e028      	b.n	800895e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d025      	beq.n	800895e <osMessageQueueGet+0xce>
 8008912:	4b17      	ldr	r3, [pc, #92]	; (8008970 <osMessageQueueGet+0xe0>)
 8008914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008922:	e01c      	b.n	800895e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <osMessageQueueGet+0xa0>
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d103      	bne.n	8008938 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008930:	f06f 0303 	mvn.w	r3, #3
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
 8008936:	e013      	b.n	8008960 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	6a38      	ldr	r0, [r7, #32]
 800893e:	f000 fbcd 	bl	80090dc <xQueueReceive>
 8008942:	4603      	mov	r3, r0
 8008944:	2b01      	cmp	r3, #1
 8008946:	d00b      	beq.n	8008960 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800894e:	f06f 0301 	mvn.w	r3, #1
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
 8008954:	e004      	b.n	8008960 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008956:	f06f 0302 	mvn.w	r3, #2
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
 800895c:	e000      	b.n	8008960 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800895e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008962:	4618      	mov	r0, r3
 8008964:	3728      	adds	r7, #40	; 0x28
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200000b8 	.word	0x200000b8
 8008970:	e000ed04 	.word	0xe000ed04

08008974 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4a07      	ldr	r2, [pc, #28]	; (80089a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008984:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	4a06      	ldr	r2, [pc, #24]	; (80089a4 <vApplicationGetIdleTaskMemory+0x30>)
 800898a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2280      	movs	r2, #128	; 0x80
 8008990:	601a      	str	r2, [r3, #0]
}
 8008992:	bf00      	nop
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	200000bc 	.word	0x200000bc
 80089a4:	20000118 	.word	0x20000118

080089a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a07      	ldr	r2, [pc, #28]	; (80089d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80089b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4a06      	ldr	r2, [pc, #24]	; (80089d8 <vApplicationGetTimerTaskMemory+0x30>)
 80089be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089c6:	601a      	str	r2, [r3, #0]
}
 80089c8:	bf00      	nop
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	20000318 	.word	0x20000318
 80089d8:	20000374 	.word	0x20000374

080089dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f103 0208 	add.w	r2, r3, #8
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f04f 32ff 	mov.w	r2, #4294967295
 80089f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f103 0208 	add.w	r2, r3, #8
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f103 0208 	add.w	r2, r3, #8
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a36:	b480      	push	{r7}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	601a      	str	r2, [r3, #0]
}
 8008a72:	bf00      	nop
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b085      	sub	sp, #20
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a94:	d103      	bne.n	8008a9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	e00c      	b.n	8008ab8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e002      	b.n	8008aac <vListInsert+0x2e>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d2f6      	bcs.n	8008aa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6892      	ldr	r2, [r2, #8]
 8008b06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6852      	ldr	r2, [r2, #4]
 8008b10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d103      	bne.n	8008b24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	1e5a      	subs	r2, r3, #1
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	60bb      	str	r3, [r7, #8]
 8008b6a:	e7fe      	b.n	8008b6a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008b6c:	f002 f8ce 	bl	800ad0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b78:	68f9      	ldr	r1, [r7, #12]
 8008b7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	441a      	add	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	441a      	add	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	22ff      	movs	r2, #255	; 0xff
 8008bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	22ff      	movs	r2, #255	; 0xff
 8008bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d114      	bne.n	8008bec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01a      	beq.n	8008c00 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3310      	adds	r3, #16
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 f99c 	bl	8009f0c <xTaskRemoveFromEventList>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d012      	beq.n	8008c00 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bda:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <xQueueGenericReset+0xcc>)
 8008bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	e009      	b.n	8008c00 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3310      	adds	r3, #16
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff fef3 	bl	80089dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3324      	adds	r3, #36	; 0x24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff feee 	bl	80089dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c00:	f002 f8b2 	bl	800ad68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c04:	2301      	movs	r3, #1
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	e000ed04 	.word	0xe000ed04

08008c14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08e      	sub	sp, #56	; 0x38
 8008c18:	af02      	add	r7, sp, #8
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d109      	bne.n	8008c3c <xQueueGenericCreateStatic+0x28>
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c3a:	e7fe      	b.n	8008c3a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <xQueueGenericCreateStatic+0x42>
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
 8008c54:	e7fe      	b.n	8008c54 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <xQueueGenericCreateStatic+0x4e>
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <xQueueGenericCreateStatic+0x52>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <xQueueGenericCreateStatic+0x54>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <xQueueGenericCreateStatic+0x6c>
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	623b      	str	r3, [r7, #32]
 8008c7e:	e7fe      	b.n	8008c7e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <xQueueGenericCreateStatic+0x78>
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <xQueueGenericCreateStatic+0x7c>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e000      	b.n	8008c92 <xQueueGenericCreateStatic+0x7e>
 8008c90:	2300      	movs	r3, #0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <xQueueGenericCreateStatic+0x96>
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	61fb      	str	r3, [r7, #28]
 8008ca8:	e7fe      	b.n	8008ca8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008caa:	2350      	movs	r3, #80	; 0x50
 8008cac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b50      	cmp	r3, #80	; 0x50
 8008cb2:	d009      	beq.n	8008cc8 <xQueueGenericCreateStatic+0xb4>
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	e7fe      	b.n	8008cc6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008cc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00d      	beq.n	8008cf0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cdc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 f844 	bl	8008d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3730      	adds	r7, #48	; 0x30
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b08a      	sub	sp, #40	; 0x28
 8008cfe:	af02      	add	r7, sp, #8
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	4613      	mov	r3, r2
 8008d06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d109      	bne.n	8008d22 <xQueueGenericCreate+0x28>
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	e7fe      	b.n	8008d20 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61fb      	str	r3, [r7, #28]
 8008d2c:	e004      	b.n	8008d38 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	fb02 f303 	mul.w	r3, r2, r3
 8008d36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	3350      	adds	r3, #80	; 0x50
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f002 f8ff 	bl	800af40 <pvPortMalloc>
 8008d42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d011      	beq.n	8008d6e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	3350      	adds	r3, #80	; 0x50
 8008d52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d5c:	79fa      	ldrb	r2, [r7, #7]
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	4613      	mov	r3, r2
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 f805 	bl	8008d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3720      	adds	r7, #32
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d103      	bne.n	8008d94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	e002      	b.n	8008d9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008da6:	2101      	movs	r1, #1
 8008da8:	69b8      	ldr	r0, [r7, #24]
 8008daa:	f7ff fecb 	bl	8008b44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	78fa      	ldrb	r2, [r7, #3]
 8008db2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08e      	sub	sp, #56	; 0x38
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d109      	bne.n	8008df0 <xQueueGenericSend+0x30>
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dee:	e7fe      	b.n	8008dee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <xQueueGenericSend+0x3e>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <xQueueGenericSend+0x42>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <xQueueGenericSend+0x44>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d109      	bne.n	8008e1c <xQueueGenericSend+0x5c>
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1a:	e7fe      	b.n	8008e1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d103      	bne.n	8008e2a <xQueueGenericSend+0x6a>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d101      	bne.n	8008e2e <xQueueGenericSend+0x6e>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e000      	b.n	8008e30 <xQueueGenericSend+0x70>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <xQueueGenericSend+0x88>
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	623b      	str	r3, [r7, #32]
 8008e46:	e7fe      	b.n	8008e46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e48:	f001 fa16 	bl	800a278 <xTaskGetSchedulerState>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d102      	bne.n	8008e58 <xQueueGenericSend+0x98>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <xQueueGenericSend+0x9c>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e000      	b.n	8008e5e <xQueueGenericSend+0x9e>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <xQueueGenericSend+0xb6>
 8008e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	e7fe      	b.n	8008e74 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e76:	f001 ff49 	bl	800ad0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d302      	bcc.n	8008e8c <xQueueGenericSend+0xcc>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d129      	bne.n	8008ee0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	68b9      	ldr	r1, [r7, #8]
 8008e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e92:	f000 fa7c 	bl	800938e <prvCopyDataToQueue>
 8008e96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	3324      	adds	r3, #36	; 0x24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f001 f831 	bl	8009f0c <xTaskRemoveFromEventList>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d013      	beq.n	8008ed8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008eb0:	4b3f      	ldr	r3, [pc, #252]	; (8008fb0 <xQueueGenericSend+0x1f0>)
 8008eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	e00a      	b.n	8008ed8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ec8:	4b39      	ldr	r3, [pc, #228]	; (8008fb0 <xQueueGenericSend+0x1f0>)
 8008eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ed8:	f001 ff46 	bl	800ad68 <vPortExitCritical>
				return pdPASS;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e063      	b.n	8008fa8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d103      	bne.n	8008eee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ee6:	f001 ff3f 	bl	800ad68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	e05c      	b.n	8008fa8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d106      	bne.n	8008f02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ef4:	f107 0314 	add.w	r3, r7, #20
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 f869 	bl	8009fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008efe:	2301      	movs	r3, #1
 8008f00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f02:	f001 ff31 	bl	800ad68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f06:	f000 fde5 	bl	8009ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f0a:	f001 feff 	bl	800ad0c <vPortEnterCritical>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f14:	b25b      	sxtb	r3, r3
 8008f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1a:	d103      	bne.n	8008f24 <xQueueGenericSend+0x164>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f2a:	b25b      	sxtb	r3, r3
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d103      	bne.n	8008f3a <xQueueGenericSend+0x17a>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f3a:	f001 ff15 	bl	800ad68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f3e:	1d3a      	adds	r2, r7, #4
 8008f40:	f107 0314 	add.w	r3, r7, #20
 8008f44:	4611      	mov	r1, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f001 f858 	bl	8009ffc <xTaskCheckForTimeOut>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d124      	bne.n	8008f9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f54:	f000 fb13 	bl	800957e <prvIsQueueFull>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d018      	beq.n	8008f90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	3310      	adds	r3, #16
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 ff82 	bl	8009e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f6e:	f000 fa9e 	bl	80094ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f72:	f000 fdbd 	bl	8009af0 <xTaskResumeAll>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f47f af7c 	bne.w	8008e76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008f7e:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <xQueueGenericSend+0x1f0>)
 8008f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	e772      	b.n	8008e76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f92:	f000 fa8c 	bl	80094ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f96:	f000 fdab 	bl	8009af0 <xTaskResumeAll>
 8008f9a:	e76c      	b.n	8008e76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f9e:	f000 fa86 	bl	80094ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fa2:	f000 fda5 	bl	8009af0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3738      	adds	r7, #56	; 0x38
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	e000ed04 	.word	0xe000ed04

08008fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08e      	sub	sp, #56	; 0x38
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <xQueueGenericSendFromISR+0x2c>
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fde:	e7fe      	b.n	8008fde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d103      	bne.n	8008fee <xQueueGenericSendFromISR+0x3a>
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <xQueueGenericSendFromISR+0x3e>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <xQueueGenericSendFromISR+0x40>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d109      	bne.n	800900c <xQueueGenericSendFromISR+0x58>
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	623b      	str	r3, [r7, #32]
 800900a:	e7fe      	b.n	800900a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d103      	bne.n	800901a <xQueueGenericSendFromISR+0x66>
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <xQueueGenericSendFromISR+0x6a>
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <xQueueGenericSendFromISR+0x6c>
 800901e:	2300      	movs	r3, #0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d109      	bne.n	8009038 <xQueueGenericSendFromISR+0x84>
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	61fb      	str	r3, [r7, #28]
 8009036:	e7fe      	b.n	8009036 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009038:	f001 ff44 	bl	800aec4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800903c:	f3ef 8211 	mrs	r2, BASEPRI
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	61ba      	str	r2, [r7, #24]
 8009052:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009054:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009060:	429a      	cmp	r2, r3
 8009062:	d302      	bcc.n	800906a <xQueueGenericSendFromISR+0xb6>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d12c      	bne.n	80090c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800907a:	f000 f988 	bl	800938e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800907e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d112      	bne.n	80090ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	2b00      	cmp	r3, #0
 800908e:	d016      	beq.n	80090be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	3324      	adds	r3, #36	; 0x24
 8009094:	4618      	mov	r0, r3
 8009096:	f000 ff39 	bl	8009f0c <xTaskRemoveFromEventList>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00e      	beq.n	80090be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	e007      	b.n	80090be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090b2:	3301      	adds	r3, #1
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	b25a      	sxtb	r2, r3
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090be:	2301      	movs	r3, #1
 80090c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80090c2:	e001      	b.n	80090c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090c4:	2300      	movs	r3, #0
 80090c6:	637b      	str	r3, [r7, #52]	; 0x34
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3738      	adds	r7, #56	; 0x38
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08c      	sub	sp, #48	; 0x30
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090e8:	2300      	movs	r3, #0
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <xQueueReceive+0x2e>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	623b      	str	r3, [r7, #32]
 8009108:	e7fe      	b.n	8009108 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <xQueueReceive+0x3c>
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <xQueueReceive+0x40>
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <xQueueReceive+0x42>
 800911c:	2300      	movs	r3, #0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d109      	bne.n	8009136 <xQueueReceive+0x5a>
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	e7fe      	b.n	8009134 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009136:	f001 f89f 	bl	800a278 <xTaskGetSchedulerState>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d102      	bne.n	8009146 <xQueueReceive+0x6a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <xQueueReceive+0x6e>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <xQueueReceive+0x70>
 800914a:	2300      	movs	r3, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <xQueueReceive+0x88>
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	e7fe      	b.n	8009162 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009164:	f001 fdd2 	bl	800ad0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01f      	beq.n	80091b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009178:	f000 f973 	bl	8009462 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	1e5a      	subs	r2, r3, #1
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00f      	beq.n	80091ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	3310      	adds	r3, #16
 8009190:	4618      	mov	r0, r3
 8009192:	f000 febb 	bl	8009f0c <xTaskRemoveFromEventList>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800919c:	4b3c      	ldr	r3, [pc, #240]	; (8009290 <xQueueReceive+0x1b4>)
 800919e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091ac:	f001 fddc 	bl	800ad68 <vPortExitCritical>
				return pdPASS;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e069      	b.n	8009288 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ba:	f001 fdd5 	bl	800ad68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091be:	2300      	movs	r3, #0
 80091c0:	e062      	b.n	8009288 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091c8:	f107 0310 	add.w	r3, r7, #16
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 feff 	bl	8009fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091d6:	f001 fdc7 	bl	800ad68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091da:	f000 fc7b 	bl	8009ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091de:	f001 fd95 	bl	800ad0c <vPortEnterCritical>
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091e8:	b25b      	sxtb	r3, r3
 80091ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ee:	d103      	bne.n	80091f8 <xQueueReceive+0x11c>
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091fe:	b25b      	sxtb	r3, r3
 8009200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009204:	d103      	bne.n	800920e <xQueueReceive+0x132>
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	2200      	movs	r2, #0
 800920a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800920e:	f001 fdab 	bl	800ad68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009212:	1d3a      	adds	r2, r7, #4
 8009214:	f107 0310 	add.w	r3, r7, #16
 8009218:	4611      	mov	r1, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f000 feee 	bl	8009ffc <xTaskCheckForTimeOut>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d123      	bne.n	800926e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009228:	f000 f993 	bl	8009552 <prvIsQueueEmpty>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d017      	beq.n	8009262 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	3324      	adds	r3, #36	; 0x24
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	4611      	mov	r1, r2
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fe18 	bl	8009e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009242:	f000 f934 	bl	80094ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009246:	f000 fc53 	bl	8009af0 <xTaskResumeAll>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d189      	bne.n	8009164 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009250:	4b0f      	ldr	r3, [pc, #60]	; (8009290 <xQueueReceive+0x1b4>)
 8009252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	e780      	b.n	8009164 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009264:	f000 f923 	bl	80094ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009268:	f000 fc42 	bl	8009af0 <xTaskResumeAll>
 800926c:	e77a      	b.n	8009164 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800926e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009270:	f000 f91d 	bl	80094ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009274:	f000 fc3c 	bl	8009af0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800927a:	f000 f96a 	bl	8009552 <prvIsQueueEmpty>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	f43f af6f 	beq.w	8009164 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009286:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009288:	4618      	mov	r0, r3
 800928a:	3730      	adds	r7, #48	; 0x30
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	e000ed04 	.word	0xe000ed04

08009294 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08e      	sub	sp, #56	; 0x38
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d109      	bne.n	80092be <xQueueReceiveFromISR+0x2a>
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	623b      	str	r3, [r7, #32]
 80092bc:	e7fe      	b.n	80092bc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d103      	bne.n	80092cc <xQueueReceiveFromISR+0x38>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <xQueueReceiveFromISR+0x3c>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <xQueueReceiveFromISR+0x3e>
 80092d0:	2300      	movs	r3, #0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <xQueueReceiveFromISR+0x56>
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	61fb      	str	r3, [r7, #28]
 80092e8:	e7fe      	b.n	80092e8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ea:	f001 fdeb 	bl	800aec4 <vPortValidateInterruptPriority>
	__asm volatile
 80092ee:	f3ef 8211 	mrs	r2, BASEPRI
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	61ba      	str	r2, [r7, #24]
 8009304:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009306:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009308:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	2b00      	cmp	r3, #0
 8009314:	d02f      	beq.n	8009376 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800931c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009320:	68b9      	ldr	r1, [r7, #8]
 8009322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009324:	f000 f89d 	bl	8009462 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	1e5a      	subs	r2, r3, #1
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009338:	d112      	bne.n	8009360 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d016      	beq.n	8009370 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	3310      	adds	r3, #16
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fde0 	bl	8009f0c <xTaskRemoveFromEventList>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00e      	beq.n	8009370 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e007      	b.n	8009370 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009364:	3301      	adds	r3, #1
 8009366:	b2db      	uxtb	r3, r3
 8009368:	b25a      	sxtb	r2, r3
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009370:	2301      	movs	r3, #1
 8009372:	637b      	str	r3, [r7, #52]	; 0x34
 8009374:	e001      	b.n	800937a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009376:	2300      	movs	r3, #0
 8009378:	637b      	str	r3, [r7, #52]	; 0x34
 800937a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009386:	4618      	mov	r0, r3
 8009388:	3738      	adds	r7, #56	; 0x38
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b086      	sub	sp, #24
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10d      	bne.n	80093c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d14d      	bne.n	8009450 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 ff7b 	bl	800a2b4 <xTaskPriorityDisinherit>
 80093be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	609a      	str	r2, [r3, #8]
 80093c6:	e043      	b.n	8009450 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d119      	bne.n	8009402 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6858      	ldr	r0, [r3, #4]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	461a      	mov	r2, r3
 80093d8:	68b9      	ldr	r1, [r7, #8]
 80093da:	f002 fae9 	bl	800b9b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	441a      	add	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d32b      	bcc.n	8009450 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	605a      	str	r2, [r3, #4]
 8009400:	e026      	b.n	8009450 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	68d8      	ldr	r0, [r3, #12]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	461a      	mov	r2, r3
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	f002 facf 	bl	800b9b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	425b      	negs	r3, r3
 800941c:	441a      	add	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d207      	bcs.n	800943e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	689a      	ldr	r2, [r3, #8]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009436:	425b      	negs	r3, r3
 8009438:	441a      	add	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d105      	bne.n	8009450 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	3b01      	subs	r3, #1
 800944e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009458:	697b      	ldr	r3, [r7, #20]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009470:	2b00      	cmp	r3, #0
 8009472:	d018      	beq.n	80094a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68da      	ldr	r2, [r3, #12]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947c:	441a      	add	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	d303      	bcc.n	8009496 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68d9      	ldr	r1, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	461a      	mov	r2, r3
 80094a0:	6838      	ldr	r0, [r7, #0]
 80094a2:	f002 fa85 	bl	800b9b0 <memcpy>
	}
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094b6:	f001 fc29 	bl	800ad0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094c2:	e011      	b.n	80094e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d012      	beq.n	80094f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3324      	adds	r3, #36	; 0x24
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 fd1b 	bl	8009f0c <xTaskRemoveFromEventList>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094dc:	f000 fdee 	bl	800a0bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dce9      	bgt.n	80094c4 <prvUnlockQueue+0x16>
 80094f0:	e000      	b.n	80094f4 <prvUnlockQueue+0x46>
					break;
 80094f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	22ff      	movs	r2, #255	; 0xff
 80094f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094fc:	f001 fc34 	bl	800ad68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009500:	f001 fc04 	bl	800ad0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800950a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800950c:	e011      	b.n	8009532 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d012      	beq.n	800953c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3310      	adds	r3, #16
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fcf6 	bl	8009f0c <xTaskRemoveFromEventList>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009526:	f000 fdc9 	bl	800a0bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	3b01      	subs	r3, #1
 800952e:	b2db      	uxtb	r3, r3
 8009530:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dce9      	bgt.n	800950e <prvUnlockQueue+0x60>
 800953a:	e000      	b.n	800953e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800953c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	22ff      	movs	r2, #255	; 0xff
 8009542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009546:	f001 fc0f 	bl	800ad68 <vPortExitCritical>
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800955a:	f001 fbd7 	bl	800ad0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009566:	2301      	movs	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	e001      	b.n	8009570 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009570:	f001 fbfa 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 8009574:	68fb      	ldr	r3, [r7, #12]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009586:	f001 fbc1 	bl	800ad0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009592:	429a      	cmp	r2, r3
 8009594:	d102      	bne.n	800959c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009596:	2301      	movs	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	e001      	b.n	80095a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800959c:	2300      	movs	r3, #0
 800959e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095a0:	f001 fbe2 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 80095a4:	68fb      	ldr	r3, [r7, #12]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e014      	b.n	80095ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095c0:	4a0e      	ldr	r2, [pc, #56]	; (80095fc <vQueueAddToRegistry+0x4c>)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095cc:	490b      	ldr	r1, [pc, #44]	; (80095fc <vQueueAddToRegistry+0x4c>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095d6:	4a09      	ldr	r2, [pc, #36]	; (80095fc <vQueueAddToRegistry+0x4c>)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095e2:	e005      	b.n	80095f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3301      	adds	r3, #1
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	d9e7      	bls.n	80095c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095f0:	bf00      	nop
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	20004a78 	.word	0x20004a78

08009600 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009610:	f001 fb7c 	bl	800ad0c <vPortEnterCritical>
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800961a:	b25b      	sxtb	r3, r3
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009620:	d103      	bne.n	800962a <vQueueWaitForMessageRestricted+0x2a>
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009630:	b25b      	sxtb	r3, r3
 8009632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009636:	d103      	bne.n	8009640 <vQueueWaitForMessageRestricted+0x40>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009640:	f001 fb92 	bl	800ad68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	3324      	adds	r3, #36	; 0x24
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fc2f 	bl	8009eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800965a:	6978      	ldr	r0, [r7, #20]
 800965c:	f7ff ff27 	bl	80094ae <prvUnlockQueue>
	}
 8009660:	bf00      	nop
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08e      	sub	sp, #56	; 0x38
 800966c:	af04      	add	r7, sp, #16
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009678:	2b00      	cmp	r3, #0
 800967a:	d109      	bne.n	8009690 <xTaskCreateStatic+0x28>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	623b      	str	r3, [r7, #32]
 800968e:	e7fe      	b.n	800968e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <xTaskCreateStatic+0x42>
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	e7fe      	b.n	80096a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096aa:	235c      	movs	r3, #92	; 0x5c
 80096ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b5c      	cmp	r3, #92	; 0x5c
 80096b2:	d009      	beq.n	80096c8 <xTaskCreateStatic+0x60>
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	e7fe      	b.n	80096c6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80096c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01e      	beq.n	800970e <xTaskCreateStatic+0xa6>
 80096d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01b      	beq.n	800970e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096e8:	2300      	movs	r3, #0
 80096ea:	9303      	str	r3, [sp, #12]
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	9302      	str	r3, [sp, #8]
 80096f0:	f107 0314 	add.w	r3, r7, #20
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f850 	bl	80097a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009708:	f000 f8dc 	bl	80098c4 <prvAddNewTaskToReadyList>
 800970c:	e001      	b.n	8009712 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009712:	697b      	ldr	r3, [r7, #20]
	}
 8009714:	4618      	mov	r0, r3
 8009716:	3728      	adds	r7, #40	; 0x28
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08c      	sub	sp, #48	; 0x30
 8009720:	af04      	add	r7, sp, #16
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	4613      	mov	r3, r2
 800972a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800972c:	88fb      	ldrh	r3, [r7, #6]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4618      	mov	r0, r3
 8009732:	f001 fc05 	bl	800af40 <pvPortMalloc>
 8009736:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00e      	beq.n	800975c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800973e:	205c      	movs	r0, #92	; 0x5c
 8009740:	f001 fbfe 	bl	800af40 <pvPortMalloc>
 8009744:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	631a      	str	r2, [r3, #48]	; 0x30
 8009752:	e005      	b.n	8009760 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009754:	6978      	ldr	r0, [r7, #20]
 8009756:	f001 fcb5 	bl	800b0c4 <vPortFree>
 800975a:	e001      	b.n	8009760 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800975c:	2300      	movs	r3, #0
 800975e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d017      	beq.n	8009796 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	2300      	movs	r3, #0
 8009772:	9303      	str	r3, [sp, #12]
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	9302      	str	r3, [sp, #8]
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f80e 	bl	80097a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800978a:	69f8      	ldr	r0, [r7, #28]
 800978c:	f000 f89a 	bl	80098c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009790:	2301      	movs	r3, #1
 8009792:	61bb      	str	r3, [r7, #24]
 8009794:	e002      	b.n	800979c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009796:	f04f 33ff 	mov.w	r3, #4294967295
 800979a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800979c:	69bb      	ldr	r3, [r7, #24]
	}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b088      	sub	sp, #32
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	461a      	mov	r2, r3
 80097be:	21a5      	movs	r1, #165	; 0xa5
 80097c0:	f002 f901 	bl	800b9c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097ce:	3b01      	subs	r3, #1
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	f023 0307 	bic.w	r3, r3, #7
 80097dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d009      	beq.n	80097fc <prvInitialiseNewTask+0x56>
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	617b      	str	r3, [r7, #20]
 80097fa:	e7fe      	b.n	80097fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01f      	beq.n	8009842 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009802:	2300      	movs	r3, #0
 8009804:	61fb      	str	r3, [r7, #28]
 8009806:	e012      	b.n	800982e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	4413      	add	r3, r2
 800980e:	7819      	ldrb	r1, [r3, #0]
 8009810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	4413      	add	r3, r2
 8009816:	3334      	adds	r3, #52	; 0x34
 8009818:	460a      	mov	r2, r1
 800981a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	3301      	adds	r3, #1
 800982c:	61fb      	str	r3, [r7, #28]
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	2b0f      	cmp	r3, #15
 8009832:	d9e9      	bls.n	8009808 <prvInitialiseNewTask+0x62>
 8009834:	e000      	b.n	8009838 <prvInitialiseNewTask+0x92>
			{
				break;
 8009836:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009840:	e003      	b.n	800984a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	2b37      	cmp	r3, #55	; 0x37
 800984e:	d901      	bls.n	8009854 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009850:	2337      	movs	r3, #55	; 0x37
 8009852:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009858:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800985e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009862:	2200      	movs	r2, #0
 8009864:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	3304      	adds	r3, #4
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff f8d6 	bl	8008a1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	3318      	adds	r3, #24
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff f8d1 	bl	8008a1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800987e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800988e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	2200      	movs	r2, #0
 8009894:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	68f9      	ldr	r1, [r7, #12]
 80098a2:	69b8      	ldr	r0, [r7, #24]
 80098a4:	f001 f90c 	bl	800aac0 <pxPortInitialiseStack>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098ba:	bf00      	nop
 80098bc:	3720      	adds	r7, #32
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098cc:	f001 fa1e 	bl	800ad0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098d0:	4b2d      	ldr	r3, [pc, #180]	; (8009988 <prvAddNewTaskToReadyList+0xc4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3301      	adds	r3, #1
 80098d6:	4a2c      	ldr	r2, [pc, #176]	; (8009988 <prvAddNewTaskToReadyList+0xc4>)
 80098d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098da:	4b2c      	ldr	r3, [pc, #176]	; (800998c <prvAddNewTaskToReadyList+0xc8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098e2:	4a2a      	ldr	r2, [pc, #168]	; (800998c <prvAddNewTaskToReadyList+0xc8>)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098e8:	4b27      	ldr	r3, [pc, #156]	; (8009988 <prvAddNewTaskToReadyList+0xc4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d110      	bne.n	8009912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098f0:	f000 fc08 	bl	800a104 <prvInitialiseTaskLists>
 80098f4:	e00d      	b.n	8009912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098f6:	4b26      	ldr	r3, [pc, #152]	; (8009990 <prvAddNewTaskToReadyList+0xcc>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098fe:	4b23      	ldr	r3, [pc, #140]	; (800998c <prvAddNewTaskToReadyList+0xc8>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	429a      	cmp	r2, r3
 800990a:	d802      	bhi.n	8009912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800990c:	4a1f      	ldr	r2, [pc, #124]	; (800998c <prvAddNewTaskToReadyList+0xc8>)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009912:	4b20      	ldr	r3, [pc, #128]	; (8009994 <prvAddNewTaskToReadyList+0xd0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3301      	adds	r3, #1
 8009918:	4a1e      	ldr	r2, [pc, #120]	; (8009994 <prvAddNewTaskToReadyList+0xd0>)
 800991a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800991c:	4b1d      	ldr	r3, [pc, #116]	; (8009994 <prvAddNewTaskToReadyList+0xd0>)
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009928:	4b1b      	ldr	r3, [pc, #108]	; (8009998 <prvAddNewTaskToReadyList+0xd4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d903      	bls.n	8009938 <prvAddNewTaskToReadyList+0x74>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	4a18      	ldr	r2, [pc, #96]	; (8009998 <prvAddNewTaskToReadyList+0xd4>)
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4a15      	ldr	r2, [pc, #84]	; (800999c <prvAddNewTaskToReadyList+0xd8>)
 8009946:	441a      	add	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3304      	adds	r3, #4
 800994c:	4619      	mov	r1, r3
 800994e:	4610      	mov	r0, r2
 8009950:	f7ff f871 	bl	8008a36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009954:	f001 fa08 	bl	800ad68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009958:	4b0d      	ldr	r3, [pc, #52]	; (8009990 <prvAddNewTaskToReadyList+0xcc>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00e      	beq.n	800997e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009960:	4b0a      	ldr	r3, [pc, #40]	; (800998c <prvAddNewTaskToReadyList+0xc8>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	429a      	cmp	r2, r3
 800996c:	d207      	bcs.n	800997e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800996e:	4b0c      	ldr	r3, [pc, #48]	; (80099a0 <prvAddNewTaskToReadyList+0xdc>)
 8009970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20000c48 	.word	0x20000c48
 800998c:	20000774 	.word	0x20000774
 8009990:	20000c54 	.word	0x20000c54
 8009994:	20000c64 	.word	0x20000c64
 8009998:	20000c50 	.word	0x20000c50
 800999c:	20000778 	.word	0x20000778
 80099a0:	e000ed04 	.word	0xe000ed04

080099a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d016      	beq.n	80099e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80099b6:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <vTaskDelay+0x60>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d009      	beq.n	80099d2 <vTaskDelay+0x2e>
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	60bb      	str	r3, [r7, #8]
 80099d0:	e7fe      	b.n	80099d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80099d2:	f000 f87f 	bl	8009ad4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099d6:	2100      	movs	r1, #0
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fcd7 	bl	800a38c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099de:	f000 f887 	bl	8009af0 <xTaskResumeAll>
 80099e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d107      	bne.n	80099fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80099ea:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <vTaskDelay+0x64>)
 80099ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099fa:	bf00      	nop
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000c70 	.word	0x20000c70
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08a      	sub	sp, #40	; 0x28
 8009a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a1a:	463a      	mov	r2, r7
 8009a1c:	1d39      	adds	r1, r7, #4
 8009a1e:	f107 0308 	add.w	r3, r7, #8
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe ffa6 	bl	8008974 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	9202      	str	r2, [sp, #8]
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	2300      	movs	r3, #0
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	2300      	movs	r3, #0
 8009a38:	460a      	mov	r2, r1
 8009a3a:	4920      	ldr	r1, [pc, #128]	; (8009abc <vTaskStartScheduler+0xb0>)
 8009a3c:	4820      	ldr	r0, [pc, #128]	; (8009ac0 <vTaskStartScheduler+0xb4>)
 8009a3e:	f7ff fe13 	bl	8009668 <xTaskCreateStatic>
 8009a42:	4602      	mov	r2, r0
 8009a44:	4b1f      	ldr	r3, [pc, #124]	; (8009ac4 <vTaskStartScheduler+0xb8>)
 8009a46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a48:	4b1e      	ldr	r3, [pc, #120]	; (8009ac4 <vTaskStartScheduler+0xb8>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e001      	b.n	8009a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d102      	bne.n	8009a66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a60:	f000 fce8 	bl	800a434 <xTimerCreateTimerTask>
 8009a64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d115      	bne.n	8009a98 <vTaskStartScheduler+0x8c>
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a7e:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <vTaskStartScheduler+0xbc>)
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295
 8009a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a86:	4b11      	ldr	r3, [pc, #68]	; (8009acc <vTaskStartScheduler+0xc0>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <vTaskStartScheduler+0xc4>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a92:	f001 f89d 	bl	800abd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a96:	e00d      	b.n	8009ab4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9e:	d109      	bne.n	8009ab4 <vTaskStartScheduler+0xa8>
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	e7fe      	b.n	8009ab2 <vTaskStartScheduler+0xa6>
}
 8009ab4:	bf00      	nop
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	0800bb80 	.word	0x0800bb80
 8009ac0:	0800a0d5 	.word	0x0800a0d5
 8009ac4:	20000c6c 	.word	0x20000c6c
 8009ac8:	20000c68 	.word	0x20000c68
 8009acc:	20000c54 	.word	0x20000c54
 8009ad0:	20000c4c 	.word	0x20000c4c

08009ad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009ad8:	4b04      	ldr	r3, [pc, #16]	; (8009aec <vTaskSuspendAll+0x18>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3301      	adds	r3, #1
 8009ade:	4a03      	ldr	r2, [pc, #12]	; (8009aec <vTaskSuspendAll+0x18>)
 8009ae0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009ae2:	bf00      	nop
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	20000c70 	.word	0x20000c70

08009af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009afe:	4b41      	ldr	r3, [pc, #260]	; (8009c04 <xTaskResumeAll+0x114>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d109      	bne.n	8009b1a <xTaskResumeAll+0x2a>
 8009b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	603b      	str	r3, [r7, #0]
 8009b18:	e7fe      	b.n	8009b18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b1a:	f001 f8f7 	bl	800ad0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b1e:	4b39      	ldr	r3, [pc, #228]	; (8009c04 <xTaskResumeAll+0x114>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	4a37      	ldr	r2, [pc, #220]	; (8009c04 <xTaskResumeAll+0x114>)
 8009b26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b28:	4b36      	ldr	r3, [pc, #216]	; (8009c04 <xTaskResumeAll+0x114>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d162      	bne.n	8009bf6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b30:	4b35      	ldr	r3, [pc, #212]	; (8009c08 <xTaskResumeAll+0x118>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d05e      	beq.n	8009bf6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b38:	e02f      	b.n	8009b9a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b3a:	4b34      	ldr	r3, [pc, #208]	; (8009c0c <xTaskResumeAll+0x11c>)
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3318      	adds	r3, #24
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe ffd2 	bl	8008af0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe ffcd 	bl	8008af0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5a:	4b2d      	ldr	r3, [pc, #180]	; (8009c10 <xTaskResumeAll+0x120>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d903      	bls.n	8009b6a <xTaskResumeAll+0x7a>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	4a2a      	ldr	r2, [pc, #168]	; (8009c10 <xTaskResumeAll+0x120>)
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6e:	4613      	mov	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4a27      	ldr	r2, [pc, #156]	; (8009c14 <xTaskResumeAll+0x124>)
 8009b78:	441a      	add	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	4619      	mov	r1, r3
 8009b80:	4610      	mov	r0, r2
 8009b82:	f7fe ff58 	bl	8008a36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8a:	4b23      	ldr	r3, [pc, #140]	; (8009c18 <xTaskResumeAll+0x128>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d302      	bcc.n	8009b9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009b94:	4b21      	ldr	r3, [pc, #132]	; (8009c1c <xTaskResumeAll+0x12c>)
 8009b96:	2201      	movs	r2, #1
 8009b98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b9a:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <xTaskResumeAll+0x11c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1cb      	bne.n	8009b3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ba8:	f000 fb46 	bl	800a238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009bac:	4b1c      	ldr	r3, [pc, #112]	; (8009c20 <xTaskResumeAll+0x130>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d010      	beq.n	8009bda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009bb8:	f000 f846 	bl	8009c48 <xTaskIncrementTick>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009bc2:	4b16      	ldr	r3, [pc, #88]	; (8009c1c <xTaskResumeAll+0x12c>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1f1      	bne.n	8009bb8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009bd4:	4b12      	ldr	r3, [pc, #72]	; (8009c20 <xTaskResumeAll+0x130>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bda:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <xTaskResumeAll+0x12c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009be2:	2301      	movs	r3, #1
 8009be4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009be6:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <xTaskResumeAll+0x134>)
 8009be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bf6:	f001 f8b7 	bl	800ad68 <vPortExitCritical>

	return xAlreadyYielded;
 8009bfa:	68bb      	ldr	r3, [r7, #8]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000c70 	.word	0x20000c70
 8009c08:	20000c48 	.word	0x20000c48
 8009c0c:	20000c08 	.word	0x20000c08
 8009c10:	20000c50 	.word	0x20000c50
 8009c14:	20000778 	.word	0x20000778
 8009c18:	20000774 	.word	0x20000774
 8009c1c:	20000c5c 	.word	0x20000c5c
 8009c20:	20000c58 	.word	0x20000c58
 8009c24:	e000ed04 	.word	0xe000ed04

08009c28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c2e:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <xTaskGetTickCount+0x1c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c34:	687b      	ldr	r3, [r7, #4]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000c4c 	.word	0x20000c4c

08009c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c52:	4b4e      	ldr	r3, [pc, #312]	; (8009d8c <xTaskIncrementTick+0x144>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f040 8088 	bne.w	8009d6c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c5c:	4b4c      	ldr	r3, [pc, #304]	; (8009d90 <xTaskIncrementTick+0x148>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3301      	adds	r3, #1
 8009c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c64:	4a4a      	ldr	r2, [pc, #296]	; (8009d90 <xTaskIncrementTick+0x148>)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d11f      	bne.n	8009cb0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c70:	4b48      	ldr	r3, [pc, #288]	; (8009d94 <xTaskIncrementTick+0x14c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <xTaskIncrementTick+0x46>
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	e7fe      	b.n	8009c8c <xTaskIncrementTick+0x44>
 8009c8e:	4b41      	ldr	r3, [pc, #260]	; (8009d94 <xTaskIncrementTick+0x14c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	4b40      	ldr	r3, [pc, #256]	; (8009d98 <xTaskIncrementTick+0x150>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a3e      	ldr	r2, [pc, #248]	; (8009d94 <xTaskIncrementTick+0x14c>)
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	4a3e      	ldr	r2, [pc, #248]	; (8009d98 <xTaskIncrementTick+0x150>)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	4b3e      	ldr	r3, [pc, #248]	; (8009d9c <xTaskIncrementTick+0x154>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	4a3c      	ldr	r2, [pc, #240]	; (8009d9c <xTaskIncrementTick+0x154>)
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	f000 fac4 	bl	800a238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cb0:	4b3b      	ldr	r3, [pc, #236]	; (8009da0 <xTaskIncrementTick+0x158>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d349      	bcc.n	8009d4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cba:	4b36      	ldr	r3, [pc, #216]	; (8009d94 <xTaskIncrementTick+0x14c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc4:	4b36      	ldr	r3, [pc, #216]	; (8009da0 <xTaskIncrementTick+0x158>)
 8009cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cca:	601a      	str	r2, [r3, #0]
					break;
 8009ccc:	e03f      	b.n	8009d4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cce:	4b31      	ldr	r3, [pc, #196]	; (8009d94 <xTaskIncrementTick+0x14c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d203      	bcs.n	8009cee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ce6:	4a2e      	ldr	r2, [pc, #184]	; (8009da0 <xTaskIncrementTick+0x158>)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cec:	e02f      	b.n	8009d4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fefc 	bl	8008af0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d004      	beq.n	8009d0a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	3318      	adds	r3, #24
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fe fef3 	bl	8008af0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0e:	4b25      	ldr	r3, [pc, #148]	; (8009da4 <xTaskIncrementTick+0x15c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d903      	bls.n	8009d1e <xTaskIncrementTick+0xd6>
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	4a22      	ldr	r2, [pc, #136]	; (8009da4 <xTaskIncrementTick+0x15c>)
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4a1f      	ldr	r2, [pc, #124]	; (8009da8 <xTaskIncrementTick+0x160>)
 8009d2c:	441a      	add	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7fe fe7e 	bl	8008a36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3e:	4b1b      	ldr	r3, [pc, #108]	; (8009dac <xTaskIncrementTick+0x164>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d3b8      	bcc.n	8009cba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d4c:	e7b5      	b.n	8009cba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d4e:	4b17      	ldr	r3, [pc, #92]	; (8009dac <xTaskIncrementTick+0x164>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d54:	4914      	ldr	r1, [pc, #80]	; (8009da8 <xTaskIncrementTick+0x160>)
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d907      	bls.n	8009d76 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009d66:	2301      	movs	r3, #1
 8009d68:	617b      	str	r3, [r7, #20]
 8009d6a:	e004      	b.n	8009d76 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d6c:	4b10      	ldr	r3, [pc, #64]	; (8009db0 <xTaskIncrementTick+0x168>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3301      	adds	r3, #1
 8009d72:	4a0f      	ldr	r2, [pc, #60]	; (8009db0 <xTaskIncrementTick+0x168>)
 8009d74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d76:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <xTaskIncrementTick+0x16c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d82:	697b      	ldr	r3, [r7, #20]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20000c70 	.word	0x20000c70
 8009d90:	20000c4c 	.word	0x20000c4c
 8009d94:	20000c00 	.word	0x20000c00
 8009d98:	20000c04 	.word	0x20000c04
 8009d9c:	20000c60 	.word	0x20000c60
 8009da0:	20000c68 	.word	0x20000c68
 8009da4:	20000c50 	.word	0x20000c50
 8009da8:	20000778 	.word	0x20000778
 8009dac:	20000774 	.word	0x20000774
 8009db0:	20000c58 	.word	0x20000c58
 8009db4:	20000c5c 	.word	0x20000c5c

08009db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dbe:	4b27      	ldr	r3, [pc, #156]	; (8009e5c <vTaskSwitchContext+0xa4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dc6:	4b26      	ldr	r3, [pc, #152]	; (8009e60 <vTaskSwitchContext+0xa8>)
 8009dc8:	2201      	movs	r2, #1
 8009dca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009dcc:	e040      	b.n	8009e50 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009dce:	4b24      	ldr	r3, [pc, #144]	; (8009e60 <vTaskSwitchContext+0xa8>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd4:	4b23      	ldr	r3, [pc, #140]	; (8009e64 <vTaskSwitchContext+0xac>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	e00f      	b.n	8009dfc <vTaskSwitchContext+0x44>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d109      	bne.n	8009df6 <vTaskSwitchContext+0x3e>
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	607b      	str	r3, [r7, #4]
 8009df4:	e7fe      	b.n	8009df4 <vTaskSwitchContext+0x3c>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	491a      	ldr	r1, [pc, #104]	; (8009e68 <vTaskSwitchContext+0xb0>)
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4613      	mov	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	440b      	add	r3, r1
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0e5      	beq.n	8009ddc <vTaskSwitchContext+0x24>
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4a13      	ldr	r2, [pc, #76]	; (8009e68 <vTaskSwitchContext+0xb0>)
 8009e1c:	4413      	add	r3, r2
 8009e1e:	60bb      	str	r3, [r7, #8]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	605a      	str	r2, [r3, #4]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	3308      	adds	r3, #8
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d104      	bne.n	8009e40 <vTaskSwitchContext+0x88>
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	605a      	str	r2, [r3, #4]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <vTaskSwitchContext+0xb4>)
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	4a06      	ldr	r2, [pc, #24]	; (8009e64 <vTaskSwitchContext+0xac>)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6013      	str	r3, [r2, #0]
}
 8009e50:	bf00      	nop
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	20000c70 	.word	0x20000c70
 8009e60:	20000c5c 	.word	0x20000c5c
 8009e64:	20000c50 	.word	0x20000c50
 8009e68:	20000778 	.word	0x20000778
 8009e6c:	20000774 	.word	0x20000774

08009e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d109      	bne.n	8009e94 <vTaskPlaceOnEventList+0x24>
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	60fb      	str	r3, [r7, #12]
 8009e92:	e7fe      	b.n	8009e92 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e94:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <vTaskPlaceOnEventList+0x44>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3318      	adds	r3, #24
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fe fdee 	bl	8008a7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	6838      	ldr	r0, [r7, #0]
 8009ea6:	f000 fa71 	bl	800a38c <prvAddCurrentTaskToDelayedList>
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20000774 	.word	0x20000774

08009eb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <vTaskPlaceOnEventListRestricted+0x26>
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e7fe      	b.n	8009edc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ede:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <vTaskPlaceOnEventListRestricted+0x50>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3318      	adds	r3, #24
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7fe fda5 	bl	8008a36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	68b8      	ldr	r0, [r7, #8]
 8009efc:	f000 fa46 	bl	800a38c <prvAddCurrentTaskToDelayedList>
	}
 8009f00:	bf00      	nop
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000774 	.word	0x20000774

08009f0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d109      	bne.n	8009f36 <xTaskRemoveFromEventList+0x2a>
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	e7fe      	b.n	8009f34 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	3318      	adds	r3, #24
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe fdd8 	bl	8008af0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f40:	4b1d      	ldr	r3, [pc, #116]	; (8009fb8 <xTaskRemoveFromEventList+0xac>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11d      	bne.n	8009f84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fe fdcf 	bl	8008af0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f56:	4b19      	ldr	r3, [pc, #100]	; (8009fbc <xTaskRemoveFromEventList+0xb0>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d903      	bls.n	8009f66 <xTaskRemoveFromEventList+0x5a>
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f62:	4a16      	ldr	r2, [pc, #88]	; (8009fbc <xTaskRemoveFromEventList+0xb0>)
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4a13      	ldr	r2, [pc, #76]	; (8009fc0 <xTaskRemoveFromEventList+0xb4>)
 8009f74:	441a      	add	r2, r3
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	f7fe fd5a 	bl	8008a36 <vListInsertEnd>
 8009f82:	e005      	b.n	8009f90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	3318      	adds	r3, #24
 8009f88:	4619      	mov	r1, r3
 8009f8a:	480e      	ldr	r0, [pc, #56]	; (8009fc4 <xTaskRemoveFromEventList+0xb8>)
 8009f8c:	f7fe fd53 	bl	8008a36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <xTaskRemoveFromEventList+0xbc>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d905      	bls.n	8009faa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fa2:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <xTaskRemoveFromEventList+0xc0>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	e001      	b.n	8009fae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009faa:	2300      	movs	r3, #0
 8009fac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fae:	697b      	ldr	r3, [r7, #20]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	20000c70 	.word	0x20000c70
 8009fbc:	20000c50 	.word	0x20000c50
 8009fc0:	20000778 	.word	0x20000778
 8009fc4:	20000c08 	.word	0x20000c08
 8009fc8:	20000774 	.word	0x20000774
 8009fcc:	20000c5c 	.word	0x20000c5c

08009fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fd8:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <vTaskInternalSetTimeOutState+0x24>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fe0:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <vTaskInternalSetTimeOutState+0x28>)
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	605a      	str	r2, [r3, #4]
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	20000c60 	.word	0x20000c60
 8009ff8:	20000c4c 	.word	0x20000c4c

08009ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b088      	sub	sp, #32
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d109      	bne.n	800a020 <xTaskCheckForTimeOut+0x24>
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	613b      	str	r3, [r7, #16]
 800a01e:	e7fe      	b.n	800a01e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <xTaskCheckForTimeOut+0x3e>
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	e7fe      	b.n	800a038 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a03a:	f000 fe67 	bl	800ad0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a03e:	4b1d      	ldr	r3, [pc, #116]	; (800a0b4 <xTaskCheckForTimeOut+0xb8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a056:	d102      	bne.n	800a05e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a058:	2300      	movs	r3, #0
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	e023      	b.n	800a0a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <xTaskCheckForTimeOut+0xbc>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d007      	beq.n	800a07a <xTaskCheckForTimeOut+0x7e>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	429a      	cmp	r2, r3
 800a072:	d302      	bcc.n	800a07a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a074:	2301      	movs	r3, #1
 800a076:	61fb      	str	r3, [r7, #28]
 800a078:	e015      	b.n	800a0a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	429a      	cmp	r2, r3
 800a082:	d20b      	bcs.n	800a09c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	1ad2      	subs	r2, r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff ff9d 	bl	8009fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a096:	2300      	movs	r3, #0
 800a098:	61fb      	str	r3, [r7, #28]
 800a09a:	e004      	b.n	800a0a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0a6:	f000 fe5f 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3720      	adds	r7, #32
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000c4c 	.word	0x20000c4c
 800a0b8:	20000c60 	.word	0x20000c60

0800a0bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0c0:	4b03      	ldr	r3, [pc, #12]	; (800a0d0 <vTaskMissedYield+0x14>)
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]
}
 800a0c6:	bf00      	nop
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	20000c5c 	.word	0x20000c5c

0800a0d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0dc:	f000 f852 	bl	800a184 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <prvIdleTask+0x28>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d9f9      	bls.n	800a0dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0e8:	4b05      	ldr	r3, [pc, #20]	; (800a100 <prvIdleTask+0x2c>)
 800a0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0f8:	e7f0      	b.n	800a0dc <prvIdleTask+0x8>
 800a0fa:	bf00      	nop
 800a0fc:	20000778 	.word	0x20000778
 800a100:	e000ed04 	.word	0xe000ed04

0800a104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a10a:	2300      	movs	r3, #0
 800a10c:	607b      	str	r3, [r7, #4]
 800a10e:	e00c      	b.n	800a12a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4a12      	ldr	r2, [pc, #72]	; (800a164 <prvInitialiseTaskLists+0x60>)
 800a11c:	4413      	add	r3, r2
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe fc5c 	bl	80089dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3301      	adds	r3, #1
 800a128:	607b      	str	r3, [r7, #4]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b37      	cmp	r3, #55	; 0x37
 800a12e:	d9ef      	bls.n	800a110 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a130:	480d      	ldr	r0, [pc, #52]	; (800a168 <prvInitialiseTaskLists+0x64>)
 800a132:	f7fe fc53 	bl	80089dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a136:	480d      	ldr	r0, [pc, #52]	; (800a16c <prvInitialiseTaskLists+0x68>)
 800a138:	f7fe fc50 	bl	80089dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a13c:	480c      	ldr	r0, [pc, #48]	; (800a170 <prvInitialiseTaskLists+0x6c>)
 800a13e:	f7fe fc4d 	bl	80089dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a142:	480c      	ldr	r0, [pc, #48]	; (800a174 <prvInitialiseTaskLists+0x70>)
 800a144:	f7fe fc4a 	bl	80089dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a148:	480b      	ldr	r0, [pc, #44]	; (800a178 <prvInitialiseTaskLists+0x74>)
 800a14a:	f7fe fc47 	bl	80089dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a14e:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <prvInitialiseTaskLists+0x78>)
 800a150:	4a05      	ldr	r2, [pc, #20]	; (800a168 <prvInitialiseTaskLists+0x64>)
 800a152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a154:	4b0a      	ldr	r3, [pc, #40]	; (800a180 <prvInitialiseTaskLists+0x7c>)
 800a156:	4a05      	ldr	r2, [pc, #20]	; (800a16c <prvInitialiseTaskLists+0x68>)
 800a158:	601a      	str	r2, [r3, #0]
}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000778 	.word	0x20000778
 800a168:	20000bd8 	.word	0x20000bd8
 800a16c:	20000bec 	.word	0x20000bec
 800a170:	20000c08 	.word	0x20000c08
 800a174:	20000c1c 	.word	0x20000c1c
 800a178:	20000c34 	.word	0x20000c34
 800a17c:	20000c00 	.word	0x20000c00
 800a180:	20000c04 	.word	0x20000c04

0800a184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a18a:	e019      	b.n	800a1c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a18c:	f000 fdbe 	bl	800ad0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a190:	4b0f      	ldr	r3, [pc, #60]	; (800a1d0 <prvCheckTasksWaitingTermination+0x4c>)
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fca7 	bl	8008af0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <prvCheckTasksWaitingTermination+0x50>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	4a0a      	ldr	r2, [pc, #40]	; (800a1d4 <prvCheckTasksWaitingTermination+0x50>)
 800a1aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <prvCheckTasksWaitingTermination+0x54>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <prvCheckTasksWaitingTermination+0x54>)
 800a1b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1b6:	f000 fdd7 	bl	800ad68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f80e 	bl	800a1dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1c0:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <prvCheckTasksWaitingTermination+0x54>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e1      	bne.n	800a18c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1c8:	bf00      	nop
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20000c1c 	.word	0x20000c1c
 800a1d4:	20000c48 	.word	0x20000c48
 800a1d8:	20000c30 	.word	0x20000c30

0800a1dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d108      	bne.n	800a200 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 ff66 	bl	800b0c4 <vPortFree>
				vPortFree( pxTCB );
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 ff63 	bl	800b0c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1fe:	e017      	b.n	800a230 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a206:	2b01      	cmp	r3, #1
 800a208:	d103      	bne.n	800a212 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 ff5a 	bl	800b0c4 <vPortFree>
	}
 800a210:	e00e      	b.n	800a230 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d009      	beq.n	800a230 <prvDeleteTCB+0x54>
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	e7fe      	b.n	800a22e <prvDeleteTCB+0x52>
	}
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a23e:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <prvResetNextTaskUnblockTime+0x38>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d104      	bne.n	800a252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a248:	4b0a      	ldr	r3, [pc, #40]	; (800a274 <prvResetNextTaskUnblockTime+0x3c>)
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295
 800a24e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a250:	e008      	b.n	800a264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a252:	4b07      	ldr	r3, [pc, #28]	; (800a270 <prvResetNextTaskUnblockTime+0x38>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	4a04      	ldr	r2, [pc, #16]	; (800a274 <prvResetNextTaskUnblockTime+0x3c>)
 800a262:	6013      	str	r3, [r2, #0]
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	20000c00 	.word	0x20000c00
 800a274:	20000c68 	.word	0x20000c68

0800a278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a27e:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <xTaskGetSchedulerState+0x34>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d102      	bne.n	800a28c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a286:	2301      	movs	r3, #1
 800a288:	607b      	str	r3, [r7, #4]
 800a28a:	e008      	b.n	800a29e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a28c:	4b08      	ldr	r3, [pc, #32]	; (800a2b0 <xTaskGetSchedulerState+0x38>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d102      	bne.n	800a29a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a294:	2302      	movs	r3, #2
 800a296:	607b      	str	r3, [r7, #4]
 800a298:	e001      	b.n	800a29e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a29a:	2300      	movs	r3, #0
 800a29c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a29e:	687b      	ldr	r3, [r7, #4]
	}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	20000c54 	.word	0x20000c54
 800a2b0:	20000c70 	.word	0x20000c70

0800a2b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d054      	beq.n	800a374 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2ca:	4b2d      	ldr	r3, [pc, #180]	; (800a380 <xTaskPriorityDisinherit+0xcc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d009      	beq.n	800a2e8 <xTaskPriorityDisinherit+0x34>
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e7fe      	b.n	800a2e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d109      	bne.n	800a304 <xTaskPriorityDisinherit+0x50>
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	60bb      	str	r3, [r7, #8]
 800a302:	e7fe      	b.n	800a302 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a308:	1e5a      	subs	r2, r3, #1
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a316:	429a      	cmp	r2, r3
 800a318:	d02c      	beq.n	800a374 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d128      	bne.n	800a374 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	3304      	adds	r3, #4
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fbe2 	bl	8008af0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a344:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <xTaskPriorityDisinherit+0xd0>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d903      	bls.n	800a354 <xTaskPriorityDisinherit+0xa0>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a350:	4a0c      	ldr	r2, [pc, #48]	; (800a384 <xTaskPriorityDisinherit+0xd0>)
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4a09      	ldr	r2, [pc, #36]	; (800a388 <xTaskPriorityDisinherit+0xd4>)
 800a362:	441a      	add	r2, r3
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fe fb63 	bl	8008a36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a374:	697b      	ldr	r3, [r7, #20]
	}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20000774 	.word	0x20000774
 800a384:	20000c50 	.word	0x20000c50
 800a388:	20000778 	.word	0x20000778

0800a38c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a396:	4b21      	ldr	r3, [pc, #132]	; (800a41c <prvAddCurrentTaskToDelayedList+0x90>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a39c:	4b20      	ldr	r3, [pc, #128]	; (800a420 <prvAddCurrentTaskToDelayedList+0x94>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe fba4 	bl	8008af0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ae:	d10a      	bne.n	800a3c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d007      	beq.n	800a3c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3b6:	4b1a      	ldr	r3, [pc, #104]	; (800a420 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4819      	ldr	r0, [pc, #100]	; (800a424 <prvAddCurrentTaskToDelayedList+0x98>)
 800a3c0:	f7fe fb39 	bl	8008a36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3c4:	e026      	b.n	800a414 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3ce:	4b14      	ldr	r3, [pc, #80]	; (800a420 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d209      	bcs.n	800a3f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3de:	4b12      	ldr	r3, [pc, #72]	; (800a428 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	f7fe fb47 	bl	8008a7e <vListInsert>
}
 800a3f0:	e010      	b.n	800a414 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3f2:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4610      	mov	r0, r2
 800a400:	f7fe fb3d 	bl	8008a7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a404:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d202      	bcs.n	800a414 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a40e:	4a08      	ldr	r2, [pc, #32]	; (800a430 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	6013      	str	r3, [r2, #0]
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	20000c4c 	.word	0x20000c4c
 800a420:	20000774 	.word	0x20000774
 800a424:	20000c34 	.word	0x20000c34
 800a428:	20000c04 	.word	0x20000c04
 800a42c:	20000c00 	.word	0x20000c00
 800a430:	20000c68 	.word	0x20000c68

0800a434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08a      	sub	sp, #40	; 0x28
 800a438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a43e:	f000 faff 	bl	800aa40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a442:	4b1c      	ldr	r3, [pc, #112]	; (800a4b4 <xTimerCreateTimerTask+0x80>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d021      	beq.n	800a48e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a44e:	2300      	movs	r3, #0
 800a450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a452:	1d3a      	adds	r2, r7, #4
 800a454:	f107 0108 	add.w	r1, r7, #8
 800a458:	f107 030c 	add.w	r3, r7, #12
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe faa3 	bl	80089a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	9202      	str	r2, [sp, #8]
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	2302      	movs	r3, #2
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	2300      	movs	r3, #0
 800a472:	460a      	mov	r2, r1
 800a474:	4910      	ldr	r1, [pc, #64]	; (800a4b8 <xTimerCreateTimerTask+0x84>)
 800a476:	4811      	ldr	r0, [pc, #68]	; (800a4bc <xTimerCreateTimerTask+0x88>)
 800a478:	f7ff f8f6 	bl	8009668 <xTaskCreateStatic>
 800a47c:	4602      	mov	r2, r0
 800a47e:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <xTimerCreateTimerTask+0x8c>)
 800a480:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a482:	4b0f      	ldr	r3, [pc, #60]	; (800a4c0 <xTimerCreateTimerTask+0x8c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a48a:	2301      	movs	r3, #1
 800a48c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d109      	bne.n	800a4a8 <xTimerCreateTimerTask+0x74>
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	613b      	str	r3, [r7, #16]
 800a4a6:	e7fe      	b.n	800a4a6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a4a8:	697b      	ldr	r3, [r7, #20]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000ca4 	.word	0x20000ca4
 800a4b8:	0800bb88 	.word	0x0800bb88
 800a4bc:	0800a5f5 	.word	0x0800a5f5
 800a4c0:	20000ca8 	.word	0x20000ca8

0800a4c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b08a      	sub	sp, #40	; 0x28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d109      	bne.n	800a4f0 <xTimerGenericCommand+0x2c>
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	623b      	str	r3, [r7, #32]
 800a4ee:	e7fe      	b.n	800a4ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4f0:	4b19      	ldr	r3, [pc, #100]	; (800a558 <xTimerGenericCommand+0x94>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d02a      	beq.n	800a54e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2b05      	cmp	r3, #5
 800a508:	dc18      	bgt.n	800a53c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a50a:	f7ff feb5 	bl	800a278 <xTaskGetSchedulerState>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b02      	cmp	r3, #2
 800a512:	d109      	bne.n	800a528 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a514:	4b10      	ldr	r3, [pc, #64]	; (800a558 <xTimerGenericCommand+0x94>)
 800a516:	6818      	ldr	r0, [r3, #0]
 800a518:	f107 0110 	add.w	r1, r7, #16
 800a51c:	2300      	movs	r3, #0
 800a51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a520:	f7fe fc4e 	bl	8008dc0 <xQueueGenericSend>
 800a524:	6278      	str	r0, [r7, #36]	; 0x24
 800a526:	e012      	b.n	800a54e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a528:	4b0b      	ldr	r3, [pc, #44]	; (800a558 <xTimerGenericCommand+0x94>)
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	f107 0110 	add.w	r1, r7, #16
 800a530:	2300      	movs	r3, #0
 800a532:	2200      	movs	r2, #0
 800a534:	f7fe fc44 	bl	8008dc0 <xQueueGenericSend>
 800a538:	6278      	str	r0, [r7, #36]	; 0x24
 800a53a:	e008      	b.n	800a54e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a53c:	4b06      	ldr	r3, [pc, #24]	; (800a558 <xTimerGenericCommand+0x94>)
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	f107 0110 	add.w	r1, r7, #16
 800a544:	2300      	movs	r3, #0
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	f7fe fd34 	bl	8008fb4 <xQueueGenericSendFromISR>
 800a54c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a550:	4618      	mov	r0, r3
 800a552:	3728      	adds	r7, #40	; 0x28
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20000ca4 	.word	0x20000ca4

0800a55c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af02      	add	r7, sp, #8
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a566:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <prvProcessExpiredTimer+0x94>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	3304      	adds	r3, #4
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fabb 	bl	8008af0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d021      	beq.n	800a5cc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	699a      	ldr	r2, [r3, #24]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	18d1      	adds	r1, r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	6978      	ldr	r0, [r7, #20]
 800a596:	f000 f8d1 	bl	800a73c <prvInsertTimerInActiveList>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d01e      	beq.n	800a5de <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	6978      	ldr	r0, [r7, #20]
 800a5ac:	f7ff ff8a 	bl	800a4c4 <xTimerGenericCommand>
 800a5b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d112      	bne.n	800a5de <prvProcessExpiredTimer+0x82>
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e7fe      	b.n	800a5ca <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5d2:	f023 0301 	bic.w	r3, r3, #1
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	6978      	ldr	r0, [r7, #20]
 800a5e4:	4798      	blx	r3
}
 800a5e6:	bf00      	nop
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20000c9c 	.word	0x20000c9c

0800a5f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	4618      	mov	r0, r3
 800a602:	f000 f857 	bl	800a6b4 <prvGetNextExpireTime>
 800a606:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	4619      	mov	r1, r3
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 f803 	bl	800a618 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a612:	f000 f8d5 	bl	800a7c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a616:	e7f1      	b.n	800a5fc <prvTimerTask+0x8>

0800a618 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a622:	f7ff fa57 	bl	8009ad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a626:	f107 0308 	add.w	r3, r7, #8
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 f866 	bl	800a6fc <prvSampleTimeNow>
 800a630:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d130      	bne.n	800a69a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10a      	bne.n	800a654 <prvProcessTimerOrBlockTask+0x3c>
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	429a      	cmp	r2, r3
 800a644:	d806      	bhi.n	800a654 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a646:	f7ff fa53 	bl	8009af0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a64a:	68f9      	ldr	r1, [r7, #12]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff ff85 	bl	800a55c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a652:	e024      	b.n	800a69e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a65a:	4b13      	ldr	r3, [pc, #76]	; (800a6a8 <prvProcessTimerOrBlockTask+0x90>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <prvProcessTimerOrBlockTask+0x50>
 800a664:	2301      	movs	r3, #1
 800a666:	e000      	b.n	800a66a <prvProcessTimerOrBlockTask+0x52>
 800a668:	2300      	movs	r3, #0
 800a66a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a66c:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <prvProcessTimerOrBlockTask+0x94>)
 800a66e:	6818      	ldr	r0, [r3, #0]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	4619      	mov	r1, r3
 800a67a:	f7fe ffc1 	bl	8009600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a67e:	f7ff fa37 	bl	8009af0 <xTaskResumeAll>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a688:	4b09      	ldr	r3, [pc, #36]	; (800a6b0 <prvProcessTimerOrBlockTask+0x98>)
 800a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	f3bf 8f6f 	isb	sy
}
 800a698:	e001      	b.n	800a69e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a69a:	f7ff fa29 	bl	8009af0 <xTaskResumeAll>
}
 800a69e:	bf00      	nop
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000ca0 	.word	0x20000ca0
 800a6ac:	20000ca4 	.word	0x20000ca4
 800a6b0:	e000ed04 	.word	0xe000ed04

0800a6b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6bc:	4b0e      	ldr	r3, [pc, #56]	; (800a6f8 <prvGetNextExpireTime+0x44>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <prvGetNextExpireTime+0x16>
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	e000      	b.n	800a6cc <prvGetNextExpireTime+0x18>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d105      	bne.n	800a6e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6d8:	4b07      	ldr	r3, [pc, #28]	; (800a6f8 <prvGetNextExpireTime+0x44>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	e001      	b.n	800a6e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	20000c9c 	.word	0x20000c9c

0800a6fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a704:	f7ff fa90 	bl	8009c28 <xTaskGetTickCount>
 800a708:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a70a:	4b0b      	ldr	r3, [pc, #44]	; (800a738 <prvSampleTimeNow+0x3c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	429a      	cmp	r2, r3
 800a712:	d205      	bcs.n	800a720 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a714:	f000 f930 	bl	800a978 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	601a      	str	r2, [r3, #0]
 800a71e:	e002      	b.n	800a726 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a726:	4a04      	ldr	r2, [pc, #16]	; (800a738 <prvSampleTimeNow+0x3c>)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a72c:	68fb      	ldr	r3, [r7, #12]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20000cac 	.word	0x20000cac

0800a73c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d812      	bhi.n	800a788 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	1ad2      	subs	r2, r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d302      	bcc.n	800a776 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a770:	2301      	movs	r3, #1
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	e01b      	b.n	800a7ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a776:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <prvInsertTimerInActiveList+0x7c>)
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3304      	adds	r3, #4
 800a77e:	4619      	mov	r1, r3
 800a780:	4610      	mov	r0, r2
 800a782:	f7fe f97c 	bl	8008a7e <vListInsert>
 800a786:	e012      	b.n	800a7ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d206      	bcs.n	800a79e <prvInsertTimerInActiveList+0x62>
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d302      	bcc.n	800a79e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a798:	2301      	movs	r3, #1
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	e007      	b.n	800a7ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a79e:	4b07      	ldr	r3, [pc, #28]	; (800a7bc <prvInsertTimerInActiveList+0x80>)
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7fe f968 	bl	8008a7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7ae:	697b      	ldr	r3, [r7, #20]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20000ca0 	.word	0x20000ca0
 800a7bc:	20000c9c 	.word	0x20000c9c

0800a7c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b08e      	sub	sp, #56	; 0x38
 800a7c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7c6:	e0c6      	b.n	800a956 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	da17      	bge.n	800a7fe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a7ce:	1d3b      	adds	r3, r7, #4
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <prvProcessReceivedCommands+0x2e>
 800a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	61fb      	str	r3, [r7, #28]
 800a7ec:	e7fe      	b.n	800a7ec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f4:	6850      	ldr	r0, [r2, #4]
 800a7f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f8:	6892      	ldr	r2, [r2, #8]
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	f2c0 80a7 	blt.w	800a954 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d004      	beq.n	800a81c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	3304      	adds	r3, #4
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe f96a 	bl	8008af0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a81c:	463b      	mov	r3, r7
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff ff6c 	bl	800a6fc <prvSampleTimeNow>
 800a824:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b09      	cmp	r3, #9
 800a82a:	f200 8094 	bhi.w	800a956 <prvProcessReceivedCommands+0x196>
 800a82e:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <prvProcessReceivedCommands+0x74>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a85d 	.word	0x0800a85d
 800a838:	0800a85d 	.word	0x0800a85d
 800a83c:	0800a85d 	.word	0x0800a85d
 800a840:	0800a8cf 	.word	0x0800a8cf
 800a844:	0800a8e3 	.word	0x0800a8e3
 800a848:	0800a92b 	.word	0x0800a92b
 800a84c:	0800a85d 	.word	0x0800a85d
 800a850:	0800a85d 	.word	0x0800a85d
 800a854:	0800a8cf 	.word	0x0800a8cf
 800a858:	0800a8e3 	.word	0x0800a8e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a862:	f043 0301 	orr.w	r3, r3, #1
 800a866:	b2da      	uxtb	r2, r3
 800a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	18d1      	adds	r1, r2, r3
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a87c:	f7ff ff5e 	bl	800a73c <prvInsertTimerInActiveList>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d067      	beq.n	800a956 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a88c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05c      	beq.n	800a956 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	441a      	add	r2, r3
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ae:	f7ff fe09 	bl	800a4c4 <xTimerGenericCommand>
 800a8b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d14d      	bne.n	800a956 <prvProcessReceivedCommands+0x196>
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	61bb      	str	r3, [r7, #24]
 800a8cc:	e7fe      	b.n	800a8cc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d4:	f023 0301 	bic.w	r3, r3, #1
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a8e0:	e039      	b.n	800a956 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8e8:	f043 0301 	orr.w	r3, r3, #1
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d109      	bne.n	800a916 <prvProcessReceivedCommands+0x156>
 800a902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	e7fe      	b.n	800a914 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	699a      	ldr	r2, [r3, #24]
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	18d1      	adds	r1, r2, r3
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a924:	f7ff ff0a 	bl	800a73c <prvInsertTimerInActiveList>
					break;
 800a928:	e015      	b.n	800a956 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a930:	f003 0302 	and.w	r3, r3, #2
 800a934:	2b00      	cmp	r3, #0
 800a936:	d103      	bne.n	800a940 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a93a:	f000 fbc3 	bl	800b0c4 <vPortFree>
 800a93e:	e00a      	b.n	800a956 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a946:	f023 0301 	bic.w	r3, r3, #1
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a952:	e000      	b.n	800a956 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a954:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a956:	4b07      	ldr	r3, [pc, #28]	; (800a974 <prvProcessReceivedCommands+0x1b4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	1d39      	adds	r1, r7, #4
 800a95c:	2200      	movs	r2, #0
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fe fbbc 	bl	80090dc <xQueueReceive>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	f47f af2e 	bne.w	800a7c8 <prvProcessReceivedCommands+0x8>
	}
}
 800a96c:	bf00      	nop
 800a96e:	3730      	adds	r7, #48	; 0x30
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000ca4 	.word	0x20000ca4

0800a978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a97e:	e047      	b.n	800aa10 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a980:	4b2d      	ldr	r3, [pc, #180]	; (800aa38 <prvSwitchTimerLists+0xc0>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a98a:	4b2b      	ldr	r3, [pc, #172]	; (800aa38 <prvSwitchTimerLists+0xc0>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3304      	adds	r3, #4
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe f8a9 	bl	8008af0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d02d      	beq.n	800aa10 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d90e      	bls.n	800a9e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9d2:	4b19      	ldr	r3, [pc, #100]	; (800aa38 <prvSwitchTimerLists+0xc0>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	4619      	mov	r1, r3
 800a9dc:	4610      	mov	r0, r2
 800a9de:	f7fe f84e 	bl	8008a7e <vListInsert>
 800a9e2:	e015      	b.n	800aa10 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7ff fd68 	bl	800a4c4 <xTimerGenericCommand>
 800a9f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <prvSwitchTimerLists+0x98>
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	603b      	str	r3, [r7, #0]
 800aa0e:	e7fe      	b.n	800aa0e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa10:	4b09      	ldr	r3, [pc, #36]	; (800aa38 <prvSwitchTimerLists+0xc0>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1b2      	bne.n	800a980 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa1a:	4b07      	ldr	r3, [pc, #28]	; (800aa38 <prvSwitchTimerLists+0xc0>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa20:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <prvSwitchTimerLists+0xc4>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a04      	ldr	r2, [pc, #16]	; (800aa38 <prvSwitchTimerLists+0xc0>)
 800aa26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa28:	4a04      	ldr	r2, [pc, #16]	; (800aa3c <prvSwitchTimerLists+0xc4>)
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	6013      	str	r3, [r2, #0]
}
 800aa2e:	bf00      	nop
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20000c9c 	.word	0x20000c9c
 800aa3c:	20000ca0 	.word	0x20000ca0

0800aa40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa46:	f000 f961 	bl	800ad0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa4a:	4b15      	ldr	r3, [pc, #84]	; (800aaa0 <prvCheckForValidListAndQueue+0x60>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d120      	bne.n	800aa94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa52:	4814      	ldr	r0, [pc, #80]	; (800aaa4 <prvCheckForValidListAndQueue+0x64>)
 800aa54:	f7fd ffc2 	bl	80089dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa58:	4813      	ldr	r0, [pc, #76]	; (800aaa8 <prvCheckForValidListAndQueue+0x68>)
 800aa5a:	f7fd ffbf 	bl	80089dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa5e:	4b13      	ldr	r3, [pc, #76]	; (800aaac <prvCheckForValidListAndQueue+0x6c>)
 800aa60:	4a10      	ldr	r2, [pc, #64]	; (800aaa4 <prvCheckForValidListAndQueue+0x64>)
 800aa62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa64:	4b12      	ldr	r3, [pc, #72]	; (800aab0 <prvCheckForValidListAndQueue+0x70>)
 800aa66:	4a10      	ldr	r2, [pc, #64]	; (800aaa8 <prvCheckForValidListAndQueue+0x68>)
 800aa68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <prvCheckForValidListAndQueue+0x74>)
 800aa70:	4a11      	ldr	r2, [pc, #68]	; (800aab8 <prvCheckForValidListAndQueue+0x78>)
 800aa72:	2110      	movs	r1, #16
 800aa74:	200a      	movs	r0, #10
 800aa76:	f7fe f8cd 	bl	8008c14 <xQueueGenericCreateStatic>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	4b08      	ldr	r3, [pc, #32]	; (800aaa0 <prvCheckForValidListAndQueue+0x60>)
 800aa7e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa80:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <prvCheckForValidListAndQueue+0x60>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa88:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <prvCheckForValidListAndQueue+0x60>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	490b      	ldr	r1, [pc, #44]	; (800aabc <prvCheckForValidListAndQueue+0x7c>)
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fd8e 	bl	80095b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa94:	f000 f968 	bl	800ad68 <vPortExitCritical>
}
 800aa98:	bf00      	nop
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000ca4 	.word	0x20000ca4
 800aaa4:	20000c74 	.word	0x20000c74
 800aaa8:	20000c88 	.word	0x20000c88
 800aaac:	20000c9c 	.word	0x20000c9c
 800aab0:	20000ca0 	.word	0x20000ca0
 800aab4:	20000d50 	.word	0x20000d50
 800aab8:	20000cb0 	.word	0x20000cb0
 800aabc:	0800bb90 	.word	0x0800bb90

0800aac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	3b04      	subs	r3, #4
 800aad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3b04      	subs	r3, #4
 800aade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f023 0201 	bic.w	r2, r3, #1
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aaf0:	4a0c      	ldr	r2, [pc, #48]	; (800ab24 <pxPortInitialiseStack+0x64>)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3b14      	subs	r3, #20
 800aafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3b04      	subs	r3, #4
 800ab06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f06f 0202 	mvn.w	r2, #2
 800ab0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3b20      	subs	r3, #32
 800ab14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab16:	68fb      	ldr	r3, [r7, #12]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	0800ab29 	.word	0x0800ab29

0800ab28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab32:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <prvTaskExitError+0x50>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3a:	d009      	beq.n	800ab50 <prvTaskExitError+0x28>
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	e7fe      	b.n	800ab4e <prvTaskExitError+0x26>
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab62:	bf00      	nop
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0fc      	beq.n	800ab64 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab6a:	bf00      	nop
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	2000002c 	.word	0x2000002c
 800ab7c:	00000000 	.word	0x00000000

0800ab80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <pxCurrentTCBConst2>)
 800ab82:	6819      	ldr	r1, [r3, #0]
 800ab84:	6808      	ldr	r0, [r1, #0]
 800ab86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	f380 8809 	msr	PSP, r0
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f04f 0000 	mov.w	r0, #0
 800ab96:	f380 8811 	msr	BASEPRI, r0
 800ab9a:	4770      	bx	lr
 800ab9c:	f3af 8000 	nop.w

0800aba0 <pxCurrentTCBConst2>:
 800aba0:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aba4:	bf00      	nop
 800aba6:	bf00      	nop

0800aba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aba8:	4808      	ldr	r0, [pc, #32]	; (800abcc <prvPortStartFirstTask+0x24>)
 800abaa:	6800      	ldr	r0, [r0, #0]
 800abac:	6800      	ldr	r0, [r0, #0]
 800abae:	f380 8808 	msr	MSP, r0
 800abb2:	f04f 0000 	mov.w	r0, #0
 800abb6:	f380 8814 	msr	CONTROL, r0
 800abba:	b662      	cpsie	i
 800abbc:	b661      	cpsie	f
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	df00      	svc	0
 800abc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abca:	bf00      	nop
 800abcc:	e000ed08 	.word	0xe000ed08

0800abd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abd6:	4b44      	ldr	r3, [pc, #272]	; (800ace8 <xPortStartScheduler+0x118>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a44      	ldr	r2, [pc, #272]	; (800acec <xPortStartScheduler+0x11c>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d109      	bne.n	800abf4 <xPortStartScheduler+0x24>
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	e7fe      	b.n	800abf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abf4:	4b3c      	ldr	r3, [pc, #240]	; (800ace8 <xPortStartScheduler+0x118>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a3d      	ldr	r2, [pc, #244]	; (800acf0 <xPortStartScheduler+0x120>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d109      	bne.n	800ac12 <xPortStartScheduler+0x42>
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e7fe      	b.n	800ac10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac12:	4b38      	ldr	r3, [pc, #224]	; (800acf4 <xPortStartScheduler+0x124>)
 800ac14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	22ff      	movs	r2, #255	; 0xff
 800ac22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac2c:	78fb      	ldrb	r3, [r7, #3]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	4b30      	ldr	r3, [pc, #192]	; (800acf8 <xPortStartScheduler+0x128>)
 800ac38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac3a:	4b30      	ldr	r3, [pc, #192]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac3c:	2207      	movs	r2, #7
 800ac3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac40:	e009      	b.n	800ac56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ac42:	4b2e      	ldr	r3, [pc, #184]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	4a2c      	ldr	r2, [pc, #176]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac5e:	2b80      	cmp	r3, #128	; 0x80
 800ac60:	d0ef      	beq.n	800ac42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac62:	4b26      	ldr	r3, [pc, #152]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f1c3 0307 	rsb	r3, r3, #7
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d009      	beq.n	800ac82 <xPortStartScheduler+0xb2>
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	60bb      	str	r3, [r7, #8]
 800ac80:	e7fe      	b.n	800ac80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac82:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	021b      	lsls	r3, r3, #8
 800ac88:	4a1c      	ldr	r2, [pc, #112]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac8c:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac94:	4a19      	ldr	r2, [pc, #100]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aca0:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <xPortStartScheduler+0x130>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a16      	ldr	r2, [pc, #88]	; (800ad00 <xPortStartScheduler+0x130>)
 800aca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acac:	4b14      	ldr	r3, [pc, #80]	; (800ad00 <xPortStartScheduler+0x130>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a13      	ldr	r2, [pc, #76]	; (800ad00 <xPortStartScheduler+0x130>)
 800acb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800acb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acb8:	f000 f8d6 	bl	800ae68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acbc:	4b11      	ldr	r3, [pc, #68]	; (800ad04 <xPortStartScheduler+0x134>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acc2:	f000 f8f5 	bl	800aeb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acc6:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <xPortStartScheduler+0x138>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a0f      	ldr	r2, [pc, #60]	; (800ad08 <xPortStartScheduler+0x138>)
 800accc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800acd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acd2:	f7ff ff69 	bl	800aba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acd6:	f7ff f86f 	bl	8009db8 <vTaskSwitchContext>
	prvTaskExitError();
 800acda:	f7ff ff25 	bl	800ab28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	e000ed00 	.word	0xe000ed00
 800acec:	410fc271 	.word	0x410fc271
 800acf0:	410fc270 	.word	0x410fc270
 800acf4:	e000e400 	.word	0xe000e400
 800acf8:	20000da0 	.word	0x20000da0
 800acfc:	20000da4 	.word	0x20000da4
 800ad00:	e000ed20 	.word	0xe000ed20
 800ad04:	2000002c 	.word	0x2000002c
 800ad08:	e000ef34 	.word	0xe000ef34

0800ad0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad24:	4b0e      	ldr	r3, [pc, #56]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	4a0d      	ldr	r2, [pc, #52]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d10e      	bne.n	800ad54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad36:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <vPortEnterCritical+0x58>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <vPortEnterCritical+0x48>
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	603b      	str	r3, [r7, #0]
 800ad52:	e7fe      	b.n	800ad52 <vPortEnterCritical+0x46>
	}
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	2000002c 	.word	0x2000002c
 800ad64:	e000ed04 	.word	0xe000ed04

0800ad68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad6e:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d109      	bne.n	800ad8a <vPortExitCritical+0x22>
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	e7fe      	b.n	800ad88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	4a08      	ldr	r2, [pc, #32]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad94:	4b07      	ldr	r3, [pc, #28]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <vPortExitCritical+0x3e>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ada6:	bf00      	nop
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	2000002c 	.word	0x2000002c
	...

0800adc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adc0:	f3ef 8009 	mrs	r0, PSP
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <pxCurrentTCBConst>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f01e 0f10 	tst.w	lr, #16
 800add0:	bf08      	it	eq
 800add2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800add6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adda:	6010      	str	r0, [r2, #0]
 800addc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ade0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ade4:	f380 8811 	msr	BASEPRI, r0
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f7fe ffe2 	bl	8009db8 <vTaskSwitchContext>
 800adf4:	f04f 0000 	mov.w	r0, #0
 800adf8:	f380 8811 	msr	BASEPRI, r0
 800adfc:	bc09      	pop	{r0, r3}
 800adfe:	6819      	ldr	r1, [r3, #0]
 800ae00:	6808      	ldr	r0, [r1, #0]
 800ae02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae06:	f01e 0f10 	tst.w	lr, #16
 800ae0a:	bf08      	it	eq
 800ae0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae10:	f380 8809 	msr	PSP, r0
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	f3af 8000 	nop.w

0800ae20 <pxCurrentTCBConst>:
 800ae20:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop

0800ae28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae40:	f7fe ff02 	bl	8009c48 <xTaskIncrementTick>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae4a:	4b06      	ldr	r3, [pc, #24]	; (800ae64 <SysTick_Handler+0x3c>)
 800ae4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	2300      	movs	r3, #0
 800ae54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	e000ed04 	.word	0xe000ed04

0800ae68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae6c:	4b0b      	ldr	r3, [pc, #44]	; (800ae9c <vPortSetupTimerInterrupt+0x34>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae72:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <vPortSetupTimerInterrupt+0x38>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <vPortSetupTimerInterrupt+0x3c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a0a      	ldr	r2, [pc, #40]	; (800aea8 <vPortSetupTimerInterrupt+0x40>)
 800ae7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae82:	099b      	lsrs	r3, r3, #6
 800ae84:	4a09      	ldr	r2, [pc, #36]	; (800aeac <vPortSetupTimerInterrupt+0x44>)
 800ae86:	3b01      	subs	r3, #1
 800ae88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae8a:	4b04      	ldr	r3, [pc, #16]	; (800ae9c <vPortSetupTimerInterrupt+0x34>)
 800ae8c:	2207      	movs	r2, #7
 800ae8e:	601a      	str	r2, [r3, #0]
}
 800ae90:	bf00      	nop
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	e000e010 	.word	0xe000e010
 800aea0:	e000e018 	.word	0xe000e018
 800aea4:	20000000 	.word	0x20000000
 800aea8:	10624dd3 	.word	0x10624dd3
 800aeac:	e000e014 	.word	0xe000e014

0800aeb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aeb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aec0 <vPortEnableVFP+0x10>
 800aeb4:	6801      	ldr	r1, [r0, #0]
 800aeb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aeba:	6001      	str	r1, [r0, #0]
 800aebc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aebe:	bf00      	nop
 800aec0:	e000ed88 	.word	0xe000ed88

0800aec4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeca:	f3ef 8305 	mrs	r3, IPSR
 800aece:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b0f      	cmp	r3, #15
 800aed4:	d913      	bls.n	800aefe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aed6:	4a16      	ldr	r2, [pc, #88]	; (800af30 <vPortValidateInterruptPriority+0x6c>)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aee0:	4b14      	ldr	r3, [pc, #80]	; (800af34 <vPortValidateInterruptPriority+0x70>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	7afa      	ldrb	r2, [r7, #11]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d209      	bcs.n	800aefe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	607b      	str	r3, [r7, #4]
 800aefc:	e7fe      	b.n	800aefc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aefe:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <vPortValidateInterruptPriority+0x74>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af06:	4b0d      	ldr	r3, [pc, #52]	; (800af3c <vPortValidateInterruptPriority+0x78>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d909      	bls.n	800af22 <vPortValidateInterruptPriority+0x5e>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	e7fe      	b.n	800af20 <vPortValidateInterruptPriority+0x5c>
	}
 800af22:	bf00      	nop
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	e000e3f0 	.word	0xe000e3f0
 800af34:	20000da0 	.word	0x20000da0
 800af38:	e000ed0c 	.word	0xe000ed0c
 800af3c:	20000da4 	.word	0x20000da4

0800af40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	; 0x28
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af48:	2300      	movs	r3, #0
 800af4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af4c:	f7fe fdc2 	bl	8009ad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af50:	4b57      	ldr	r3, [pc, #348]	; (800b0b0 <pvPortMalloc+0x170>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af58:	f000 f90c 	bl	800b174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af5c:	4b55      	ldr	r3, [pc, #340]	; (800b0b4 <pvPortMalloc+0x174>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4013      	ands	r3, r2
 800af64:	2b00      	cmp	r3, #0
 800af66:	f040 808c 	bne.w	800b082 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01c      	beq.n	800afaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800af70:	2208      	movs	r2, #8
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4413      	add	r3, r2
 800af76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f003 0307 	and.w	r3, r3, #7
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d013      	beq.n	800afaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f023 0307 	bic.w	r3, r3, #7
 800af88:	3308      	adds	r3, #8
 800af8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f003 0307 	and.w	r3, r3, #7
 800af92:	2b00      	cmp	r3, #0
 800af94:	d009      	beq.n	800afaa <pvPortMalloc+0x6a>
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e7fe      	b.n	800afa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d068      	beq.n	800b082 <pvPortMalloc+0x142>
 800afb0:	4b41      	ldr	r3, [pc, #260]	; (800b0b8 <pvPortMalloc+0x178>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d863      	bhi.n	800b082 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afba:	4b40      	ldr	r3, [pc, #256]	; (800b0bc <pvPortMalloc+0x17c>)
 800afbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afbe:	4b3f      	ldr	r3, [pc, #252]	; (800b0bc <pvPortMalloc+0x17c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afc4:	e004      	b.n	800afd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d903      	bls.n	800afe2 <pvPortMalloc+0xa2>
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1f1      	bne.n	800afc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afe2:	4b33      	ldr	r3, [pc, #204]	; (800b0b0 <pvPortMalloc+0x170>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe8:	429a      	cmp	r2, r3
 800afea:	d04a      	beq.n	800b082 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2208      	movs	r2, #8
 800aff2:	4413      	add	r3, r2
 800aff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	1ad2      	subs	r2, r2, r3
 800b006:	2308      	movs	r3, #8
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d91e      	bls.n	800b04c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4413      	add	r3, r2
 800b014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <pvPortMalloc+0xf4>
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	613b      	str	r3, [r7, #16]
 800b032:	e7fe      	b.n	800b032 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	1ad2      	subs	r2, r2, r3
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b046:	69b8      	ldr	r0, [r7, #24]
 800b048:	f000 f8f6 	bl	800b238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b04c:	4b1a      	ldr	r3, [pc, #104]	; (800b0b8 <pvPortMalloc+0x178>)
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <pvPortMalloc+0x178>)
 800b058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b05a:	4b17      	ldr	r3, [pc, #92]	; (800b0b8 <pvPortMalloc+0x178>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	4b18      	ldr	r3, [pc, #96]	; (800b0c0 <pvPortMalloc+0x180>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	429a      	cmp	r2, r3
 800b064:	d203      	bcs.n	800b06e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b066:	4b14      	ldr	r3, [pc, #80]	; (800b0b8 <pvPortMalloc+0x178>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a15      	ldr	r2, [pc, #84]	; (800b0c0 <pvPortMalloc+0x180>)
 800b06c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <pvPortMalloc+0x174>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	431a      	orrs	r2, r3
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b082:	f7fe fd35 	bl	8009af0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	f003 0307 	and.w	r3, r3, #7
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d009      	beq.n	800b0a4 <pvPortMalloc+0x164>
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	e7fe      	b.n	800b0a2 <pvPortMalloc+0x162>
	return pvReturn;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3728      	adds	r7, #40	; 0x28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	200049b0 	.word	0x200049b0
 800b0b4:	200049bc 	.word	0x200049bc
 800b0b8:	200049b4 	.word	0x200049b4
 800b0bc:	200049a8 	.word	0x200049a8
 800b0c0:	200049b8 	.word	0x200049b8

0800b0c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d046      	beq.n	800b164 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	425b      	negs	r3, r3
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4413      	add	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	4b20      	ldr	r3, [pc, #128]	; (800b16c <vPortFree+0xa8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d109      	bne.n	800b106 <vPortFree+0x42>
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e7fe      	b.n	800b104 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <vPortFree+0x5e>
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	60bb      	str	r3, [r7, #8]
 800b120:	e7fe      	b.n	800b120 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	4b11      	ldr	r3, [pc, #68]	; (800b16c <vPortFree+0xa8>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d019      	beq.n	800b164 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d115      	bne.n	800b164 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <vPortFree+0xa8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	43db      	mvns	r3, r3
 800b142:	401a      	ands	r2, r3
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b148:	f7fe fcc4 	bl	8009ad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <vPortFree+0xac>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4413      	add	r3, r2
 800b156:	4a06      	ldr	r2, [pc, #24]	; (800b170 <vPortFree+0xac>)
 800b158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b15a:	6938      	ldr	r0, [r7, #16]
 800b15c:	f000 f86c 	bl	800b238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b160:	f7fe fcc6 	bl	8009af0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b164:	bf00      	nop
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	200049bc 	.word	0x200049bc
 800b170:	200049b4 	.word	0x200049b4

0800b174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b17a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b180:	4b27      	ldr	r3, [pc, #156]	; (800b220 <prvHeapInit+0xac>)
 800b182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00c      	beq.n	800b1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3307      	adds	r3, #7
 800b192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f023 0307 	bic.w	r3, r3, #7
 800b19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	4a1f      	ldr	r2, [pc, #124]	; (800b220 <prvHeapInit+0xac>)
 800b1a4:	4413      	add	r3, r2
 800b1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1ac:	4a1d      	ldr	r2, [pc, #116]	; (800b224 <prvHeapInit+0xb0>)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1b2:	4b1c      	ldr	r3, [pc, #112]	; (800b224 <prvHeapInit+0xb0>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	4413      	add	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f023 0307 	bic.w	r3, r3, #7
 800b1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <prvHeapInit+0xb4>)
 800b1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <prvHeapInit+0xb4>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1de:	4b12      	ldr	r3, [pc, #72]	; (800b228 <prvHeapInit+0xb4>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <prvHeapInit+0xb4>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <prvHeapInit+0xb8>)
 800b202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	4a09      	ldr	r2, [pc, #36]	; (800b230 <prvHeapInit+0xbc>)
 800b20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b20c:	4b09      	ldr	r3, [pc, #36]	; (800b234 <prvHeapInit+0xc0>)
 800b20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b212:	601a      	str	r2, [r3, #0]
}
 800b214:	bf00      	nop
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	20000da8 	.word	0x20000da8
 800b224:	200049a8 	.word	0x200049a8
 800b228:	200049b0 	.word	0x200049b0
 800b22c:	200049b8 	.word	0x200049b8
 800b230:	200049b4 	.word	0x200049b4
 800b234:	200049bc 	.word	0x200049bc

0800b238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b240:	4b28      	ldr	r3, [pc, #160]	; (800b2e4 <prvInsertBlockIntoFreeList+0xac>)
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	e002      	b.n	800b24c <prvInsertBlockIntoFreeList+0x14>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d8f7      	bhi.n	800b246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d108      	bne.n	800b27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	441a      	add	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d118      	bne.n	800b2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	d00d      	beq.n	800b2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e008      	b.n	800b2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	e003      	b.n	800b2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d002      	beq.n	800b2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	200049a8 	.word	0x200049a8
 800b2e8:	200049b0 	.word	0x200049b0

0800b2ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	490e      	ldr	r1, [pc, #56]	; (800b32c <MX_USB_HOST_Init+0x40>)
 800b2f4:	480e      	ldr	r0, [pc, #56]	; (800b330 <MX_USB_HOST_Init+0x44>)
 800b2f6:	f7fb fb01 	bl	80068fc <USBH_Init>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b300:	f7f5 fa7a 	bl	80007f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b304:	490b      	ldr	r1, [pc, #44]	; (800b334 <MX_USB_HOST_Init+0x48>)
 800b306:	480a      	ldr	r0, [pc, #40]	; (800b330 <MX_USB_HOST_Init+0x44>)
 800b308:	f7fb fba8 	bl	8006a5c <USBH_RegisterClass>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b312:	f7f5 fa71 	bl	80007f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b316:	4806      	ldr	r0, [pc, #24]	; (800b330 <MX_USB_HOST_Init+0x44>)
 800b318:	f7fb fc2c 	bl	8006b74 <USBH_Start>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b322:	f7f5 fa69 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b326:	bf00      	nop
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	0800b339 	.word	0x0800b339
 800b330:	20004ab8 	.word	0x20004ab8
 800b334:	2000000c 	.word	0x2000000c

0800b338 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b344:	78fb      	ldrb	r3, [r7, #3]
 800b346:	3b01      	subs	r3, #1
 800b348:	2b04      	cmp	r3, #4
 800b34a:	d819      	bhi.n	800b380 <USBH_UserProcess+0x48>
 800b34c:	a201      	add	r2, pc, #4	; (adr r2, 800b354 <USBH_UserProcess+0x1c>)
 800b34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b352:	bf00      	nop
 800b354:	0800b381 	.word	0x0800b381
 800b358:	0800b371 	.word	0x0800b371
 800b35c:	0800b381 	.word	0x0800b381
 800b360:	0800b379 	.word	0x0800b379
 800b364:	0800b369 	.word	0x0800b369
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b368:	4b09      	ldr	r3, [pc, #36]	; (800b390 <USBH_UserProcess+0x58>)
 800b36a:	2203      	movs	r2, #3
 800b36c:	701a      	strb	r2, [r3, #0]
  break;
 800b36e:	e008      	b.n	800b382 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <USBH_UserProcess+0x58>)
 800b372:	2202      	movs	r2, #2
 800b374:	701a      	strb	r2, [r3, #0]
  break;
 800b376:	e004      	b.n	800b382 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b378:	4b05      	ldr	r3, [pc, #20]	; (800b390 <USBH_UserProcess+0x58>)
 800b37a:	2201      	movs	r2, #1
 800b37c:	701a      	strb	r2, [r3, #0]
  break;
 800b37e:	e000      	b.n	800b382 <USBH_UserProcess+0x4a>

  default:
  break;
 800b380:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b382:	bf00      	nop
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	200049c0 	.word	0x200049c0

0800b394 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b08a      	sub	sp, #40	; 0x28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b39c:	f107 0314 	add.w	r3, r7, #20
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	605a      	str	r2, [r3, #4]
 800b3a6:	609a      	str	r2, [r3, #8]
 800b3a8:	60da      	str	r2, [r3, #12]
 800b3aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3b4:	d13a      	bne.n	800b42c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	613b      	str	r3, [r7, #16]
 800b3ba:	4b1e      	ldr	r3, [pc, #120]	; (800b434 <HAL_HCD_MspInit+0xa0>)
 800b3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3be:	4a1d      	ldr	r2, [pc, #116]	; (800b434 <HAL_HCD_MspInit+0xa0>)
 800b3c0:	f043 0301 	orr.w	r3, r3, #1
 800b3c4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3c6:	4b1b      	ldr	r3, [pc, #108]	; (800b434 <HAL_HCD_MspInit+0xa0>)
 800b3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	613b      	str	r3, [r7, #16]
 800b3d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b3d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b3d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3d8:	2302      	movs	r3, #2
 800b3da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b3e4:	230a      	movs	r3, #10
 800b3e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3e8:	f107 0314 	add.w	r3, r7, #20
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4812      	ldr	r0, [pc, #72]	; (800b438 <HAL_HCD_MspInit+0xa4>)
 800b3f0:	f7f5 fcba 	bl	8000d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3f4:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <HAL_HCD_MspInit+0xa0>)
 800b3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f8:	4a0e      	ldr	r2, [pc, #56]	; (800b434 <HAL_HCD_MspInit+0xa0>)
 800b3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fe:	6353      	str	r3, [r2, #52]	; 0x34
 800b400:	2300      	movs	r3, #0
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <HAL_HCD_MspInit+0xa0>)
 800b406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b408:	4a0a      	ldr	r2, [pc, #40]	; (800b434 <HAL_HCD_MspInit+0xa0>)
 800b40a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b40e:	6453      	str	r3, [r2, #68]	; 0x44
 800b410:	4b08      	ldr	r3, [pc, #32]	; (800b434 <HAL_HCD_MspInit+0xa0>)
 800b412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b41c:	2200      	movs	r2, #0
 800b41e:	2105      	movs	r1, #5
 800b420:	2043      	movs	r0, #67	; 0x43
 800b422:	f7f5 fc77 	bl	8000d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b426:	2043      	movs	r0, #67	; 0x43
 800b428:	f7f5 fc90 	bl	8000d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b42c:	bf00      	nop
 800b42e:	3728      	adds	r7, #40	; 0x28
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	40023800 	.word	0x40023800
 800b438:	40020000 	.word	0x40020000

0800b43c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fc f83f 	bl	80074ce <USBH_LL_IncTimer>
}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b466:	4618      	mov	r0, r3
 800b468:	f7fc f883 	bl	8007572 <USBH_LL_Connect>
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b482:	4618      	mov	r0, r3
 800b484:	f7fc f898 	bl	80075b8 <USBH_LL_Disconnect>
}
 800b488:	bf00      	nop
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
 800b49c:	4613      	mov	r3, r2
 800b49e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fc f8cf 	bl	800764a <USBH_LL_NotifyURBChange>
#endif
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fc f82d 	bl	8007522 <USBH_LL_PortEnabled>
}
 800b4c8:	bf00      	nop
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fc f839 	bl	8007556 <USBH_LL_PortDisabled>
}
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d12a      	bne.n	800b554 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b4fe:	4a18      	ldr	r2, [pc, #96]	; (800b560 <USBH_LL_Init+0x74>)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a15      	ldr	r2, [pc, #84]	; (800b560 <USBH_LL_Init+0x74>)
 800b50a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b50e:	4b14      	ldr	r3, [pc, #80]	; (800b560 <USBH_LL_Init+0x74>)
 800b510:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b514:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800b516:	4b12      	ldr	r3, [pc, #72]	; (800b560 <USBH_LL_Init+0x74>)
 800b518:	220c      	movs	r2, #12
 800b51a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <USBH_LL_Init+0x74>)
 800b51e:	2201      	movs	r2, #1
 800b520:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b522:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <USBH_LL_Init+0x74>)
 800b524:	2200      	movs	r2, #0
 800b526:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <USBH_LL_Init+0x74>)
 800b52a:	2202      	movs	r2, #2
 800b52c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <USBH_LL_Init+0x74>)
 800b530:	2200      	movs	r2, #0
 800b532:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b534:	480a      	ldr	r0, [pc, #40]	; (800b560 <USBH_LL_Init+0x74>)
 800b536:	f7f5 fdc2 	bl	80010be <HAL_HCD_Init>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b540:	f7f5 f95a 	bl	80007f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b544:	4806      	ldr	r0, [pc, #24]	; (800b560 <USBH_LL_Init+0x74>)
 800b546:	f7f6 f9c5 	bl	80018d4 <HAL_HCD_GetCurrentFrame>
 800b54a:	4603      	mov	r3, r0
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7fb ffae 	bl	80074b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	20004e9c 	.word	0x20004e9c

0800b564 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7f6 f932 	bl	80017e4 <HAL_HCD_Start>
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	4618      	mov	r0, r3
 800b588:	f000 f990 	bl	800b8ac <USBH_Get_USB_Status>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b590:	7bbb      	ldrb	r3, [r7, #14]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7f6 f93a 	bl	800182a <HAL_HCD_Stop>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 f975 	bl	800b8ac <USBH_Get_USB_Status>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f6 f984 	bl	80018f0 <HAL_HCD_GetCurrentSpeed>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d007      	beq.n	800b5fe <USBH_LL_GetSpeed+0x2e>
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d302      	bcc.n	800b5f8 <USBH_LL_GetSpeed+0x28>
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d006      	beq.n	800b604 <USBH_LL_GetSpeed+0x34>
 800b5f6:	e008      	b.n	800b60a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b5fc:	e008      	b.n	800b610 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b5fe:	2301      	movs	r3, #1
 800b600:	73fb      	strb	r3, [r7, #15]
    break;
 800b602:	e005      	b.n	800b610 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b604:	2302      	movs	r3, #2
 800b606:	73fb      	strb	r3, [r7, #15]
    break;
 800b608:	e002      	b.n	800b610 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b60a:	2301      	movs	r3, #1
 800b60c:	73fb      	strb	r3, [r7, #15]
    break;
 800b60e:	bf00      	nop
  }
  return  speed;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b630:	4618      	mov	r0, r3
 800b632:	f7f6 f917 	bl	8001864 <HAL_HCD_ResetPort>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f935 	bl	800b8ac <USBH_Get_USB_Status>
 800b642:	4603      	mov	r3, r0
 800b644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b646:	7bbb      	ldrb	r3, [r7, #14]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	4611      	mov	r1, r2
 800b666:	4618      	mov	r0, r3
 800b668:	f7f6 f91f 	bl	80018aa <HAL_HCD_HC_GetXferCount>
 800b66c:	4603      	mov	r3, r0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b676:	b590      	push	{r4, r7, lr}
 800b678:	b089      	sub	sp, #36	; 0x24
 800b67a:	af04      	add	r7, sp, #16
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	461a      	mov	r2, r3
 800b684:	4603      	mov	r3, r0
 800b686:	70fb      	strb	r3, [r7, #3]
 800b688:	460b      	mov	r3, r1
 800b68a:	70bb      	strb	r3, [r7, #2]
 800b68c:	4613      	mov	r3, r2
 800b68e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b694:	2300      	movs	r3, #0
 800b696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b69e:	787c      	ldrb	r4, [r7, #1]
 800b6a0:	78ba      	ldrb	r2, [r7, #2]
 800b6a2:	78f9      	ldrb	r1, [r7, #3]
 800b6a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b6a6:	9302      	str	r3, [sp, #8]
 800b6a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6ac:	9301      	str	r3, [sp, #4]
 800b6ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	f7f5 fd64 	bl	8001182 <HAL_HCD_HC_Init>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 f8f3 	bl	800b8ac <USBH_Get_USB_Status>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd90      	pop	{r4, r7, pc}

0800b6d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6ee:	78fa      	ldrb	r2, [r7, #3]
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7f5 fddd 	bl	80012b2 <HAL_HCD_HC_Halt>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 f8d4 	bl	800b8ac <USBH_Get_USB_Status>
 800b704:	4603      	mov	r3, r0
 800b706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b708:	7bbb      	ldrb	r3, [r7, #14]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b712:	b590      	push	{r4, r7, lr}
 800b714:	b089      	sub	sp, #36	; 0x24
 800b716:	af04      	add	r7, sp, #16
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	4608      	mov	r0, r1
 800b71c:	4611      	mov	r1, r2
 800b71e:	461a      	mov	r2, r3
 800b720:	4603      	mov	r3, r0
 800b722:	70fb      	strb	r3, [r7, #3]
 800b724:	460b      	mov	r3, r1
 800b726:	70bb      	strb	r3, [r7, #2]
 800b728:	4613      	mov	r3, r2
 800b72a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b73a:	787c      	ldrb	r4, [r7, #1]
 800b73c:	78ba      	ldrb	r2, [r7, #2]
 800b73e:	78f9      	ldrb	r1, [r7, #3]
 800b740:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b744:	9303      	str	r3, [sp, #12]
 800b746:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b748:	9302      	str	r3, [sp, #8]
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	4623      	mov	r3, r4
 800b756:	f7f5 fdcf 	bl	80012f8 <HAL_HCD_HC_SubmitRequest>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f8a3 	bl	800b8ac <USBH_Get_USB_Status>
 800b766:	4603      	mov	r3, r0
 800b768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	bd90      	pop	{r4, r7, pc}

0800b774 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f6 f878 	bl	8001880 <HAL_HCD_HC_GetURBState>
 800b790:	4603      	mov	r3, r0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d103      	bne.n	800b7b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b7b0:	78fb      	ldrb	r3, [r7, #3]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 f8a6 	bl	800b904 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b7b8:	20c8      	movs	r0, #200	; 0xc8
 800b7ba:	f7f5 f9d1 	bl	8000b60 <HAL_Delay>
  return USBH_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b7e0:	78fa      	ldrb	r2, [r7, #3]
 800b7e2:	68f9      	ldr	r1, [r7, #12]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	440b      	add	r3, r1
 800b7ee:	333b      	adds	r3, #59	; 0x3b
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00a      	beq.n	800b80c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b7f6:	78fa      	ldrb	r2, [r7, #3]
 800b7f8:	68f9      	ldr	r1, [r7, #12]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	00db      	lsls	r3, r3, #3
 800b802:	440b      	add	r3, r1
 800b804:	3350      	adds	r3, #80	; 0x50
 800b806:	78ba      	ldrb	r2, [r7, #2]
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	e009      	b.n	800b820 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b80c:	78fa      	ldrb	r2, [r7, #3]
 800b80e:	68f9      	ldr	r1, [r7, #12]
 800b810:	4613      	mov	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	440b      	add	r3, r1
 800b81a:	3351      	adds	r3, #81	; 0x51
 800b81c:	78ba      	ldrb	r2, [r7, #2]
 800b81e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	460b      	mov	r3, r1
 800b838:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b844:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b846:	78fa      	ldrb	r2, [r7, #3]
 800b848:	68b9      	ldr	r1, [r7, #8]
 800b84a:	4613      	mov	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	440b      	add	r3, r1
 800b854:	333b      	adds	r3, #59	; 0x3b
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00a      	beq.n	800b872 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b85c:	78fa      	ldrb	r2, [r7, #3]
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	4613      	mov	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	440b      	add	r3, r1
 800b86a:	3350      	adds	r3, #80	; 0x50
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	73fb      	strb	r3, [r7, #15]
 800b870:	e009      	b.n	800b886 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b872:	78fa      	ldrb	r2, [r7, #3]
 800b874:	68b9      	ldr	r1, [r7, #8]
 800b876:	4613      	mov	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4413      	add	r3, r2
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	440b      	add	r3, r1
 800b880:	3351      	adds	r3, #81	; 0x51
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b886:	7bfb      	ldrb	r3, [r7, #15]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7f5 f95f 	bl	8000b60 <HAL_Delay>
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
	...

0800b8ac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d817      	bhi.n	800b8f0 <USBH_Get_USB_Status+0x44>
 800b8c0:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <USBH_Get_USB_Status+0x1c>)
 800b8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c6:	bf00      	nop
 800b8c8:	0800b8d9 	.word	0x0800b8d9
 800b8cc:	0800b8df 	.word	0x0800b8df
 800b8d0:	0800b8e5 	.word	0x0800b8e5
 800b8d4:	0800b8eb 	.word	0x0800b8eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73fb      	strb	r3, [r7, #15]
    break;
 800b8dc:	e00b      	b.n	800b8f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b8de:	2302      	movs	r3, #2
 800b8e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e2:	e008      	b.n	800b8f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e8:	e005      	b.n	800b8f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ee:	e002      	b.n	800b8f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f4:	bf00      	nop
  }
  return usb_status;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b912:	79fb      	ldrb	r3, [r7, #7]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b918:	2301      	movs	r3, #1
 800b91a:	73fb      	strb	r3, [r7, #15]
 800b91c:	e001      	b.n	800b922 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,(GPIO_PinState)data);
 800b922:	7bfb      	ldrb	r3, [r7, #15]
 800b924:	461a      	mov	r2, r3
 800b926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b92a:	4803      	ldr	r0, [pc, #12]	; (800b938 <MX_DriverVbusFS+0x34>)
 800b92c:	f7f5 fbae 	bl	800108c <HAL_GPIO_WritePin>
}
 800b930:	bf00      	nop
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	40020400 	.word	0x40020400

0800b93c <__errno>:
 800b93c:	4b01      	ldr	r3, [pc, #4]	; (800b944 <__errno+0x8>)
 800b93e:	6818      	ldr	r0, [r3, #0]
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20000030 	.word	0x20000030

0800b948 <__libc_init_array>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	4e0d      	ldr	r6, [pc, #52]	; (800b980 <__libc_init_array+0x38>)
 800b94c:	4c0d      	ldr	r4, [pc, #52]	; (800b984 <__libc_init_array+0x3c>)
 800b94e:	1ba4      	subs	r4, r4, r6
 800b950:	10a4      	asrs	r4, r4, #2
 800b952:	2500      	movs	r5, #0
 800b954:	42a5      	cmp	r5, r4
 800b956:	d109      	bne.n	800b96c <__libc_init_array+0x24>
 800b958:	4e0b      	ldr	r6, [pc, #44]	; (800b988 <__libc_init_array+0x40>)
 800b95a:	4c0c      	ldr	r4, [pc, #48]	; (800b98c <__libc_init_array+0x44>)
 800b95c:	f000 f8f6 	bl	800bb4c <_init>
 800b960:	1ba4      	subs	r4, r4, r6
 800b962:	10a4      	asrs	r4, r4, #2
 800b964:	2500      	movs	r5, #0
 800b966:	42a5      	cmp	r5, r4
 800b968:	d105      	bne.n	800b976 <__libc_init_array+0x2e>
 800b96a:	bd70      	pop	{r4, r5, r6, pc}
 800b96c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b970:	4798      	blx	r3
 800b972:	3501      	adds	r5, #1
 800b974:	e7ee      	b.n	800b954 <__libc_init_array+0xc>
 800b976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b97a:	4798      	blx	r3
 800b97c:	3501      	adds	r5, #1
 800b97e:	e7f2      	b.n	800b966 <__libc_init_array+0x1e>
 800b980:	0800bbdc 	.word	0x0800bbdc
 800b984:	0800bbdc 	.word	0x0800bbdc
 800b988:	0800bbdc 	.word	0x0800bbdc
 800b98c:	0800bbe0 	.word	0x0800bbe0

0800b990 <malloc>:
 800b990:	4b02      	ldr	r3, [pc, #8]	; (800b99c <malloc+0xc>)
 800b992:	4601      	mov	r1, r0
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	f000 b86d 	b.w	800ba74 <_malloc_r>
 800b99a:	bf00      	nop
 800b99c:	20000030 	.word	0x20000030

0800b9a0 <free>:
 800b9a0:	4b02      	ldr	r3, [pc, #8]	; (800b9ac <free+0xc>)
 800b9a2:	4601      	mov	r1, r0
 800b9a4:	6818      	ldr	r0, [r3, #0]
 800b9a6:	f000 b817 	b.w	800b9d8 <_free_r>
 800b9aa:	bf00      	nop
 800b9ac:	20000030 	.word	0x20000030

0800b9b0 <memcpy>:
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	1e43      	subs	r3, r0, #1
 800b9b4:	440a      	add	r2, r1
 800b9b6:	4291      	cmp	r1, r2
 800b9b8:	d100      	bne.n	800b9bc <memcpy+0xc>
 800b9ba:	bd10      	pop	{r4, pc}
 800b9bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9c4:	e7f7      	b.n	800b9b6 <memcpy+0x6>

0800b9c6 <memset>:
 800b9c6:	4402      	add	r2, r0
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d100      	bne.n	800b9d0 <memset+0xa>
 800b9ce:	4770      	bx	lr
 800b9d0:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d4:	e7f9      	b.n	800b9ca <memset+0x4>
	...

0800b9d8 <_free_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4605      	mov	r5, r0
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	d045      	beq.n	800ba6c <_free_r+0x94>
 800b9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e4:	1f0c      	subs	r4, r1, #4
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bfb8      	it	lt
 800b9ea:	18e4      	addlt	r4, r4, r3
 800b9ec:	f000 f8ac 	bl	800bb48 <__malloc_lock>
 800b9f0:	4a1f      	ldr	r2, [pc, #124]	; (800ba70 <_free_r+0x98>)
 800b9f2:	6813      	ldr	r3, [r2, #0]
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	b933      	cbnz	r3, 800ba06 <_free_r+0x2e>
 800b9f8:	6063      	str	r3, [r4, #4]
 800b9fa:	6014      	str	r4, [r2, #0]
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba02:	f000 b8a2 	b.w	800bb4a <__malloc_unlock>
 800ba06:	42a3      	cmp	r3, r4
 800ba08:	d90c      	bls.n	800ba24 <_free_r+0x4c>
 800ba0a:	6821      	ldr	r1, [r4, #0]
 800ba0c:	1862      	adds	r2, r4, r1
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	bf04      	itt	eq
 800ba12:	681a      	ldreq	r2, [r3, #0]
 800ba14:	685b      	ldreq	r3, [r3, #4]
 800ba16:	6063      	str	r3, [r4, #4]
 800ba18:	bf04      	itt	eq
 800ba1a:	1852      	addeq	r2, r2, r1
 800ba1c:	6022      	streq	r2, [r4, #0]
 800ba1e:	6004      	str	r4, [r0, #0]
 800ba20:	e7ec      	b.n	800b9fc <_free_r+0x24>
 800ba22:	4613      	mov	r3, r2
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	b10a      	cbz	r2, 800ba2c <_free_r+0x54>
 800ba28:	42a2      	cmp	r2, r4
 800ba2a:	d9fa      	bls.n	800ba22 <_free_r+0x4a>
 800ba2c:	6819      	ldr	r1, [r3, #0]
 800ba2e:	1858      	adds	r0, r3, r1
 800ba30:	42a0      	cmp	r0, r4
 800ba32:	d10b      	bne.n	800ba4c <_free_r+0x74>
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	4401      	add	r1, r0
 800ba38:	1858      	adds	r0, r3, r1
 800ba3a:	4282      	cmp	r2, r0
 800ba3c:	6019      	str	r1, [r3, #0]
 800ba3e:	d1dd      	bne.n	800b9fc <_free_r+0x24>
 800ba40:	6810      	ldr	r0, [r2, #0]
 800ba42:	6852      	ldr	r2, [r2, #4]
 800ba44:	605a      	str	r2, [r3, #4]
 800ba46:	4401      	add	r1, r0
 800ba48:	6019      	str	r1, [r3, #0]
 800ba4a:	e7d7      	b.n	800b9fc <_free_r+0x24>
 800ba4c:	d902      	bls.n	800ba54 <_free_r+0x7c>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	602b      	str	r3, [r5, #0]
 800ba52:	e7d3      	b.n	800b9fc <_free_r+0x24>
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	1821      	adds	r1, r4, r0
 800ba58:	428a      	cmp	r2, r1
 800ba5a:	bf04      	itt	eq
 800ba5c:	6811      	ldreq	r1, [r2, #0]
 800ba5e:	6852      	ldreq	r2, [r2, #4]
 800ba60:	6062      	str	r2, [r4, #4]
 800ba62:	bf04      	itt	eq
 800ba64:	1809      	addeq	r1, r1, r0
 800ba66:	6021      	streq	r1, [r4, #0]
 800ba68:	605c      	str	r4, [r3, #4]
 800ba6a:	e7c7      	b.n	800b9fc <_free_r+0x24>
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	200049c4 	.word	0x200049c4

0800ba74 <_malloc_r>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	1ccd      	adds	r5, r1, #3
 800ba78:	f025 0503 	bic.w	r5, r5, #3
 800ba7c:	3508      	adds	r5, #8
 800ba7e:	2d0c      	cmp	r5, #12
 800ba80:	bf38      	it	cc
 800ba82:	250c      	movcc	r5, #12
 800ba84:	2d00      	cmp	r5, #0
 800ba86:	4606      	mov	r6, r0
 800ba88:	db01      	blt.n	800ba8e <_malloc_r+0x1a>
 800ba8a:	42a9      	cmp	r1, r5
 800ba8c:	d903      	bls.n	800ba96 <_malloc_r+0x22>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	6033      	str	r3, [r6, #0]
 800ba92:	2000      	movs	r0, #0
 800ba94:	bd70      	pop	{r4, r5, r6, pc}
 800ba96:	f000 f857 	bl	800bb48 <__malloc_lock>
 800ba9a:	4a21      	ldr	r2, [pc, #132]	; (800bb20 <_malloc_r+0xac>)
 800ba9c:	6814      	ldr	r4, [r2, #0]
 800ba9e:	4621      	mov	r1, r4
 800baa0:	b991      	cbnz	r1, 800bac8 <_malloc_r+0x54>
 800baa2:	4c20      	ldr	r4, [pc, #128]	; (800bb24 <_malloc_r+0xb0>)
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	b91b      	cbnz	r3, 800bab0 <_malloc_r+0x3c>
 800baa8:	4630      	mov	r0, r6
 800baaa:	f000 f83d 	bl	800bb28 <_sbrk_r>
 800baae:	6020      	str	r0, [r4, #0]
 800bab0:	4629      	mov	r1, r5
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 f838 	bl	800bb28 <_sbrk_r>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d124      	bne.n	800bb06 <_malloc_r+0x92>
 800babc:	230c      	movs	r3, #12
 800babe:	6033      	str	r3, [r6, #0]
 800bac0:	4630      	mov	r0, r6
 800bac2:	f000 f842 	bl	800bb4a <__malloc_unlock>
 800bac6:	e7e4      	b.n	800ba92 <_malloc_r+0x1e>
 800bac8:	680b      	ldr	r3, [r1, #0]
 800baca:	1b5b      	subs	r3, r3, r5
 800bacc:	d418      	bmi.n	800bb00 <_malloc_r+0x8c>
 800bace:	2b0b      	cmp	r3, #11
 800bad0:	d90f      	bls.n	800baf2 <_malloc_r+0x7e>
 800bad2:	600b      	str	r3, [r1, #0]
 800bad4:	50cd      	str	r5, [r1, r3]
 800bad6:	18cc      	adds	r4, r1, r3
 800bad8:	4630      	mov	r0, r6
 800bada:	f000 f836 	bl	800bb4a <__malloc_unlock>
 800bade:	f104 000b 	add.w	r0, r4, #11
 800bae2:	1d23      	adds	r3, r4, #4
 800bae4:	f020 0007 	bic.w	r0, r0, #7
 800bae8:	1ac3      	subs	r3, r0, r3
 800baea:	d0d3      	beq.n	800ba94 <_malloc_r+0x20>
 800baec:	425a      	negs	r2, r3
 800baee:	50e2      	str	r2, [r4, r3]
 800baf0:	e7d0      	b.n	800ba94 <_malloc_r+0x20>
 800baf2:	428c      	cmp	r4, r1
 800baf4:	684b      	ldr	r3, [r1, #4]
 800baf6:	bf16      	itet	ne
 800baf8:	6063      	strne	r3, [r4, #4]
 800bafa:	6013      	streq	r3, [r2, #0]
 800bafc:	460c      	movne	r4, r1
 800bafe:	e7eb      	b.n	800bad8 <_malloc_r+0x64>
 800bb00:	460c      	mov	r4, r1
 800bb02:	6849      	ldr	r1, [r1, #4]
 800bb04:	e7cc      	b.n	800baa0 <_malloc_r+0x2c>
 800bb06:	1cc4      	adds	r4, r0, #3
 800bb08:	f024 0403 	bic.w	r4, r4, #3
 800bb0c:	42a0      	cmp	r0, r4
 800bb0e:	d005      	beq.n	800bb1c <_malloc_r+0xa8>
 800bb10:	1a21      	subs	r1, r4, r0
 800bb12:	4630      	mov	r0, r6
 800bb14:	f000 f808 	bl	800bb28 <_sbrk_r>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d0cf      	beq.n	800babc <_malloc_r+0x48>
 800bb1c:	6025      	str	r5, [r4, #0]
 800bb1e:	e7db      	b.n	800bad8 <_malloc_r+0x64>
 800bb20:	200049c4 	.word	0x200049c4
 800bb24:	200049c8 	.word	0x200049c8

0800bb28 <_sbrk_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4c06      	ldr	r4, [pc, #24]	; (800bb44 <_sbrk_r+0x1c>)
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4605      	mov	r5, r0
 800bb30:	4608      	mov	r0, r1
 800bb32:	6023      	str	r3, [r4, #0]
 800bb34:	f7f4 ff5c 	bl	80009f0 <_sbrk>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_sbrk_r+0x1a>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_sbrk_r+0x1a>
 800bb40:	602b      	str	r3, [r5, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	20005160 	.word	0x20005160

0800bb48 <__malloc_lock>:
 800bb48:	4770      	bx	lr

0800bb4a <__malloc_unlock>:
 800bb4a:	4770      	bx	lr

0800bb4c <_init>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	bf00      	nop
 800bb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb52:	bc08      	pop	{r3}
 800bb54:	469e      	mov	lr, r3
 800bb56:	4770      	bx	lr

0800bb58 <_fini>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	bf00      	nop
 800bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5e:	bc08      	pop	{r3}
 800bb60:	469e      	mov	lr, r3
 800bb62:	4770      	bx	lr
